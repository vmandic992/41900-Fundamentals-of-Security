Triple DES Capture

168-bit key: MyAwesomeTripleDESKey

3 x 56-bit DES keys: MyAweso, meTripl, eDESKey

Initialization Vector: 12345

=========================================================================================================================
STAGE 1: DES [DECRYPT] ==================================================================================================
=========================================================================================================================

56-bit key: eDESKey
In Binary:  01100101010001000100010101010011010010110110010101111001

Subkeys:    Key i = Key (i - 1) [Shifted left by 1 and inverted]

Subkey 1  : 00110101011101110111010101011001011010010011010100001101
Subkey 2  : 10010101000100010001010101001101001011011001010111100101
Subkey 3  : 11010101110111011101010101100101101001001101010000110100
Subkey 4  : 01010100010001000101010100110100101101100101011110010110
Subkey 5  : 01010111011101110101010110010110100100110101000011010011
Subkey 6  : 01010001000100010101010011010010110110010101111001011001
Subkey 7  : 01011101110111010101011001011010010011010100001101001101
Subkey 8  : 01000100010001010101001101001011011001010111100101100101
Subkey 9  : 01110111011101010101100101101001001101010000110100110101
Subkey 10 : 00010001000101010100110100101101100101011110010110010101
Subkey 11 : 11011101110101010110010110100100110101000011010011010101
Subkey 12 : 01000100010101010011010010110110010101111001011001010100
Subkey 13 : 01110111010101011001011010010011010100001101001101010111
Subkey 14 : 00010001010101001101001011011001010111100101100101010001
Subkey 15 : 11011101010101100101101001001101010000110100110101011101
Subkey 16 : 01000101010100110100101101100101011110010110010101000100

S-BOX (4x4):
INPUT | OUTPUT
------|-------
0000  | 1111
0001  | 1010
0010  | 1110
0011  | 0001
0100  | 0111
0101  | 1001
0110  | 0000
0111  | 1101
1000  | 0010
1001  | 0011
1010  | 0100
1011  | 1000
1100  | 0101
1101  | 0110
1110  | 1100
1111  | 1011

P-BOX (7 bits compressed to 4 bits)
Bit at Position X goes to Position Y
X: | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
Y: | 2 | 3 | 4 | 2 | 1 | 3 | 4 |


Data to decrypt         : £§\æh³ËlÖåæ÷bÞ(ÀS^pá2/?|½¥·?=z

Data padded with spaces : £§\æh³ËlÖåæ÷bÞ(ÀS^pá2/?|½¥·?=z[Padded with '0' spaces]

Data in ASCII           : 163,167,92,230,104,179,203,1,108,214,229,230,247,98,7,222,40,192,83,94,112,225,50,47,139,124,189,165,183,141,61,122,

Data in Binary          : 10100011,10100111,01011100,11100110,01101000,10110011,11001011,00000001,01101100,11010110,11100101,11100110,11110111,01100010,00000111,11011110,00101000,11000000,01010011,01011110,01110000,11100001,00110010,00101111,10001011,01111100,10111101,10100101,10110111,10001101,00111101,01111010,

Data in 64-bit Blocks   : 1010001110100111010111001110011001101000101100111100101100000001,0110110011010110111001011110011011110111011000100000011111011110,0010100011000000010100110101111001110000111000010011001000101111,1000101101111100101111011010010110110111100011010011110101111010,

!!!!NOTE: Subkeys used in REVERSE order for DECRYPTION



<<<<<< PROCESSING IN 'CBC' MODE >>>>>>


!!!CBC: Initial Previous Ciphertext = IV:               (0000000000000000000000000011000100110010001100110011010000110101)

Ciphertext Block 1:                                      1010001110100111010111001110011001101000101100111100101100000001

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10100011101001110101110011100110

       - Right 32 Bits:            01101000101100111100101100000001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000101010100110100101101100101011110010110010101000100   [Subkey: 16]
          - Input Half:       01101000101100111100101100000001
          - S-Box Result:     00000010100000010101100011111010   [per every group of 4-bits]
          - Split Into Two:   0000001010000001 [L] 0101100011111010 [R]
          - Swap Halves:      01011000111110100000001010000001
          - Bit Inversion:    10100111000001011111110101111110
          - Compressed Key:   00101000010110100111110000111000   [done by compression P-Box]
          - XOR with Key:     10001111010111111000000101000110

          - FUNCTION OUTPUT:  10001111010111111000000101000110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10100011101001110101110011100110

       - FUNCTION OUTPUT:          10001111010111111000000101000110

       - Left XOR FUNCTION OUTPUT: 00101100111110001101110110100000

       - Next Round Left 32 Bits:  01101000101100111100101100000001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101100111110001101110110100000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101000101100111100101100000001

       - Right 32 Bits:            00101100111110001101110110100000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011101010101100101101001001101010000110100110101011101   [Subkey: 15]
          - Input Half:       00101100111110001101110110100000
          - S-Box Result:     11100101101100100110011001001111   [per every group of 4-bits]
          - Split Into Two:   1110010110110010 [L] 0110011001001111 [R]
          - Swap Halves:      01100110010011111110010110110010
          - Bit Inversion:    10011001101100000001101001001101
          - Compressed Key:   10111100011110000011110100111101   [done by compression P-Box]
          - XOR with Key:     00100101110010000010011101110000

          - FUNCTION OUTPUT:  00100101110010000010011101110000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101000101100111100101100000001

       - FUNCTION OUTPUT:          00100101110010000010011101110000

       - Left XOR FUNCTION OUTPUT: 01001101011110111110110001110001

       - Next Round Left 32 Bits:  00101100111110001101110110100000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001101011110111110110001110001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101100111110001101110110100000

       - Right 32 Bits:            01001101011110111110110001110001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010001010101001101001011011001010111100101100101010001   [Subkey: 14]
          - Input Half:       01001101011110111110110001110001
          - S-Box Result:     01110110110110001100010111011010   [per every group of 4-bits]
          - Split Into Two:   0111011011011000 [L] 1100010111011010 [R]
          - Swap Halves:      11000101110110100111011011011000
          - Bit Inversion:    00111010001001011000100100100111
          - Compressed Key:   00011100001111010011010100100100   [done by compression P-Box]
          - XOR with Key:     00100110000110001011110000000011

          - FUNCTION OUTPUT:  00100110000110001011110000000011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101100111110001101110110100000

       - FUNCTION OUTPUT:          00100110000110001011110000000011

       - Left XOR FUNCTION OUTPUT: 00001010111000000110000110100011

       - Next Round Left 32 Bits:  01001101011110111110110001110001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001010111000000110000110100011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001101011110111110110001110001

       - Right 32 Bits:            00001010111000000110000110100011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110111010101011001011010010011010100001101001101010111   [Subkey: 13]
          - Input Half:       00001010111000000110000110100011
          - S-Box Result:     11110100110011110000101001000001   [per every group of 4-bits]
          - Split Into Two:   1111010011001111 [L] 0000101001000001 [R]
          - Swap Halves:      00001010010000011111010011001111
          - Bit Inversion:    11110101101111100000101100110000
          - Compressed Key:   01111100001001010011011010101110   [done by compression P-Box]
          - XOR with Key:     10001001100110110011110110011110

          - FUNCTION OUTPUT:  10001001100110110011110110011110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001101011110111110110001110001

       - FUNCTION OUTPUT:          10001001100110110011110110011110

       - Left XOR FUNCTION OUTPUT: 11000100111000001101000111101111

       - Next Round Left 32 Bits:  00001010111000000110000110100011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000100111000001101000111101111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001010111000000110000110100011

       - Right 32 Bits:            11000100111000001101000111101111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000100010101010011010010110110010101111001011001010100   [Subkey: 12]
          - Input Half:       11000100111000001101000111101111
          - S-Box Result:     01010111110011110110101011001011   [per every group of 4-bits]
          - Split Into Two:   0101011111001111 [L] 0110101011001011 [R]
          - Swap Halves:      01101010110010110101011111001111
          - Bit Inversion:    10010101001101001010100000110000
          - Compressed Key:   00101100101001110010101110011000   [done by compression P-Box]
          - XOR with Key:     10111001100100111000001110101000

          - FUNCTION OUTPUT:  10111001100100111000001110101000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001010111000000110000110100011

       - FUNCTION OUTPUT:          10111001100100111000001110101000

       - Left XOR FUNCTION OUTPUT: 10110011011100111110001000001011

       - Next Round Left 32 Bits:  11000100111000001101000111101111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10110011011100111110001000001011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000100111000001101000111101111

       - Right 32 Bits:            10110011011100111110001000001011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011101110101010110010110100100110101000011010011010101   [Subkey: 11]
          - Input Half:       10110011011100111110001000001011
          - S-Box Result:     10000001110100011100111011111000   [per every group of 4-bits]
          - Split Into Two:   1000000111010001 [L] 1100111011111000 [R]
          - Swap Halves:      11001110111110001000000111010001
          - Bit Inversion:    00110001000001110111111000101110
          - Compressed Key:   10111100100100111010000001011100   [done by compression P-Box]
          - XOR with Key:     10001101100101001101111001110010

          - FUNCTION OUTPUT:  10001101100101001101111001110010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000100111000001101000111101111

       - FUNCTION OUTPUT:          10001101100101001101111001110010

       - Left XOR FUNCTION OUTPUT: 01001001011101000000111110011101

       - Next Round Left 32 Bits:  10110011011100111110001000001011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001001011101000000111110011101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10110011011100111110001000001011

       - Right 32 Bits:            01001001011101000000111110011101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010001000101010100110100101101100101011110010110010101   [Subkey: 10]
          - Input Half:       01001001011101000000111110011101
          - S-Box Result:     01110011110101111111101100110110   [per every group of 4-bits]
          - Split Into Two:   0111001111010111 [L] 1111101100110110 [R]
          - Swap Halves:      11111011001101100111001111010111
          - Bit Inversion:    00000100110010011000110000101000
          - Compressed Key:   00011100010100101001111001111100   [done by compression P-Box]
          - XOR with Key:     00011000100110110001001001010100

          - FUNCTION OUTPUT:  00011000100110110001001001010100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10110011011100111110001000001011

       - FUNCTION OUTPUT:          00011000100110110001001001010100

       - Left XOR FUNCTION OUTPUT: 10101011111010001111000001011111

       - Next Round Left 32 Bits:  01001001011101000000111110011101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10101011111010001111000001011111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001001011101000000111110011101

       - Right 32 Bits:            10101011111010001111000001011111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110111011101010101100101101001001101010000110100110101   [Subkey: 9]
          - Input Half:       10101011111010001111000001011111
          - S-Box Result:     01001000110000101011111110011011   [per every group of 4-bits]
          - Split Into Two:   0100100011000010 [L] 1011111110011011 [R]
          - Swap Halves:      10111111100110110100100011000010
          - Bit Inversion:    01000000011001001011011100111101
          - Compressed Key:   01111101011110100101100000111100   [done by compression P-Box]
          - XOR with Key:     00111101000111101110111100000001

          - FUNCTION OUTPUT:  00111101000111101110111100000001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001001011101000000111110011101

       - FUNCTION OUTPUT:          00111101000111101110111100000001

       - Left XOR FUNCTION OUTPUT: 01110100011010101110000010011100

       - Next Round Left 32 Bits:  10101011111010001111000001011111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110100011010101110000010011100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10101011111010001111000001011111

       - Right 32 Bits:            01110100011010101110000010011100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000100010001010101001101001011011001010111100101100101   [Subkey: 8]
          - Input Half:       01110100011010101110000010011100
          - S-Box Result:     11010111000001001100111100110101   [per every group of 4-bits]
          - Split Into Two:   1101011100000100 [L] 1100111100110101 [R]
          - Swap Halves:      11001111001101011101011100000100
          - Bit Inversion:    00110000110010100010100011111011
          - Compressed Key:   00100100001110000111110000101100   [done by compression P-Box]
          - XOR with Key:     00010100111100100101010011010111

          - FUNCTION OUTPUT:  00010100111100100101010011010111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10101011111010001111000001011111

       - FUNCTION OUTPUT:          00010100111100100101010011010111

       - Left XOR FUNCTION OUTPUT: 10111111000110101010010010001000

       - Next Round Left 32 Bits:  01110100011010101110000010011100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10111111000110101010010010001000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110100011010101110000010011100

       - Right 32 Bits:            10111111000110101010010010001000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011101110111010101011001011010010011010100001101001101   [Subkey: 7]
          - Input Half:       10111111000110101010010010001000
          - S-Box Result:     10001011101001000100011100100010   [per every group of 4-bits]
          - Split Into Two:   1000101110100100 [L] 0100011100100010 [R]
          - Swap Halves:      01000111001000101000101110100100
          - Bit Inversion:    10111000110111010111010001011011
          - Compressed Key:   10111110001111000010110010101101   [done by compression P-Box]
          - XOR with Key:     00000110111000010101100011110110

          - FUNCTION OUTPUT:  00000110111000010101100011110110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110100011010101110000010011100

       - FUNCTION OUTPUT:          00000110111000010101100011110110

       - Left XOR FUNCTION OUTPUT: 01110010100010111011100001101010

       - Next Round Left 32 Bits:  10111111000110101010010010001000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110010100010111011100001101010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10111111000110101010010010001000

       - Right 32 Bits:            01110010100010111011100001101010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010001000100010101010011010010110110010101111001011001   [Subkey: 6]
          - Input Half:       01110010100010111011100001101010
          - S-Box Result:     11011110001010001000001000000100   [per every group of 4-bits]
          - Split Into Two:   1101111000101000 [L] 1000001000000100 [R]
          - Swap Halves:      10000010000001001101111000101000
          - Bit Inversion:    01111101111110110010000111010111
          - Compressed Key:   00011000001111011010110010010101   [done by compression P-Box]
          - XOR with Key:     01100101110001101000110101000010

          - FUNCTION OUTPUT:  01100101110001101000110101000010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10111111000110101010010010001000

       - FUNCTION OUTPUT:          01100101110001101000110101000010

       - Left XOR FUNCTION OUTPUT: 11011010110111000010100111001010

       - Next Round Left 32 Bits:  01110010100010111011100001101010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11011010110111000010100111001010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110010100010111011100001101010

       - Right 32 Bits:            11011010110111000010100111001010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010111011101110101010110010110100100110101000011010011   [Subkey: 5]
          - Input Half:       11011010110111000010100111001010
          - S-Box Result:     01100100011001011110001101010100   [per every group of 4-bits]
          - Split Into Two:   0110010001100101 [L] 1110001101010100 [R]
          - Swap Halves:      11100011010101000110010001100101
          - Bit Inversion:    00011100101010111001101110011010
          - Compressed Key:   01111101001101011000110101000110   [done by compression P-Box]
          - XOR with Key:     01100001100111100001011011011100

          - FUNCTION OUTPUT:  01100001100111100001011011011100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110010100010111011100001101010

       - FUNCTION OUTPUT:          01100001100111100001011011011100

       - Left XOR FUNCTION OUTPUT: 00010011000101011010111010110110

       - Next Round Left 32 Bits:  11011010110111000010100111001010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00010011000101011010111010110110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11011010110111000010100111001010

       - Right 32 Bits:            00010011000101011010111010110110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010100010001000101010100110100101101100101011110010110   [Subkey: 4]
          - Input Half:       00010011000101011010111010110110
          - S-Box Result:     10100001101010010100110010000000   [per every group of 4-bits]
          - Split Into Two:   1010000110101001 [L] 0100110010000000 [R]
          - Swap Halves:      01001100100000001010000110101001
          - Bit Inversion:    10110011011111110101111001010110
          - Compressed Key:   00110100001101101100010111111010   [done by compression P-Box]
          - XOR with Key:     10000111010010011001101110101100

          - FUNCTION OUTPUT:  10000111010010011001101110101100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11011010110111000010100111001010

       - FUNCTION OUTPUT:          10000111010010011001101110101100

       - Left XOR FUNCTION OUTPUT: 01011101100101011011001001100110

       - Next Round Left 32 Bits:  00010011000101011010111010110110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011101100101011011001001100110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00010011000101011010111010110110

       - Right 32 Bits:            01011101100101011011001001100110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010101110111011101010101100101101001001101010000110100   [Subkey: 3]
          - Input Half:       01011101100101011011001001100110
          - S-Box Result:     10010110001110011000111000000000   [per every group of 4-bits]
          - Split Into Two:   1001011000111001 [L] 1000111000000000 [R]
          - Swap Halves:      10001110000000001001011000111001
          - Bit Inversion:    01110001111111110110100111000110
          - Compressed Key:   00111110001110101101011000011000   [done by compression P-Box]
          - XOR with Key:     01001111110001011011111111011110

          - FUNCTION OUTPUT:  01001111110001011011111111011110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00010011000101011010111010110110

       - FUNCTION OUTPUT:          01001111110001011011111111011110

       - Left XOR FUNCTION OUTPUT: 01011100110100000001000101101000

       - Next Round Left 32 Bits:  01011101100101011011001001100110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011100110100000001000101101000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011101100101011011001001100110

       - Right 32 Bits:            01011100110100000001000101101000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010101000100010001010101001101001011011001010111100101   [Subkey: 2]
          - Input Half:       01011100110100000001000101101000
          - S-Box Result:     10010101011011111010101000000010   [per every group of 4-bits]
          - Split Into Two:   1001010101101111 [L] 1010101000000010 [R]
          - Swap Halves:      10101010000000101001010101101111
          - Bit Inversion:    01010101111111010110101010010000
          - Compressed Key:   00111000001010000101101001111100   [done by compression P-Box]
          - XOR with Key:     01101101110101010011000011101100

          - FUNCTION OUTPUT:  01101101110101010011000011101100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011101100101011011001001100110

       - FUNCTION OUTPUT:          01101101110101010011000011101100

       - Left XOR FUNCTION OUTPUT: 00110000010000001000001010001010

       - Next Round Left 32 Bits:  01011100110100000001000101101000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00110000010000001000001010001010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011100110100000001000101101000

       - Right 32 Bits:            00110000010000001000001010001010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101011101110111010101011001011010010011010100001101   [Subkey: 1]
          - Input Half:       00110000010000001000001010001010
          - S-Box Result:     00011111011111110010111000100100   [per every group of 4-bits]
          - Split Into Two:   0001111101111111 [L] 0010111000100100 [R]
          - Swap Halves:      00101110001001000001111101111111
          - Bit Inversion:    11010001110110111110000010000000
          - Compressed Key:   00111101101111000111100000111101   [done by compression P-Box]
          - XOR with Key:     11101100011001111001100010111101

          - FUNCTION OUTPUT:  11101100011001111001100010111101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011100110100000001000101101000

       - FUNCTION OUTPUT:          11101100011001111001100010111101

       - Left XOR FUNCTION OUTPUT: 10110000101101111000100111010101

       - Next Round Left 32 Bits:  00110000010000001000001010001010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10110000101101111000100111010101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 1011000010110111100010011101010100110000010000001000001010001010

 > Decrypted Block:     1011000010110111100010011101010100110000010000001000001010001010


!!!CBC: Previous Ciphertext:                             0000000000000000000000000011000100110010001100110011010000110101

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    1011000010110111100010011110010000000010011100111011011010111111

 > Final Processed Block:                                1011000010110111100010011110010000000010011100111011011010111111



Ciphertext Block 2:                                      0110110011010110111001011110011011110111011000100000011111011110

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101100110101101110010111100110

       - Right 32 Bits:            11110111011000100000011111011110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000101010100110100101101100101011110010110010101000100   [Subkey: 16]
          - Input Half:       11110111011000100000011111011110
          - S-Box Result:     10111101000011101111110101101100   [per every group of 4-bits]
          - Split Into Two:   1011110100001110 [L] 1111110101101100 [R]
          - Swap Halves:      11111101011011001011110100001110
          - Bit Inversion:    00000010100100110100001011110001
          - Compressed Key:   00101000010110100111110000111000   [done by compression P-Box]
          - XOR with Key:     00101010110010010011111011001001

          - FUNCTION OUTPUT:  00101010110010010011111011001001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101100110101101110010111100110

       - FUNCTION OUTPUT:          00101010110010010011111011001001

       - Left XOR FUNCTION OUTPUT: 01000110000111111101101100101111

       - Next Round Left 32 Bits:  11110111011000100000011111011110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000110000111111101101100101111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110111011000100000011111011110

       - Right 32 Bits:            01000110000111111101101100101111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011101010101100101101001001101010000110100110101011101   [Subkey: 15]
          - Input Half:       01000110000111111101101100101111
          - S-Box Result:     01110000101010110110100011101011   [per every group of 4-bits]
          - Split Into Two:   0111000010101011 [L] 0110100011101011 [R]
          - Swap Halves:      01101000111010110111000010101011
          - Bit Inversion:    10010111000101001000111101010100
          - Compressed Key:   10111100011110000011110100111101   [done by compression P-Box]
          - XOR with Key:     00101011011011001011001001101001

          - FUNCTION OUTPUT:  00101011011011001011001001101001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110111011000100000011111011110

       - FUNCTION OUTPUT:          00101011011011001011001001101001

       - Left XOR FUNCTION OUTPUT: 11011100000011101011010110110111

       - Next Round Left 32 Bits:  01000110000111111101101100101111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11011100000011101011010110110111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01000110000111111101101100101111

       - Right 32 Bits:            11011100000011101011010110110111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010001010101001101001011011001010111100101100101010001   [Subkey: 14]
          - Input Half:       11011100000011101011010110110111
          - S-Box Result:     01100101111111001000100110001101   [per every group of 4-bits]
          - Split Into Two:   0110010111111100 [L] 1000100110001101 [R]
          - Swap Halves:      10001001100011010110010111111100
          - Bit Inversion:    01110110011100101001101000000011
          - Compressed Key:   00011100001111010011010100100100   [done by compression P-Box]
          - XOR with Key:     01101010010011111010111100100111

          - FUNCTION OUTPUT:  01101010010011111010111100100111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01000110000111111101101100101111

       - FUNCTION OUTPUT:          01101010010011111010111100100111

       - Left XOR FUNCTION OUTPUT: 00101100010100000111010000001000

       - Next Round Left 32 Bits:  11011100000011101011010110110111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101100010100000111010000001000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11011100000011101011010110110111

       - Right 32 Bits:            00101100010100000111010000001000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110111010101011001011010010011010100001101001101010111   [Subkey: 13]
          - Input Half:       00101100010100000111010000001000
          - S-Box Result:     11100101100111111101011111110010   [per every group of 4-bits]
          - Split Into Two:   1110010110011111 [L] 1101011111110010 [R]
          - Swap Halves:      11010111111100101110010110011111
          - Bit Inversion:    00101000000011010001101001100000
          - Compressed Key:   01111100001001010011011010101110   [done by compression P-Box]
          - XOR with Key:     01010100001010000010110011001110

          - FUNCTION OUTPUT:  01010100001010000010110011001110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11011100000011101011010110110111

       - FUNCTION OUTPUT:          01010100001010000010110011001110

       - Left XOR FUNCTION OUTPUT: 10001000001001101001100101111001

       - Next Round Left 32 Bits:  00101100010100000111010000001000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001000001001101001100101111001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101100010100000111010000001000

       - Right 32 Bits:            10001000001001101001100101111001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000100010101010011010010110110010101111001011001010100   [Subkey: 12]
          - Input Half:       10001000001001101001100101111001
          - S-Box Result:     00100010111000000011001111010011   [per every group of 4-bits]
          - Split Into Two:   0010001011100000 [L] 0011001111010011 [R]
          - Swap Halves:      00110011110100110010001011100000
          - Bit Inversion:    11001100001011001101110100011111
          - Compressed Key:   00101100101001110010101110011000   [done by compression P-Box]
          - XOR with Key:     11100000100010111111011010000111

          - FUNCTION OUTPUT:  11100000100010111111011010000111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101100010100000111010000001000

       - FUNCTION OUTPUT:          11100000100010111111011010000111

       - Left XOR FUNCTION OUTPUT: 11001100110110111000001010001111

       - Next Round Left 32 Bits:  10001000001001101001100101111001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001100110110111000001010001111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001000001001101001100101111001

       - Right 32 Bits:            11001100110110111000001010001111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011101110101010110010110100100110101000011010011010101   [Subkey: 11]
          - Input Half:       11001100110110111000001010001111
          - S-Box Result:     01010101011010000010111000101011   [per every group of 4-bits]
          - Split Into Two:   0101010101101000 [L] 0010111000101011 [R]
          - Swap Halves:      00101110001010110101010101101000
          - Bit Inversion:    11010001110101001010101010010111
          - Compressed Key:   10111100100100111010000001011100   [done by compression P-Box]
          - XOR with Key:     01101101010001110000101011001011

          - FUNCTION OUTPUT:  01101101010001110000101011001011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001000001001101001100101111001

       - FUNCTION OUTPUT:          01101101010001110000101011001011

       - Left XOR FUNCTION OUTPUT: 11100101011000011001001110110010

       - Next Round Left 32 Bits:  11001100110110111000001010001111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100101011000011001001110110010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11001100110110111000001010001111

       - Right 32 Bits:            11100101011000011001001110110010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010001000101010100110100101101100101011110010110010101   [Subkey: 10]
          - Input Half:       11100101011000011001001110110010
          - S-Box Result:     11001001000010100011000110001110   [per every group of 4-bits]
          - Split Into Two:   1100100100001010 [L] 0011000110001110 [R]
          - Swap Halves:      00110001100011101100100100001010
          - Bit Inversion:    11001110011100010011011011110101
          - Compressed Key:   00011100010100101001111001111100   [done by compression P-Box]
          - XOR with Key:     11010010001000111010100010001001

          - FUNCTION OUTPUT:  11010010001000111010100010001001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11001100110110111000001010001111

       - FUNCTION OUTPUT:          11010010001000111010100010001001

       - Left XOR FUNCTION OUTPUT: 00011110111110000010101000000110

       - Next Round Left 32 Bits:  11100101011000011001001110110010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011110111110000010101000000110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100101011000011001001110110010

       - Right 32 Bits:            00011110111110000010101000000110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110111011101010101100101101001001101010000110100110101   [Subkey: 9]
          - Input Half:       00011110111110000010101000000110
          - S-Box Result:     10101100101100101110010011110000   [per every group of 4-bits]
          - Split Into Two:   1010110010110010 [L] 1110010011110000 [R]
          - Swap Halves:      11100100111100001010110010110010
          - Bit Inversion:    00011011000011110101001101001101
          - Compressed Key:   01111101011110100101100000111100   [done by compression P-Box]
          - XOR with Key:     01100110011101010000101101110001

          - FUNCTION OUTPUT:  01100110011101010000101101110001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100101011000011001001110110010

       - FUNCTION OUTPUT:          01100110011101010000101101110001

       - Left XOR FUNCTION OUTPUT: 10000011000101001001100011000011

       - Next Round Left 32 Bits:  00011110111110000010101000000110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10000011000101001001100011000011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00011110111110000010101000000110

       - Right 32 Bits:            10000011000101001001100011000011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000100010001010101001101001011011001010111100101100101   [Subkey: 8]
          - Input Half:       10000011000101001001100011000011
          - S-Box Result:     00100001101001110011001001010001   [per every group of 4-bits]
          - Split Into Two:   0010000110100111 [L] 0011001001010001 [R]
          - Swap Halves:      00110010010100010010000110100111
          - Bit Inversion:    11001101101011101101111001011000
          - Compressed Key:   00100100001110000111110000101100   [done by compression P-Box]
          - XOR with Key:     11101001100101101010001001110100

          - FUNCTION OUTPUT:  11101001100101101010001001110100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00011110111110000010101000000110

       - FUNCTION OUTPUT:          11101001100101101010001001110100

       - Left XOR FUNCTION OUTPUT: 11110111011011101000100001110010

       - Next Round Left 32 Bits:  10000011000101001001100011000011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110111011011101000100001110010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10000011000101001001100011000011

       - Right 32 Bits:            11110111011011101000100001110010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011101110111010101011001011010010011010100001101001101   [Subkey: 7]
          - Input Half:       11110111011011101000100001110010
          - S-Box Result:     10111101000011000010001011011110   [per every group of 4-bits]
          - Split Into Two:   1011110100001100 [L] 0010001011011110 [R]
          - Swap Halves:      00100010110111101011110100001100
          - Bit Inversion:    11011101001000010100001011110011
          - Compressed Key:   10111110001111000010110010101101   [done by compression P-Box]
          - XOR with Key:     01100011000111010110111001011110

          - FUNCTION OUTPUT:  01100011000111010110111001011110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10000011000101001001100011000011

       - FUNCTION OUTPUT:          01100011000111010110111001011110

       - Left XOR FUNCTION OUTPUT: 11100000000010011111011010011101

       - Next Round Left 32 Bits:  11110111011011101000100001110010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100000000010011111011010011101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110111011011101000100001110010

       - Right 32 Bits:            11100000000010011111011010011101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010001000100010101010011010010110110010101111001011001   [Subkey: 6]
          - Input Half:       11100000000010011111011010011101
          - S-Box Result:     11001111111100111011000000110110   [per every group of 4-bits]
          - Split Into Two:   1100111111110011 [L] 1011000000110110 [R]
          - Swap Halves:      10110000001101101100111111110011
          - Bit Inversion:    01001111110010010011000000001100
          - Compressed Key:   00011000001111011010110010010101   [done by compression P-Box]
          - XOR with Key:     01010111111101001001110010011001

          - FUNCTION OUTPUT:  01010111111101001001110010011001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110111011011101000100001110010

       - FUNCTION OUTPUT:          01010111111101001001110010011001

       - Left XOR FUNCTION OUTPUT: 10100000100110100001010011101011

       - Next Round Left 32 Bits:  11100000000010011111011010011101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10100000100110100001010011101011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100000000010011111011010011101

       - Right 32 Bits:            10100000100110100001010011101011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010111011101110101010110010110100100110101000011010011   [Subkey: 5]
          - Input Half:       10100000100110100001010011101011
          - S-Box Result:     01001111001101001010011111001000   [per every group of 4-bits]
          - Split Into Two:   0100111100110100 [L] 1010011111001000 [R]
          - Swap Halves:      10100111110010000100111100110100
          - Bit Inversion:    01011000001101111011000011001011
          - Compressed Key:   01111101001101011000110101000110   [done by compression P-Box]
          - XOR with Key:     00100101000000100011110110001101

          - FUNCTION OUTPUT:  00100101000000100011110110001101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100000000010011111011010011101

       - FUNCTION OUTPUT:          00100101000000100011110110001101

       - Left XOR FUNCTION OUTPUT: 11000101000010111100101100010000

       - Next Round Left 32 Bits:  10100000100110100001010011101011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000101000010111100101100010000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10100000100110100001010011101011

       - Right 32 Bits:            11000101000010111100101100010000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010100010001000101010100110100101101100101011110010110   [Subkey: 4]
          - Input Half:       11000101000010111100101100010000
          - S-Box Result:     01011001111110000101100010101111   [per every group of 4-bits]
          - Split Into Two:   0101100111111000 [L] 0101100010101111 [R]
          - Swap Halves:      01011000101011110101100111111000
          - Bit Inversion:    10100111010100001010011000000111
          - Compressed Key:   00110100001101101100010111111010   [done by compression P-Box]
          - XOR with Key:     10010011011001100110001111111101

          - FUNCTION OUTPUT:  10010011011001100110001111111101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10100000100110100001010011101011

       - FUNCTION OUTPUT:          10010011011001100110001111111101

       - Left XOR FUNCTION OUTPUT: 00110011111111000111011100010110

       - Next Round Left 32 Bits:  11000101000010111100101100010000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00110011111111000111011100010110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000101000010111100101100010000

       - Right 32 Bits:            00110011111111000111011100010110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010101110111011101010101100101101001001101010000110100   [Subkey: 3]
          - Input Half:       00110011111111000111011100010110
          - S-Box Result:     00010001101101011101110110100000   [per every group of 4-bits]
          - Split Into Two:   0001000110110101 [L] 1101110110100000 [R]
          - Swap Halves:      11011101101000000001000110110101
          - Bit Inversion:    00100010010111111110111001001010
          - Compressed Key:   00111110001110101101011000011000   [done by compression P-Box]
          - XOR with Key:     00011100011001010011100001010010

          - FUNCTION OUTPUT:  00011100011001010011100001010010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000101000010111100101100010000

       - FUNCTION OUTPUT:          00011100011001010011100001010010

       - Left XOR FUNCTION OUTPUT: 11011001011011101111001101000010

       - Next Round Left 32 Bits:  00110011111111000111011100010110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11011001011011101111001101000010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00110011111111000111011100010110

       - Right 32 Bits:            11011001011011101111001101000010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010101000100010001010101001101001011011001010111100101   [Subkey: 2]
          - Input Half:       11011001011011101111001101000010
          - S-Box Result:     01100011000011001011000101111110   [per every group of 4-bits]
          - Split Into Two:   0110001100001100 [L] 1011000101111110 [R]
          - Swap Halves:      10110001011111100110001100001100
          - Bit Inversion:    01001110100000011001110011110011
          - Compressed Key:   00111000001010000101101001111100   [done by compression P-Box]
          - XOR with Key:     01110110101010011100011010001111

          - FUNCTION OUTPUT:  01110110101010011100011010001111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00110011111111000111011100010110

       - FUNCTION OUTPUT:          01110110101010011100011010001111

       - Left XOR FUNCTION OUTPUT: 01000101010101011011000110011001

       - Next Round Left 32 Bits:  11011001011011101111001101000010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000101010101011011000110011001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11011001011011101111001101000010

       - Right 32 Bits:            01000101010101011011000110011001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101011101110111010101011001011010010011010100001101   [Subkey: 1]
          - Input Half:       01000101010101011011000110011001
          - S-Box Result:     01111001100110011000101000110011   [per every group of 4-bits]
          - Split Into Two:   0111100110011001 [L] 1000101000110011 [R]
          - Swap Halves:      10001010001100110111100110011001
          - Bit Inversion:    01110101110011001000011001100110
          - Compressed Key:   00111101101111000111100000111101   [done by compression P-Box]
          - XOR with Key:     01001000011100001111111001011011

          - FUNCTION OUTPUT:  01001000011100001111111001011011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11011001011011101111001101000010

       - FUNCTION OUTPUT:          01001000011100001111111001011011

       - Left XOR FUNCTION OUTPUT: 10010001000111100000110100011001

       - Next Round Left 32 Bits:  01000101010101011011000110011001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010001000111100000110100011001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 1001000100011110000011010001100101000101010101011011000110011001

 > Decrypted Block:     1001000100011110000011010001100101000101010101011011000110011001


!!!CBC: Previous Ciphertext:                             1010001110100111010111001110011001101000101100111100101100000001

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    0011001010111001010100011111111100101101111001100111101010011000

 > Final Processed Block:                                0011001010111001010100011111111100101101111001100111101010011000



Ciphertext Block 3:                                      0010100011000000010100110101111001110000111000010011001000101111

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101000110000000101001101011110

       - Right 32 Bits:            01110000111000010011001000101111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000101010100110100101101100101011110010110010101000100   [Subkey: 16]
          - Input Half:       01110000111000010011001000101111
          - S-Box Result:     11011111110010100001111011101011   [per every group of 4-bits]
          - Split Into Two:   1101111111001010 [L] 0001111011101011 [R]
          - Swap Halves:      00011110111010111101111111001010
          - Bit Inversion:    11100001000101000010000000110101
          - Compressed Key:   00101000010110100111110000111000   [done by compression P-Box]
          - XOR with Key:     11001001010011100101110000001101

          - FUNCTION OUTPUT:  11001001010011100101110000001101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101000110000000101001101011110

       - FUNCTION OUTPUT:          11001001010011100101110000001101

       - Left XOR FUNCTION OUTPUT: 11100001100011100000111101010011

       - Next Round Left 32 Bits:  01110000111000010011001000101111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100001100011100000111101010011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110000111000010011001000101111

       - Right 32 Bits:            11100001100011100000111101010011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011101010101100101101001001101010000110100110101011101   [Subkey: 15]
          - Input Half:       11100001100011100000111101010011
          - S-Box Result:     11001010001011001111101110010001   [per every group of 4-bits]
          - Split Into Two:   1100101000101100 [L] 1111101110010001 [R]
          - Swap Halves:      11111011100100011100101000101100
          - Bit Inversion:    00000100011011100011010111010011
          - Compressed Key:   10111100011110000011110100111101   [done by compression P-Box]
          - XOR with Key:     10111000000101100000100011101110

          - FUNCTION OUTPUT:  10111000000101100000100011101110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110000111000010011001000101111

       - FUNCTION OUTPUT:          10111000000101100000100011101110

       - Left XOR FUNCTION OUTPUT: 11001000111101110011101011000001

       - Next Round Left 32 Bits:  11100001100011100000111101010011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001000111101110011101011000001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100001100011100000111101010011

       - Right 32 Bits:            11001000111101110011101011000001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010001010101001101001011011001010111100101100101010001   [Subkey: 14]
          - Input Half:       11001000111101110011101011000001
          - S-Box Result:     01010010101111010001010001011010   [per every group of 4-bits]
          - Split Into Two:   0101001010111101 [L] 0001010001011010 [R]
          - Swap Halves:      00010100010110100101001010111101
          - Bit Inversion:    11101011101001011010110101000010
          - Compressed Key:   00011100001111010011010100100100   [done by compression P-Box]
          - XOR with Key:     11110111100110001001100001100110

          - FUNCTION OUTPUT:  11110111100110001001100001100110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100001100011100000111101010011

       - FUNCTION OUTPUT:          11110111100110001001100001100110

       - Left XOR FUNCTION OUTPUT: 00010110000101101001011100110101

       - Next Round Left 32 Bits:  11001000111101110011101011000001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00010110000101101001011100110101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11001000111101110011101011000001

       - Right 32 Bits:            00010110000101101001011100110101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110111010101011001011010010011010100001101001101010111   [Subkey: 13]
          - Input Half:       00010110000101101001011100110101
          - S-Box Result:     10100000101000000011110100011001   [per every group of 4-bits]
          - Split Into Two:   1010000010100000 [L] 0011110100011001 [R]
          - Swap Halves:      00111101000110011010000010100000
          - Bit Inversion:    11000010111001100101111101011111
          - Compressed Key:   01111100001001010011011010101110   [done by compression P-Box]
          - XOR with Key:     10111110110000110110100111110001

          - FUNCTION OUTPUT:  10111110110000110110100111110001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11001000111101110011101011000001

       - FUNCTION OUTPUT:          10111110110000110110100111110001

       - Left XOR FUNCTION OUTPUT: 01110110001101000101001100110000

       - Next Round Left 32 Bits:  00010110000101101001011100110101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110110001101000101001100110000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00010110000101101001011100110101

       - Right 32 Bits:            01110110001101000101001100110000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000100010101010011010010110110010101111001011001010100   [Subkey: 12]
          - Input Half:       01110110001101000101001100110000
          - S-Box Result:     11010000000101111001000100011111   [per every group of 4-bits]
          - Split Into Two:   1101000000010111 [L] 1001000100011111 [R]
          - Swap Halves:      10010001000111111101000000010111
          - Bit Inversion:    01101110111000000010111111101000
          - Compressed Key:   00101100101001110010101110011000   [done by compression P-Box]
          - XOR with Key:     01000010010001110000010001110000

          - FUNCTION OUTPUT:  01000010010001110000010001110000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00010110000101101001011100110101

       - FUNCTION OUTPUT:          01000010010001110000010001110000

       - Left XOR FUNCTION OUTPUT: 01010100010100011001001101000101

       - Next Round Left 32 Bits:  01110110001101000101001100110000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01010100010100011001001101000101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110110001101000101001100110000

       - Right 32 Bits:            01010100010100011001001101000101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011101110101010110010110100100110101000011010011010101   [Subkey: 11]
          - Input Half:       01010100010100011001001101000101
          - S-Box Result:     10010111100110100011000101111001   [per every group of 4-bits]
          - Split Into Two:   1001011110011010 [L] 0011000101111001 [R]
          - Swap Halves:      00110001011110011001011110011010
          - Bit Inversion:    11001110100001100110100001100101
          - Compressed Key:   10111100100100111010000001011100   [done by compression P-Box]
          - XOR with Key:     01110010000101011100100000111001

          - FUNCTION OUTPUT:  01110010000101011100100000111001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110110001101000101001100110000

       - FUNCTION OUTPUT:          01110010000101011100100000111001

       - Left XOR FUNCTION OUTPUT: 00000100001000011001101100001001

       - Next Round Left 32 Bits:  01010100010100011001001101000101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00000100001000011001101100001001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01010100010100011001001101000101

       - Right 32 Bits:            00000100001000011001101100001001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010001000101010100110100101101100101011110010110010101   [Subkey: 10]
          - Input Half:       00000100001000011001101100001001
          - S-Box Result:     11110111111010100011100011110011   [per every group of 4-bits]
          - Split Into Two:   1111011111101010 [L] 0011100011110011 [R]
          - Swap Halves:      00111000111100111111011111101010
          - Bit Inversion:    11000111000011000000100000010101
          - Compressed Key:   00011100010100101001111001111100   [done by compression P-Box]
          - XOR with Key:     11011011010111101001011001101001

          - FUNCTION OUTPUT:  11011011010111101001011001101001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01010100010100011001001101000101

       - FUNCTION OUTPUT:          11011011010111101001011001101001

       - Left XOR FUNCTION OUTPUT: 10001111000011110000010100101100

       - Next Round Left 32 Bits:  00000100001000011001101100001001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001111000011110000010100101100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00000100001000011001101100001001

       - Right 32 Bits:            10001111000011110000010100101100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110111011101010101100101101001001101010000110100110101   [Subkey: 9]
          - Input Half:       10001111000011110000010100101100
          - S-Box Result:     00101011111110111111100111100101   [per every group of 4-bits]
          - Split Into Two:   0010101111111011 [L] 1111100111100101 [R]
          - Swap Halves:      11111001111001010010101111111011
          - Bit Inversion:    00000110000110101101010000000100
          - Compressed Key:   01111101011110100101100000111100   [done by compression P-Box]
          - XOR with Key:     01111011011000001000110000111000

          - FUNCTION OUTPUT:  01111011011000001000110000111000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00000100001000011001101100001001

       - FUNCTION OUTPUT:          01111011011000001000110000111000

       - Left XOR FUNCTION OUTPUT: 01111111010000010001011100110001

       - Next Round Left 32 Bits:  10001111000011110000010100101100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01111111010000010001011100110001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001111000011110000010100101100

       - Right 32 Bits:            01111111010000010001011100110001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000100010001010101001101001011011001010111100101100101   [Subkey: 8]
          - Input Half:       01111111010000010001011100110001
          - S-Box Result:     11011011011110101010110100011010   [per every group of 4-bits]
          - Split Into Two:   1101101101111010 [L] 1010110100011010 [R]
          - Swap Halves:      10101101000110101101101101111010
          - Bit Inversion:    01010010111001010010010010000101
          - Compressed Key:   00100100001110000111110000101100   [done by compression P-Box]
          - XOR with Key:     01110110110111010101100010101001

          - FUNCTION OUTPUT:  01110110110111010101100010101001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001111000011110000010100101100

       - FUNCTION OUTPUT:          01110110110111010101100010101001

       - Left XOR FUNCTION OUTPUT: 11111001110100100101110110000101

       - Next Round Left 32 Bits:  01111111010000010001011100110001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111001110100100101110110000101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01111111010000010001011100110001

       - Right 32 Bits:            11111001110100100101110110000101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011101110111010101011001011010010011010100001101001101   [Subkey: 7]
          - Input Half:       11111001110100100101110110000101
          - S-Box Result:     10110011011011101001011000101001   [per every group of 4-bits]
          - Split Into Two:   1011001101101110 [L] 1001011000101001 [R]
          - Swap Halves:      10010110001010011011001101101110
          - Bit Inversion:    01101001110101100100110010010001
          - Compressed Key:   10111110001111000010110010101101   [done by compression P-Box]
          - XOR with Key:     11010111111010100110000000111100

          - FUNCTION OUTPUT:  11010111111010100110000000111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01111111010000010001011100110001

       - FUNCTION OUTPUT:          11010111111010100110000000111100

       - Left XOR FUNCTION OUTPUT: 10101000101010110111011100001101

       - Next Round Left 32 Bits:  11111001110100100101110110000101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10101000101010110111011100001101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111001110100100101110110000101

       - Right 32 Bits:            10101000101010110111011100001101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010001000100010101010011010010110110010101111001011001   [Subkey: 6]
          - Input Half:       10101000101010110111011100001101
          - S-Box Result:     01000010010010001101110111110110   [per every group of 4-bits]
          - Split Into Two:   0100001001001000 [L] 1101110111110110 [R]
          - Swap Halves:      11011101111101100100001001001000
          - Bit Inversion:    00100010000010011011110110110111
          - Compressed Key:   00011000001111011010110010010101   [done by compression P-Box]
          - XOR with Key:     00111010001101000001000100100010

          - FUNCTION OUTPUT:  00111010001101000001000100100010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111001110100100101110110000101

       - FUNCTION OUTPUT:          00111010001101000001000100100010

       - Left XOR FUNCTION OUTPUT: 11000011111001100100110010100111

       - Next Round Left 32 Bits:  10101000101010110111011100001101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000011111001100100110010100111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10101000101010110111011100001101

       - Right 32 Bits:            11000011111001100100110010100111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010111011101110101010110010110100100110101000011010011   [Subkey: 5]
          - Input Half:       11000011111001100100110010100111
          - S-Box Result:     01010001110000000111010101001101   [per every group of 4-bits]
          - Split Into Two:   0101000111000000 [L] 0111010101001101 [R]
          - Swap Halves:      01110101010011010101000111000000
          - Bit Inversion:    10001010101100101010111000111111
          - Compressed Key:   01111101001101011000110101000110   [done by compression P-Box]
          - XOR with Key:     11110111100001110010001101111001

          - FUNCTION OUTPUT:  11110111100001110010001101111001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10101000101010110111011100001101

       - FUNCTION OUTPUT:          11110111100001110010001101111001

       - Left XOR FUNCTION OUTPUT: 01011111001011000101010001110100

       - Next Round Left 32 Bits:  11000011111001100100110010100111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011111001011000101010001110100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000011111001100100110010100111

       - Right 32 Bits:            01011111001011000101010001110100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010100010001000101010100110100101101100101011110010110   [Subkey: 4]
          - Input Half:       01011111001011000101010001110100
          - S-Box Result:     10011011111001011001011111010111   [per every group of 4-bits]
          - Split Into Two:   1001101111100101 [L] 1001011111010111 [R]
          - Swap Halves:      10010111110101111001101111100101
          - Bit Inversion:    01101000001010000110010000011010
          - Compressed Key:   00110100001101101100010111111010   [done by compression P-Box]
          - XOR with Key:     01011100000111101010000111100000

          - FUNCTION OUTPUT:  01011100000111101010000111100000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000011111001100100110010100111

       - FUNCTION OUTPUT:          01011100000111101010000111100000

       - Left XOR FUNCTION OUTPUT: 10011111111110001110110101000111

       - Next Round Left 32 Bits:  01011111001011000101010001110100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011111111110001110110101000111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011111001011000101010001110100

       - Right 32 Bits:            10011111111110001110110101000111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010101110111011101010101100101101001001101010000110100   [Subkey: 3]
          - Input Half:       10011111111110001110110101000111
          - S-Box Result:     00111011101100101100011001111101   [per every group of 4-bits]
          - Split Into Two:   0011101110110010 [L] 1100011001111101 [R]
          - Swap Halves:      11000110011111010011101110110010
          - Bit Inversion:    00111001100000101100010001001101
          - Compressed Key:   00111110001110101101011000011000   [done by compression P-Box]
          - XOR with Key:     00000111101110000001001001010101

          - FUNCTION OUTPUT:  00000111101110000001001001010101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011111001011000101010001110100

       - FUNCTION OUTPUT:          00000111101110000001001001010101

       - Left XOR FUNCTION OUTPUT: 01011000100101000100011000100001

       - Next Round Left 32 Bits:  10011111111110001110110101000111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011000100101000100011000100001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011111111110001110110101000111

       - Right 32 Bits:            01011000100101000100011000100001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010101000100010001010101001101001011011001010111100101   [Subkey: 2]
          - Input Half:       01011000100101000100011000100001
          - S-Box Result:     10010010001101110111000011101010   [per every group of 4-bits]
          - Split Into Two:   1001001000110111 [L] 0111000011101010 [R]
          - Swap Halves:      01110000111010101001001000110111
          - Bit Inversion:    10001111000101010110110111001000
          - Compressed Key:   00111000001010000101101001111100   [done by compression P-Box]
          - XOR with Key:     10110111001111010011011110110100

          - FUNCTION OUTPUT:  10110111001111010011011110110100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011111111110001110110101000111

       - FUNCTION OUTPUT:          10110111001111010011011110110100

       - Left XOR FUNCTION OUTPUT: 00101000110001011101101011110011

       - Next Round Left 32 Bits:  01011000100101000100011000100001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101000110001011101101011110011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011000100101000100011000100001

       - Right 32 Bits:            00101000110001011101101011110011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101011101110111010101011001011010010011010100001101   [Subkey: 1]
          - Input Half:       00101000110001011101101011110011
          - S-Box Result:     11100010010110010110010010110001   [per every group of 4-bits]
          - Split Into Two:   1110001001011001 [L] 0110010010110001 [R]
          - Swap Halves:      01100100101100011110001001011001
          - Bit Inversion:    10011011010011100001110110100110
          - Compressed Key:   00111101101111000111100000111101   [done by compression P-Box]
          - XOR with Key:     10100110111100100110010110011011

          - FUNCTION OUTPUT:  10100110111100100110010110011011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011000100101000100011000100001

       - FUNCTION OUTPUT:          10100110111100100110010110011011

       - Left XOR FUNCTION OUTPUT: 11111110011001100010001110111010

       - Next Round Left 32 Bits:  00101000110001011101101011110011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111110011001100010001110111010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 1111111001100110001000111011101000101000110001011101101011110011

 > Decrypted Block:     1111111001100110001000111011101000101000110001011101101011110011


!!!CBC: Previous Ciphertext:                             0110110011010110111001011110011011110111011000100000011111011110

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    1001001010110000110001100101110011011111101001111101110100101101

 > Final Processed Block:                                1001001010110000110001100101110011011111101001111101110100101101



Ciphertext Block 4:                                      1000101101111100101111011010010110110111100011010011110101111010

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001011011111001011110110100101

       - Right 32 Bits:            10110111100011010011110101111010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000101010100110100101101100101011110010110010101000100   [Subkey: 16]
          - Input Half:       10110111100011010011110101111010
          - S-Box Result:     10001101001001100001011011010100   [per every group of 4-bits]
          - Split Into Two:   1000110100100110 [L] 0001011011010100 [R]
          - Swap Halves:      00010110110101001000110100100110
          - Bit Inversion:    11101001001010110111001011011001
          - Compressed Key:   00101000010110100111110000111000   [done by compression P-Box]
          - XOR with Key:     11000001011100010000111011100001

          - FUNCTION OUTPUT:  11000001011100010000111011100001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001011011111001011110110100101

       - FUNCTION OUTPUT:          11000001011100010000111011100001

       - Left XOR FUNCTION OUTPUT: 01001010000011011011001101000100

       - Next Round Left 32 Bits:  10110111100011010011110101111010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001010000011011011001101000100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10110111100011010011110101111010

       - Right 32 Bits:            01001010000011011011001101000100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011101010101100101101001001101010000110100110101011101   [Subkey: 15]
          - Input Half:       01001010000011011011001101000100
          - S-Box Result:     01110100111101101000000101110111   [per every group of 4-bits]
          - Split Into Two:   0111010011110110 [L] 1000000101110111 [R]
          - Swap Halves:      10000001011101110111010011110110
          - Bit Inversion:    01111110100010001000101100001001
          - Compressed Key:   10111100011110000011110100111101   [done by compression P-Box]
          - XOR with Key:     11000010111100001011011000110100

          - FUNCTION OUTPUT:  11000010111100001011011000110100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10110111100011010011110101111010

       - FUNCTION OUTPUT:          11000010111100001011011000110100

       - Left XOR FUNCTION OUTPUT: 01110101011111011000101101001110

       - Next Round Left 32 Bits:  01001010000011011011001101000100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110101011111011000101101001110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001010000011011011001101000100

       - Right 32 Bits:            01110101011111011000101101001110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010001010101001101001011011001010111100101100101010001   [Subkey: 14]
          - Input Half:       01110101011111011000101101001110
          - S-Box Result:     11011001110101100010100001111100   [per every group of 4-bits]
          - Split Into Two:   1101100111010110 [L] 0010100001111100 [R]
          - Swap Halves:      00101000011111001101100111010110
          - Bit Inversion:    11010111100000110010011000101001
          - Compressed Key:   00011100001111010011010100100100   [done by compression P-Box]
          - XOR with Key:     11001011101111100001001100001101

          - FUNCTION OUTPUT:  11001011101111100001001100001101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001010000011011011001101000100

       - FUNCTION OUTPUT:          11001011101111100001001100001101

       - Left XOR FUNCTION OUTPUT: 10000001101100111010000001001001

       - Next Round Left 32 Bits:  01110101011111011000101101001110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10000001101100111010000001001001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110101011111011000101101001110

       - Right 32 Bits:            10000001101100111010000001001001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110111010101011001011010010011010100001101001101010111   [Subkey: 13]
          - Input Half:       10000001101100111010000001001001
          - S-Box Result:     00101010100000010100111101110011   [per every group of 4-bits]
          - Split Into Two:   0010101010000001 [L] 0100111101110011 [R]
          - Swap Halves:      01001111011100110010101010000001
          - Bit Inversion:    10110000100011001101010101111110
          - Compressed Key:   01111100001001010011011010101110   [done by compression P-Box]
          - XOR with Key:     11001100101010011110001111010000

          - FUNCTION OUTPUT:  11001100101010011110001111010000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110101011111011000101101001110

       - FUNCTION OUTPUT:          11001100101010011110001111010000

       - Left XOR FUNCTION OUTPUT: 10111001110101000110100010011110

       - Next Round Left 32 Bits:  10000001101100111010000001001001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10111001110101000110100010011110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10000001101100111010000001001001

       - Right 32 Bits:            10111001110101000110100010011110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000100010101010011010010110110010101111001011001010100   [Subkey: 12]
          - Input Half:       10111001110101000110100010011110
          - S-Box Result:     10000011011001110000001000111100   [per every group of 4-bits]
          - Split Into Two:   1000001101100111 [L] 0000001000111100 [R]
          - Swap Halves:      00000010001111001000001101100111
          - Bit Inversion:    11111101110000110111110010011000
          - Compressed Key:   00101100101001110010101110011000   [done by compression P-Box]
          - XOR with Key:     11010001011001000101011100000000

          - FUNCTION OUTPUT:  11010001011001000101011100000000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10000001101100111010000001001001

       - FUNCTION OUTPUT:          11010001011001000101011100000000

       - Left XOR FUNCTION OUTPUT: 01010000110101111111011101001001

       - Next Round Left 32 Bits:  10111001110101000110100010011110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01010000110101111111011101001001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10111001110101000110100010011110

       - Right 32 Bits:            01010000110101111111011101001001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011101110101010110010110100100110101000011010011010101   [Subkey: 11]
          - Input Half:       01010000110101111111011101001001
          - S-Box Result:     10011111011011011011110101110011   [per every group of 4-bits]
          - Split Into Two:   1001111101101101 [L] 1011110101110011 [R]
          - Swap Halves:      10111101011100111001111101101101
          - Bit Inversion:    01000010100011000110000010010010
          - Compressed Key:   10111100100100111010000001011100   [done by compression P-Box]
          - XOR with Key:     11111110000111111100000011001110

          - FUNCTION OUTPUT:  11111110000111111100000011001110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10111001110101000110100010011110

       - FUNCTION OUTPUT:          11111110000111111100000011001110

       - Left XOR FUNCTION OUTPUT: 01000111110010111010100001010000

       - Next Round Left 32 Bits:  01010000110101111111011101001001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000111110010111010100001010000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01010000110101111111011101001001

       - Right 32 Bits:            01000111110010111010100001010000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010001000101010100110100101101100101011110010110010101   [Subkey: 10]
          - Input Half:       01000111110010111010100001010000
          - S-Box Result:     01111101010110000100001010011111   [per every group of 4-bits]
          - Split Into Two:   0111110101011000 [L] 0100001010011111 [R]
          - Swap Halves:      01000010100111110111110101011000
          - Bit Inversion:    10111101011000001000001010100111
          - Compressed Key:   00011100010100101001111001111100   [done by compression P-Box]
          - XOR with Key:     10100001001100100001110011011011

          - FUNCTION OUTPUT:  10100001001100100001110011011011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01010000110101111111011101001001

       - FUNCTION OUTPUT:          10100001001100100001110011011011

       - Left XOR FUNCTION OUTPUT: 11110001111001011110101110010010

       - Next Round Left 32 Bits:  01000111110010111010100001010000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110001111001011110101110010010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01000111110010111010100001010000

       - Right 32 Bits:            11110001111001011110101110010010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110111011101010101100101101001001101010000110100110101   [Subkey: 9]
          - Input Half:       11110001111001011110101110010010
          - S-Box Result:     10111010110010011100100000111110   [per every group of 4-bits]
          - Split Into Two:   1011101011001001 [L] 1100100000111110 [R]
          - Swap Halves:      11001000001111101011101011001001
          - Bit Inversion:    00110111110000010100010100110110
          - Compressed Key:   01111101011110100101100000111100   [done by compression P-Box]
          - XOR with Key:     01001010101110110001110100001010

          - FUNCTION OUTPUT:  01001010101110110001110100001010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01000111110010111010100001010000

       - FUNCTION OUTPUT:          01001010101110110001110100001010

       - Left XOR FUNCTION OUTPUT: 00001101011100001011010101011010

       - Next Round Left 32 Bits:  11110001111001011110101110010010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001101011100001011010101011010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110001111001011110101110010010

       - Right 32 Bits:            00001101011100001011010101011010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000100010001010101001101001011011001010111100101100101   [Subkey: 8]
          - Input Half:       00001101011100001011010101011010
          - S-Box Result:     11110110110111111000100110010100   [per every group of 4-bits]
          - Split Into Two:   1111011011011111 [L] 1000100110010100 [R]
          - Swap Halves:      10001001100101001111011011011111
          - Bit Inversion:    01110110011010110000100100100000
          - Compressed Key:   00100100001110000111110000101100   [done by compression P-Box]
          - XOR with Key:     01010010010100110111010100001100

          - FUNCTION OUTPUT:  01010010010100110111010100001100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110001111001011110101110010010

       - FUNCTION OUTPUT:          01010010010100110111010100001100

       - Left XOR FUNCTION OUTPUT: 10100011101101101001111010011110

       - Next Round Left 32 Bits:  00001101011100001011010101011010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10100011101101101001111010011110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001101011100001011010101011010

       - Right 32 Bits:            10100011101101101001111010011110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011101110111010101011001011010010011010100001101001101   [Subkey: 7]
          - Input Half:       10100011101101101001111010011110
          - S-Box Result:     01000001100000000011110000111100   [per every group of 4-bits]
          - Split Into Two:   0100000110000000 [L] 0011110000111100 [R]
          - Swap Halves:      00111100001111000100000110000000
          - Bit Inversion:    11000011110000111011111001111111
          - Compressed Key:   10111110001111000010110010101101   [done by compression P-Box]
          - XOR with Key:     01111101111111111001001011010010

          - FUNCTION OUTPUT:  01111101111111111001001011010010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001101011100001011010101011010

       - FUNCTION OUTPUT:          01111101111111111001001011010010

       - Left XOR FUNCTION OUTPUT: 01110000100011110010011110001000

       - Next Round Left 32 Bits:  10100011101101101001111010011110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110000100011110010011110001000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10100011101101101001111010011110

       - Right 32 Bits:            01110000100011110010011110001000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010001000100010101010011010010110110010101111001011001   [Subkey: 6]
          - Input Half:       01110000100011110010011110001000
          - S-Box Result:     11011111001010111110110100100010   [per every group of 4-bits]
          - Split Into Two:   1101111100101011 [L] 1110110100100010 [R]
          - Swap Halves:      11101101001000101101111100101011
          - Bit Inversion:    00010010110111010010000011010100
          - Compressed Key:   00011000001111011010110010010101   [done by compression P-Box]
          - XOR with Key:     00001010111000001000110001000001

          - FUNCTION OUTPUT:  00001010111000001000110001000001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10100011101101101001111010011110

       - FUNCTION OUTPUT:          00001010111000001000110001000001

       - Left XOR FUNCTION OUTPUT: 10101001010101100001001011011111

       - Next Round Left 32 Bits:  01110000100011110010011110001000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10101001010101100001001011011111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110000100011110010011110001000

       - Right 32 Bits:            10101001010101100001001011011111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010111011101110101010110010110100100110101000011010011   [Subkey: 5]
          - Input Half:       10101001010101100001001011011111
          - S-Box Result:     01000011100100001010111001101011   [per every group of 4-bits]
          - Split Into Two:   0100001110010000 [L] 1010111001101011 [R]
          - Swap Halves:      10101110011010110100001110010000
          - Bit Inversion:    01010001100101001011110001101111
          - Compressed Key:   01111101001101011000110101000110   [done by compression P-Box]
          - XOR with Key:     00101100101000010011000100101001

          - FUNCTION OUTPUT:  00101100101000010011000100101001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110000100011110010011110001000

       - FUNCTION OUTPUT:          00101100101000010011000100101001

       - Left XOR FUNCTION OUTPUT: 01011100001011100001011010100001

       - Next Round Left 32 Bits:  10101001010101100001001011011111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011100001011100001011010100001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10101001010101100001001011011111

       - Right 32 Bits:            01011100001011100001011010100001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010100010001000101010100110100101101100101011110010110   [Subkey: 4]
          - Input Half:       01011100001011100001011010100001
          - S-Box Result:     10010101111011001010000001001010   [per every group of 4-bits]
          - Split Into Two:   1001010111101100 [L] 1010000001001010 [R]
          - Swap Halves:      10100000010010101001010111101100
          - Bit Inversion:    01011111101101010110101000010011
          - Compressed Key:   00110100001101101100010111111010   [done by compression P-Box]
          - XOR with Key:     01101011100000111010111111101001

          - FUNCTION OUTPUT:  01101011100000111010111111101001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10101001010101100001001011011111

       - FUNCTION OUTPUT:          01101011100000111010111111101001

       - Left XOR FUNCTION OUTPUT: 11000010110101011011110100110110

       - Next Round Left 32 Bits:  01011100001011100001011010100001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000010110101011011110100110110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011100001011100001011010100001

       - Right 32 Bits:            11000010110101011011110100110110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010101110111011101010101100101101001001101010000110100   [Subkey: 3]
          - Input Half:       11000010110101011011110100110110
          - S-Box Result:     01011110011010011000011000010000   [per every group of 4-bits]
          - Split Into Two:   0101111001101001 [L] 1000011000010000 [R]
          - Swap Halves:      10000110000100000101111001101001
          - Bit Inversion:    01111001111011111010000110010110
          - Compressed Key:   00111110001110101101011000011000   [done by compression P-Box]
          - XOR with Key:     01000111110101010111011110001110

          - FUNCTION OUTPUT:  01000111110101010111011110001110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011100001011100001011010100001

       - FUNCTION OUTPUT:          01000111110101010111011110001110

       - Left XOR FUNCTION OUTPUT: 00011011111110110110000100101111

       - Next Round Left 32 Bits:  11000010110101011011110100110110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011011111110110110000100101111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000010110101011011110100110110

       - Right 32 Bits:            00011011111110110110000100101111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010101000100010001010101001101001011011001010111100101   [Subkey: 2]
          - Input Half:       00011011111110110110000100101111
          - S-Box Result:     10101000101110000000101011101011   [per every group of 4-bits]
          - Split Into Two:   1010100010111000 [L] 0000101011101011 [R]
          - Swap Halves:      00001010111010111010100010111000
          - Bit Inversion:    11110101000101000101011101000111
          - Compressed Key:   00111000001010000101101001111100   [done by compression P-Box]
          - XOR with Key:     11001101001111000000110100111011

          - FUNCTION OUTPUT:  11001101001111000000110100111011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000010110101011011110100110110

       - FUNCTION OUTPUT:          11001101001111000000110100111011

       - Left XOR FUNCTION OUTPUT: 00001111111010011011000000001101

       - Next Round Left 32 Bits:  00011011111110110110000100101111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001111111010011011000000001101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00011011111110110110000100101111

       - Right 32 Bits:            00001111111010011011000000001101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101011101110111010101011001011010010011010100001101   [Subkey: 1]
          - Input Half:       00001111111010011011000000001101
          - S-Box Result:     11111011110000111000111111110110   [per every group of 4-bits]
          - Split Into Two:   1111101111000011 [L] 1000111111110110 [R]
          - Swap Halves:      10001111111101101111101111000011
          - Bit Inversion:    01110000000010010000010000111100
          - Compressed Key:   00111101101111000111100000111101   [done by compression P-Box]
          - XOR with Key:     01001101101101010111110000000001

          - FUNCTION OUTPUT:  01001101101101010111110000000001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00011011111110110110000100101111

       - FUNCTION OUTPUT:          01001101101101010111110000000001

       - Left XOR FUNCTION OUTPUT: 01010110010011100001110100101110

       - Next Round Left 32 Bits:  00001111111010011011000000001101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01010110010011100001110100101110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0101011001001110000111010010111000001111111010011011000000001101

 > Decrypted Block:     0101011001001110000111010010111000001111111010011011000000001101


!!!CBC: Previous Ciphertext:                             0010100011000000010100110101111001110000111000010011001000101111

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    0111111010001110010011100111000001111111000010001000001000100010

 > Final Processed Block:                                0111111010001110010011100111000001111111000010001000001000100010


FINAL PROCESSED DATA BLOCKS: 1011000010110111100010011110010000000010011100111011011010111111,0011001010111001010100011111111100101101111001100111101010011000,1001001010110000110001100101110011011111101001111101110100101101,0111111010001110010011100111000001111111000010001000001000100010,

BLOCKS IN ASCII:             °·?äs¶¿2¹Qÿ-æz??°Æ\ß§Ý-~?Np?"

=========================================================================================================================
STAGE 2: DES [ENCRYPT] ==================================================================================================
=========================================================================================================================

56-bit key: meTripl
In Binary:  01101101011001010101010001110010011010010111000001101100

Subkeys:    Key i = Key (i - 1) [Shifted left by 1 and inverted]

Subkey 1  : 00100101001101010101011100011011001011010001111100100111
Subkey 2  : 10110101100101010101000111001001101001011100000110110001
Subkey 3  : 10010100110101010101110001101100101101000111110010011100
Subkey 4  : 11010110010101010100011100100110100101110000011011000110
Subkey 5  : 01010011010101010111000110110010110100011111001001110010
Subkey 6  : 01011001010101010001110010011010010111000001101100011011
Subkey 7  : 01001101010101011100011011001011010001111100100111001001
Subkey 8  : 01100101010101000111001001101001011100000110110001101101
Subkey 9  : 00110101010101110001101100101101000111110010011100100101
Subkey 10 : 10010101010100011100100110100101110000011011000110110101
Subkey 11 : 11010101010111000110110010110100011111001001110010010100
Subkey 12 : 01010101010001110010011010010111000001101100011011010110
Subkey 13 : 01010101011100011011001011010001111100100111001001010011
Subkey 14 : 01010101000111001001101001011100000110110001101101011001
Subkey 15 : 01010101110001101100101101000111110010011100100101001101
Subkey 16 : 01010100011100100110100101110000011011000110110101100101

S-BOX (4x4):
INPUT | OUTPUT
------|-------
0000  | 1111
0001  | 1010
0010  | 1110
0011  | 0001
0100  | 0111
0101  | 1001
0110  | 0000
0111  | 1101
1000  | 0010
1001  | 0011
1010  | 0100
1011  | 1000
1100  | 0101
1101  | 0110
1110  | 1100
1111  | 1011

P-BOX (7 bits compressed to 4 bits)
Bit at Position X goes to Position Y
X: | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
Y: | 2 | 3 | 4 | 2 | 1 | 3 | 4 |


Data to encrypt         : °·?äs¶¿2¹Qÿ-æz??°Æ\ß§Ý-~?Np?"

Data padded with spaces : °·?äs¶¿2¹Qÿ-æz??°Æ\ß§Ý-~?Np?"[Padded with '0' spaces]

Data in ASCII           : 176,183,137,228,2,115,182,191,50,185,81,255,45,230,122,152,146,176,198,92,223,167,221,45,126,142,78,112,127,8,130,34,

Data in Binary          : 10110000,10110111,10001001,11100100,00000010,01110011,10110110,10111111,00110010,10111001,01010001,11111111,00101101,11100110,01111010,10011000,10010010,10110000,11000110,01011100,11011111,10100111,11011101,00101101,01111110,10001110,01001110,01110000,01111111,00001000,10000010,00100010,

Data in 64-bit Blocks   : 1011000010110111100010011110010000000010011100111011011010111111,0011001010111001010100011111111100101101111001100111101010011000,1001001010110000110001100101110011011111101001111101110100101101,0111111010001110010011100111000001111111000010001000001000100010,



<<<<<< PROCESSING IN 'CBC' MODE >>>>>>


!!!CBC: Initial Previous Ciphertext = IV:               (0000000000000000000000000011000100110010001100110011010000110101)

Plaintext Block: 1:                                      1011000010110111100010011110010000000010011100111011011010111111

!!!CBC: Previous Ciphertext:                             0000000000000000000000000011000100110010001100110011010000110101

!!!CBC: Current Block XOR with Previous Ciphertext:      1011000010110111100010011101010100110000010000001000001010001010

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10110000101101111000100111010101

       - Right 32 Bits:            00110000010000001000001010001010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100101001101010101011100011011001011010001111100100111   [Subkey: 1]
          - Input Half:       00110000010000001000001010001010
          - S-Box Result:     00011111011111110010111000100100   [per every group of 4-bits]
          - Split Into Two:   0001111101111111 [L] 0010111000100100 [R]
          - Swap Halves:      00101110001001000001111101111111
          - Bit Inversion:    11010001110110111110000010000000
          - Compressed Key:   00101101001101000101100010111110   [done by compression P-Box]
          - XOR with Key:     11111100111011111011100000111110

          - FUNCTION OUTPUT:  11111100111011111011100000111110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10110000101101111000100111010101

       - FUNCTION OUTPUT:          11111100111011111011100000111110

       - Left XOR FUNCTION OUTPUT: 01001100010110000011000111101011

       - Next Round Left 32 Bits:  00110000010000001000001010001010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001100010110000011000111101011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00110000010000001000001010001010

       - Right 32 Bits:            01001100010110000011000111101011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10110101100101010101000111001001101001011100000110110001   [Subkey: 2]
          - Input Half:       01001100010110000011000111101011
          - S-Box Result:     01110101100100100001101011001000   [per every group of 4-bits]
          - Split Into Two:   0111010110010010 [L] 0001101011001000 [R]
          - Swap Halves:      00011010110010000111010110010010
          - Bit Inversion:    11100101001101111000101001101101
          - Compressed Key:   00111100001110011101111001100100   [done by compression P-Box]
          - XOR with Key:     11011001000011100101010000001001

          - FUNCTION OUTPUT:  11011001000011100101010000001001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00110000010000001000001010001010

       - FUNCTION OUTPUT:          11011001000011100101010000001001

       - Left XOR FUNCTION OUTPUT: 11101001010011101101011010000011

       - Next Round Left 32 Bits:  01001100010110000011000111101011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101001010011101101011010000011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001100010110000011000111101011

       - Right 32 Bits:            11101001010011101101011010000011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100110101010101110001101100101101000111110010011100   [Subkey: 3]
          - Input Half:       11101001010011101101011010000011
          - S-Box Result:     11000011011111000110000000100001   [per every group of 4-bits]
          - Split Into Two:   1100001101111100 [L] 0110000000100001 [R]
          - Swap Halves:      01100000001000011100001101111100
          - Bit Inversion:    10011111110111100011110010000011
          - Compressed Key:   00111100011110101100010001011001   [done by compression P-Box]
          - XOR with Key:     10100011101001001111100011011010

          - FUNCTION OUTPUT:  10100011101001001111100011011010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001100010110000011000111101011

       - FUNCTION OUTPUT:          10100011101001001111100011011010

       - Left XOR FUNCTION OUTPUT: 11101111111111001100100100110001

       - Next Round Left 32 Bits:  11101001010011101101011010000011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101111111111001100100100110001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101001010011101101011010000011

       - Right 32 Bits:            11101111111111001100100100110001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010110010101010100011100100110100101110000011011000110   [Subkey: 4]
          - Input Half:       11101111111111001100100100110001
          - S-Box Result:     11001011101101010101001100011010   [per every group of 4-bits]
          - Split Into Two:   1100101110110101 [L] 0101001100011010 [R]
          - Swap Halves:      01010011000110101100101110110101
          - Bit Inversion:    10101100111001010011010001001010
          - Compressed Key:   01111100000100101000100111011010   [done by compression P-Box]
          - XOR with Key:     11010000111101111011110110010000

          - FUNCTION OUTPUT:  11010000111101111011110110010000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101001010011101101011010000011

       - FUNCTION OUTPUT:          11010000111101111011110110010000

       - Left XOR FUNCTION OUTPUT: 00111001101110010110101100010011

       - Next Round Left 32 Bits:  11101111111111001100100100110001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111001101110010110101100010011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101111111111001100100100110001

       - Right 32 Bits:            00111001101110010110101100010011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010011010101010111000110110010110100011111001001110010   [Subkey: 5]
          - Input Half:       00111001101110010110101100010011
          - S-Box Result:     00010011100000110000100010100001   [per every group of 4-bits]
          - Split Into Two:   0001001110000011 [L] 0000100010100001 [R]
          - Swap Halves:      00001000101000010001001110000011
          - Bit Inversion:    11110111010111101110110001111100
          - Compressed Key:   01011100101101111010111010000010   [done by compression P-Box]
          - XOR with Key:     10101011111010010100001011111110

          - FUNCTION OUTPUT:  10101011111010010100001011111110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101111111111001100100100110001

       - FUNCTION OUTPUT:          10101011111010010100001011111110

       - Left XOR FUNCTION OUTPUT: 01000100000101011000101111001111

       - Next Round Left 32 Bits:  00111001101110010110101100010011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000100000101011000101111001111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111001101110010110101100010011

       - Right 32 Bits:            01000100000101011000101111001111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011001010101010001110010011010010111000001101100011011   [Subkey: 6]
          - Input Half:       01000100000101011000101111001111
          - S-Box Result:     01110111101010010010100001011011   [per every group of 4-bits]
          - Split Into Two:   0111011110101001 [L] 0010100001011011 [R]
          - Swap Halves:      00101000010110110111011110101001
          - Bit Inversion:    11010111101001001000100001010110
          - Compressed Key:   10011100011001010010000010100111   [done by compression P-Box]
          - XOR with Key:     01001011110000011010100011110001

          - FUNCTION OUTPUT:  01001011110000011010100011110001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111001101110010110101100010011

       - FUNCTION OUTPUT:          01001011110000011010100011110001

       - Left XOR FUNCTION OUTPUT: 01110010011110001100001111100010

       - Next Round Left 32 Bits:  01000100000101011000101111001111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110010011110001100001111100010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01000100000101011000101111001111

       - Right 32 Bits:            01110010011110001100001111100010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001101010101011100011011001011010001111100100111001001   [Subkey: 7]
          - Input Half:       01110010011110001100001111100010
          - S-Box Result:     11011110110100100101000111001110   [per every group of 4-bits]
          - Split Into Two:   1101111011010010 [L] 0101000111001110 [R]
          - Swap Halves:      01010001110011101101111011010010
          - Bit Inversion:    10101110001100010010000100101101
          - Compressed Key:   10101100000110010011111101100101   [done by compression P-Box]
          - XOR with Key:     00000010001010000001111001001000

          - FUNCTION OUTPUT:  00000010001010000001111001001000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01000100000101011000101111001111

       - FUNCTION OUTPUT:          00000010001010000001111001001000

       - Left XOR FUNCTION OUTPUT: 01000110001111011001010110000111

       - Next Round Left 32 Bits:  01110010011110001100001111100010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000110001111011001010110000111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110010011110001100001111100010

       - Right 32 Bits:            01000110001111011001010110000111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100101010101000111001001101001011100000110110001101101   [Subkey: 8]
          - Input Half:       01000110001111011001010110000111
          - S-Box Result:     01110000000101100011100100101101   [per every group of 4-bits]
          - Split Into Two:   0111000000010110 [L] 0011100100101101 [R]
          - Swap Halves:      00111001001011010111000000010110
          - Bit Inversion:    11000110110100101000111111101001
          - Compressed Key:   00101100101110100111010000011101   [done by compression P-Box]
          - XOR with Key:     11101010011010001111101111110100

          - FUNCTION OUTPUT:  11101010011010001111101111110100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110010011110001100001111100010

       - FUNCTION OUTPUT:          11101010011010001111101111110100

       - Left XOR FUNCTION OUTPUT: 10011000000100000011100000010110

       - Next Round Left 32 Bits:  01000110001111011001010110000111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011000000100000011100000010110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01000110001111011001010110000111

       - Right 32 Bits:            10011000000100000011100000010110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101010101110001101100101101000111110010011100100101   [Subkey: 9]
          - Input Half:       10011000000100000011100000010110
          - S-Box Result:     00110010101011110001001010100000   [per every group of 4-bits]
          - Split Into Two:   0011001010101111 [L] 0001001010100000 [R]
          - Swap Halves:      00010010101000000011001010101111
          - Bit Inversion:    11101101010111111100110101010000
          - Compressed Key:   00111100011000100001100110111100   [done by compression P-Box]
          - XOR with Key:     11010001001111011101010011101100

          - FUNCTION OUTPUT:  11010001001111011101010011101100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01000110001111011001010110000111

       - FUNCTION OUTPUT:          11010001001111011101010011101100

       - Left XOR FUNCTION OUTPUT: 10010111000000000100000101101011

       - Next Round Left 32 Bits:  10011000000100000011100000010110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010111000000000100000101101011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011000000100000011100000010110

       - Right 32 Bits:            10010111000000000100000101101011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010101010100011100100110100101110000011011000110110101   [Subkey: 10]
          - Input Half:       10010111000000000100000101101011
          - S-Box Result:     00111101111111110111101000001000   [per every group of 4-bits]
          - Split Into Two:   0011110111111111 [L] 0111101000001000 [R]
          - Swap Halves:      01111010000010000011110111111111
          - Bit Inversion:    10000101111101111100001000000000
          - Compressed Key:   00111000010100111011101001101100   [done by compression P-Box]
          - XOR with Key:     10111101101001000111100001101100

          - FUNCTION OUTPUT:  10111101101001000111100001101100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011000000100000011100000010110

       - FUNCTION OUTPUT:          10111101101001000111100001101100

       - Left XOR FUNCTION OUTPUT: 00100101101101000100000001111010

       - Next Round Left 32 Bits:  10010111000000000100000101101011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00100101101101000100000001111010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010111000000000100000101101011

       - Right 32 Bits:            00100101101101000100000001111010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010101010111000110110010110100011111001001110010010100   [Subkey: 11]
          - Input Half:       00100101101101000100000001111010
          - S-Box Result:     11101001100001110111111111010100   [per every group of 4-bits]
          - Split Into Two:   1110100110000111 [L] 0111111111010100 [R]
          - Swap Halves:      01111111110101001110100110000111
          - Bit Inversion:    10000000001010110001011001111000
          - Compressed Key:   00111110110101110110001001011000   [done by compression P-Box]
          - XOR with Key:     10111110111111000111010000100000

          - FUNCTION OUTPUT:  10111110111111000111010000100000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010111000000000100000101101011

       - FUNCTION OUTPUT:          10111110111111000111010000100000

       - Left XOR FUNCTION OUTPUT: 00101001111111000011010101001011

       - Next Round Left 32 Bits:  00100101101101000100000001111010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101001111111000011010101001011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00100101101101000100000001111010

       - Right 32 Bits:            00101001111111000011010101001011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101010001110010011010010111000001101100011011010110   [Subkey: 12]
          - Input Half:       00101001111111000011010101001011
          - S-Box Result:     11100011101101010001100101111000   [per every group of 4-bits]
          - Split Into Two:   1110001110110101 [L] 0001100101111000 [R]
          - Swap Halves:      00011001011110001110001110110101
          - Bit Inversion:    11100110100001110001110001001010
          - Compressed Key:   00110100100001010001011111011010   [done by compression P-Box]
          - XOR with Key:     11010010000000100000101110010000

          - FUNCTION OUTPUT:  11010010000000100000101110010000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00100101101101000100000001111010

       - FUNCTION OUTPUT:          11010010000000100000101110010000

       - Left XOR FUNCTION OUTPUT: 11110111101101100100101111101010

       - Next Round Left 32 Bits:  00101001111111000011010101001011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110111101101100100101111101010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101001111111000011010101001011

       - Right 32 Bits:            11110111101101100100101111101010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101011100011011001011010001111100100111001001010011   [Subkey: 13]
          - Input Half:       11110111101101100100101111101010
          - S-Box Result:     10111101100000000111100011000100   [per every group of 4-bits]
          - Split Into Two:   1011110110000000 [L] 0111100011000100 [R]
          - Swap Halves:      01111000110001001011110110000000
          - Bit Inversion:    10000111001110110100001001111111
          - Compressed Key:   00111001101011011111010110000110   [done by compression P-Box]
          - XOR with Key:     10111110100101101011011111111001

          - FUNCTION OUTPUT:  10111110100101101011011111111001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101001111111000011010101001011

       - FUNCTION OUTPUT:          10111110100101101011011111111001

       - Left XOR FUNCTION OUTPUT: 10010111011010101000001010110010

       - Next Round Left 32 Bits:  11110111101101100100101111101010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010111011010101000001010110010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110111101101100100101111101010

       - Right 32 Bits:            10010111011010101000001010110010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101000111001001101001011100000110110001101101011001   [Subkey: 14]
          - Input Half:       10010111011010101000001010110010
          - S-Box Result:     00111101000001000010111010001110   [per every group of 4-bits]
          - Split Into Two:   0011110100000100 [L] 0010111010001110 [R]
          - Swap Halves:      00101110100011100011110100000100
          - Bit Inversion:    11010001011100011100001011111011
          - Compressed Key:   00111110011011000000100110100101   [done by compression P-Box]
          - XOR with Key:     11101111000111011100101101011110

          - FUNCTION OUTPUT:  11101111000111011100101101011110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110111101101100100101111101010

       - FUNCTION OUTPUT:          11101111000111011100101101011110

       - Left XOR FUNCTION OUTPUT: 00011000101010111000000010110100

       - Next Round Left 32 Bits:  10010111011010101000001010110010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011000101010111000000010110100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010111011010101000001010110010

       - Right 32 Bits:            00011000101010111000000010110100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101110001101100101101000111110010011100100101001101   [Subkey: 15]
          - Input Half:       00011000101010111000000010110100
          - S-Box Result:     10100010010010000010111110000111   [per every group of 4-bits]
          - Split Into Two:   1010001001001000 [L] 0010111110000111 [R]
          - Swap Halves:      00101111100001111010001001001000
          - Bit Inversion:    11010000011110000101110110110111
          - Compressed Key:   00110100010110001011111000101101   [done by compression P-Box]
          - XOR with Key:     11100100001000001110001110011010

          - FUNCTION OUTPUT:  11100100001000001110001110011010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010111011010101000001010110010

       - FUNCTION OUTPUT:          11100100001000001110001110011010

       - Left XOR FUNCTION OUTPUT: 01110011010010100110000100101000

       - Next Round Left 32 Bits:  00011000101010111000000010110100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110011010010100110000100101000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00011000101010111000000010110100

       - Right 32 Bits:            01110011010010100110000100101000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010100011100100110100101110000011011000110110101100101   [Subkey: 16]
          - Input Half:       01110011010010100110000100101000
          - S-Box Result:     11010001011101000000101011100010   [per every group of 4-bits]
          - Split Into Two:   1101000101110100 [L] 0000101011100010 [R]
          - Swap Halves:      00001010111000101101000101110100
          - Bit Inversion:    11110101000111010010111010001011
          - Compressed Key:   00111001110111100110010000111100   [done by compression P-Box]
          - XOR with Key:     11001100110000110100101010110111

          - FUNCTION OUTPUT:  11001100110000110100101010110111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00011000101010111000000010110100

       - FUNCTION OUTPUT:          11001100110000110100101010110111

       - Left XOR FUNCTION OUTPUT: 11010100011010001100101000000011

       - Next Round Left 32 Bits:  01110011010010100110000100101000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010100011010001100101000000011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 1101010001101000110010100000001101110011010010100110000100101000

 > Processed Block:     1101010001101000110010100000001101110011010010100110000100101000



Plaintext Block: 2:                                      0011001010111001010100011111111100101101111001100111101010011000

!!!CBC: Previous Ciphertext:                             1101010001101000110010100000001101110011010010100110000100101000

!!!CBC: Current Block XOR with Previous Ciphertext:      1110011011010001100110111111110001011110101011000001101110110000

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100110110100011001101111111100

       - Right 32 Bits:            01011110101011000001101110110000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100101001101010101011100011011001011010001111100100111   [Subkey: 1]
          - Input Half:       01011110101011000001101110110000
          - S-Box Result:     10011100010001011010100010001111   [per every group of 4-bits]
          - Split Into Two:   1001110001000101 [L] 1010100010001111 [R]
          - Swap Halves:      10101000100011111001110001000101
          - Bit Inversion:    01010111011100000110001110111010
          - Compressed Key:   00101101001101000101100010111110   [done by compression P-Box]
          - XOR with Key:     01111010010001000011101100000100

          - FUNCTION OUTPUT:  01111010010001000011101100000100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100110110100011001101111111100

       - FUNCTION OUTPUT:          01111010010001000011101100000100

       - Left XOR FUNCTION OUTPUT: 10011100100101011010000011111000

       - Next Round Left 32 Bits:  01011110101011000001101110110000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011100100101011010000011111000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011110101011000001101110110000

       - Right 32 Bits:            10011100100101011010000011111000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10110101100101010101000111001001101001011100000110110001   [Subkey: 2]
          - Input Half:       10011100100101011010000011111000
          - S-Box Result:     00110101001110010100111110110010   [per every group of 4-bits]
          - Split Into Two:   0011010100111001 [L] 0100111110110010 [R]
          - Swap Halves:      01001111101100100011010100111001
          - Bit Inversion:    10110000010011011100101011000110
          - Compressed Key:   00111100001110011101111001100100   [done by compression P-Box]
          - XOR with Key:     10001100011101000001010010100010

          - FUNCTION OUTPUT:  10001100011101000001010010100010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011110101011000001101110110000

       - FUNCTION OUTPUT:          10001100011101000001010010100010

       - Left XOR FUNCTION OUTPUT: 11010010110110000000111100010010

       - Next Round Left 32 Bits:  10011100100101011010000011111000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010010110110000000111100010010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011100100101011010000011111000

       - Right 32 Bits:            11010010110110000000111100010010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100110101010101110001101100101101000111110010011100   [Subkey: 3]
          - Input Half:       11010010110110000000111100010010
          - S-Box Result:     01101110011000101111101110101110   [per every group of 4-bits]
          - Split Into Two:   0110111001100010 [L] 1111101110101110 [R]
          - Swap Halves:      11111011101011100110111001100010
          - Bit Inversion:    00000100010100011001000110011101
          - Compressed Key:   00111100011110101100010001011001   [done by compression P-Box]
          - XOR with Key:     00111000001010110101010111000100

          - FUNCTION OUTPUT:  00111000001010110101010111000100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011100100101011010000011111000

       - FUNCTION OUTPUT:          00111000001010110101010111000100

       - Left XOR FUNCTION OUTPUT: 10100100101111101111010100111100

       - Next Round Left 32 Bits:  11010010110110000000111100010010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10100100101111101111010100111100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010010110110000000111100010010

       - Right 32 Bits:            10100100101111101111010100111100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010110010101010100011100100110100101110000011011000110   [Subkey: 4]
          - Input Half:       10100100101111101111010100111100
          - S-Box Result:     01000111100011001011100100010101   [per every group of 4-bits]
          - Split Into Two:   0100011110001100 [L] 1011100100010101 [R]
          - Swap Halves:      10111001000101010100011110001100
          - Bit Inversion:    01000110111010101011100001110011
          - Compressed Key:   01111100000100101000100111011010   [done by compression P-Box]
          - XOR with Key:     00111010111110000011000110101001

          - FUNCTION OUTPUT:  00111010111110000011000110101001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010010110110000000111100010010

       - FUNCTION OUTPUT:          00111010111110000011000110101001

       - Left XOR FUNCTION OUTPUT: 11101000001000000011111010111011

       - Next Round Left 32 Bits:  10100100101111101111010100111100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101000001000000011111010111011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10100100101111101111010100111100

       - Right 32 Bits:            11101000001000000011111010111011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010011010101010111000110110010110100011111001001110010   [Subkey: 5]
          - Input Half:       11101000001000000011111010111011
          - S-Box Result:     11000010111011110001110010001000   [per every group of 4-bits]
          - Split Into Two:   1100001011101111 [L] 0001110010001000 [R]
          - Swap Halves:      00011100100010001100001011101111
          - Bit Inversion:    11100011011101110011110100010000
          - Compressed Key:   01011100101101111010111010000010   [done by compression P-Box]
          - XOR with Key:     10111111110000001001001110010010

          - FUNCTION OUTPUT:  10111111110000001001001110010010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10100100101111101111010100111100

       - FUNCTION OUTPUT:          10111111110000001001001110010010

       - Left XOR FUNCTION OUTPUT: 00011011011111100110011010101110

       - Next Round Left 32 Bits:  11101000001000000011111010111011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011011011111100110011010101110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101000001000000011111010111011

       - Right 32 Bits:            00011011011111100110011010101110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011001010101010001110010011010010111000001101100011011   [Subkey: 6]
          - Input Half:       00011011011111100110011010101110
          - S-Box Result:     10101000110111000000000001001100   [per every group of 4-bits]
          - Split Into Two:   1010100011011100 [L] 0000000001001100 [R]
          - Swap Halves:      00000000010011001010100011011100
          - Bit Inversion:    11111111101100110101011100100011
          - Compressed Key:   10011100011001010010000010100111   [done by compression P-Box]
          - XOR with Key:     01100011110101100111011110000100

          - FUNCTION OUTPUT:  01100011110101100111011110000100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101000001000000011111010111011

       - FUNCTION OUTPUT:          01100011110101100111011110000100

       - Left XOR FUNCTION OUTPUT: 10001011111101100100100100111111

       - Next Round Left 32 Bits:  00011011011111100110011010101110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001011111101100100100100111111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00011011011111100110011010101110

       - Right 32 Bits:            10001011111101100100100100111111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001101010101011100011011001011010001111100100111001001   [Subkey: 7]
          - Input Half:       10001011111101100100100100111111
          - S-Box Result:     00101000101100000111001100011011   [per every group of 4-bits]
          - Split Into Two:   0010100010110000 [L] 0111001100011011 [R]
          - Swap Halves:      01110011000110110010100010110000
          - Bit Inversion:    10001100111001001101011101001111
          - Compressed Key:   10101100000110010011111101100101   [done by compression P-Box]
          - XOR with Key:     00100000111111011110100000101010

          - FUNCTION OUTPUT:  00100000111111011110100000101010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00011011011111100110011010101110

       - FUNCTION OUTPUT:          00100000111111011110100000101010

       - Left XOR FUNCTION OUTPUT: 00111011100000111000111010000100

       - Next Round Left 32 Bits:  10001011111101100100100100111111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111011100000111000111010000100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001011111101100100100100111111

       - Right 32 Bits:            00111011100000111000111010000100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100101010101000111001001101001011100000110110001101101   [Subkey: 8]
          - Input Half:       00111011100000111000111010000100
          - S-Box Result:     00011000001000010010110000100111   [per every group of 4-bits]
          - Split Into Two:   0001100000100001 [L] 0010110000100111 [R]
          - Swap Halves:      00101100001001110001100000100001
          - Bit Inversion:    11010011110110001110011111011110
          - Compressed Key:   00101100101110100111010000011101   [done by compression P-Box]
          - XOR with Key:     11111111011000101001001111000011

          - FUNCTION OUTPUT:  11111111011000101001001111000011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001011111101100100100100111111

       - FUNCTION OUTPUT:          11111111011000101001001111000011

       - Left XOR FUNCTION OUTPUT: 01110100100101001101101011111100

       - Next Round Left 32 Bits:  00111011100000111000111010000100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110100100101001101101011111100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111011100000111000111010000100

       - Right 32 Bits:            01110100100101001101101011111100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101010101110001101100101101000111110010011100100101   [Subkey: 9]
          - Input Half:       01110100100101001101101011111100
          - S-Box Result:     11010111001101110110010010110101   [per every group of 4-bits]
          - Split Into Two:   1101011100110111 [L] 0110010010110101 [R]
          - Swap Halves:      01100100101101011101011100110111
          - Bit Inversion:    10011011010010100010100011001000
          - Compressed Key:   00111100011000100001100110111100   [done by compression P-Box]
          - XOR with Key:     10100111001010000011000101110100

          - FUNCTION OUTPUT:  10100111001010000011000101110100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111011100000111000111010000100

       - FUNCTION OUTPUT:          10100111001010000011000101110100

       - Left XOR FUNCTION OUTPUT: 10011100101010111011111111110000

       - Next Round Left 32 Bits:  01110100100101001101101011111100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011100101010111011111111110000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110100100101001101101011111100

       - Right 32 Bits:            10011100101010111011111111110000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010101010100011100100110100101110000011011000110110101   [Subkey: 10]
          - Input Half:       10011100101010111011111111110000
          - S-Box Result:     00110101010010001000101110111111   [per every group of 4-bits]
          - Split Into Two:   0011010101001000 [L] 1000101110111111 [R]
          - Swap Halves:      10001011101111110011010101001000
          - Bit Inversion:    01110100010000001100101010110111
          - Compressed Key:   00111000010100111011101001101100   [done by compression P-Box]
          - XOR with Key:     01001100000100110111000011011011

          - FUNCTION OUTPUT:  01001100000100110111000011011011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110100100101001101101011111100

       - FUNCTION OUTPUT:          01001100000100110111000011011011

       - Left XOR FUNCTION OUTPUT: 00111000100001111010101000100111

       - Next Round Left 32 Bits:  10011100101010111011111111110000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111000100001111010101000100111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011100101010111011111111110000

       - Right 32 Bits:            00111000100001111010101000100111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010101010111000110110010110100011111001001110010010100   [Subkey: 11]
          - Input Half:       00111000100001111010101000100111
          - S-Box Result:     00010010001011010100010011101101   [per every group of 4-bits]
          - Split Into Two:   0001001000101101 [L] 0100010011101101 [R]
          - Swap Halves:      01000100111011010001001000101101
          - Bit Inversion:    10111011000100101110110111010010
          - Compressed Key:   00111110110101110110001001011000   [done by compression P-Box]
          - XOR with Key:     10000101110001011000111110001010

          - FUNCTION OUTPUT:  10000101110001011000111110001010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011100101010111011111111110000

       - FUNCTION OUTPUT:          10000101110001011000111110001010

       - Left XOR FUNCTION OUTPUT: 00011001011011100011000001111010

       - Next Round Left 32 Bits:  00111000100001111010101000100111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011001011011100011000001111010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111000100001111010101000100111

       - Right 32 Bits:            00011001011011100011000001111010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101010001110010011010010111000001101100011011010110   [Subkey: 12]
          - Input Half:       00011001011011100011000001111010
          - S-Box Result:     10100011000011000001111111010100   [per every group of 4-bits]
          - Split Into Two:   1010001100001100 [L] 0001111111010100 [R]
          - Swap Halves:      00011111110101001010001100001100
          - Bit Inversion:    11100000001010110101110011110011
          - Compressed Key:   00110100100001010001011111011010   [done by compression P-Box]
          - XOR with Key:     11010100101011100100101100101001

          - FUNCTION OUTPUT:  11010100101011100100101100101001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111000100001111010101000100111

       - FUNCTION OUTPUT:          11010100101011100100101100101001

       - Left XOR FUNCTION OUTPUT: 11101100001010011110000100001110

       - Next Round Left 32 Bits:  00011001011011100011000001111010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101100001010011110000100001110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00011001011011100011000001111010

       - Right 32 Bits:            11101100001010011110000100001110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101011100011011001011010001111100100111001001010011   [Subkey: 13]
          - Input Half:       11101100001010011110000100001110
          - S-Box Result:     11000101111000111100101011111100   [per every group of 4-bits]
          - Split Into Two:   1100010111100011 [L] 1100101011111100 [R]
          - Swap Halves:      11001010111111001100010111100011
          - Bit Inversion:    00110101000000110011101000011100
          - Compressed Key:   00111001101011011111010110000110   [done by compression P-Box]
          - XOR with Key:     00001100101011101100111110011010

          - FUNCTION OUTPUT:  00001100101011101100111110011010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00011001011011100011000001111010

       - FUNCTION OUTPUT:          00001100101011101100111110011010

       - Left XOR FUNCTION OUTPUT: 00010101110000001111111111100000

       - Next Round Left 32 Bits:  11101100001010011110000100001110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00010101110000001111111111100000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101100001010011110000100001110

       - Right 32 Bits:            00010101110000001111111111100000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101000111001001101001011100000110110001101101011001   [Subkey: 14]
          - Input Half:       00010101110000001111111111100000
          - S-Box Result:     10101001010111111011101111001111   [per every group of 4-bits]
          - Split Into Two:   1010100101011111 [L] 1011101111001111 [R]
          - Swap Halves:      10111011110011111010100101011111
          - Bit Inversion:    01000100001100000101011010100000
          - Compressed Key:   00111110011011000000100110100101   [done by compression P-Box]
          - XOR with Key:     01111010010111000101111100000101

          - FUNCTION OUTPUT:  01111010010111000101111100000101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101100001010011110000100001110

       - FUNCTION OUTPUT:          01111010010111000101111100000101

       - Left XOR FUNCTION OUTPUT: 10010110011101011011111000001011

       - Next Round Left 32 Bits:  00010101110000001111111111100000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010110011101011011111000001011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00010101110000001111111111100000

       - Right 32 Bits:            10010110011101011011111000001011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101110001101100101101000111110010011100100101001101   [Subkey: 15]
          - Input Half:       10010110011101011011111000001011
          - S-Box Result:     00110000110110011000110011111000   [per every group of 4-bits]
          - Split Into Two:   0011000011011001 [L] 1000110011111000 [R]
          - Swap Halves:      10001100111110000011000011011001
          - Bit Inversion:    01110011000001111100111100100110
          - Compressed Key:   00110100010110001011111000101101   [done by compression P-Box]
          - XOR with Key:     01000111010111110111000100001011

          - FUNCTION OUTPUT:  01000111010111110111000100001011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00010101110000001111111111100000

       - FUNCTION OUTPUT:          01000111010111110111000100001011

       - Left XOR FUNCTION OUTPUT: 01010010100111111000111011101011

       - Next Round Left 32 Bits:  10010110011101011011111000001011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01010010100111111000111011101011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010110011101011011111000001011

       - Right 32 Bits:            01010010100111111000111011101011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010100011100100110100101110000011011000110110101100101   [Subkey: 16]
          - Input Half:       01010010100111111000111011101011
          - S-Box Result:     10011110001110110010110011001000   [per every group of 4-bits]
          - Split Into Two:   1001111000111011 [L] 0010110011001000 [R]
          - Swap Halves:      00101100110010001001111000111011
          - Bit Inversion:    11010011001101110110000111000100
          - Compressed Key:   00111001110111100110010000111100   [done by compression P-Box]
          - XOR with Key:     11101010111010010000010111111000

          - FUNCTION OUTPUT:  11101010111010010000010111111000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010110011101011011111000001011

       - FUNCTION OUTPUT:          11101010111010010000010111111000

       - Left XOR FUNCTION OUTPUT: 01111100100111001011101111110011

       - Next Round Left 32 Bits:  01010010100111111000111011101011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01111100100111001011101111110011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0111110010011100101110111111001101010010100111111000111011101011

 > Processed Block:     0111110010011100101110111111001101010010100111111000111011101011



Plaintext Block: 3:                                      1001001010110000110001100101110011011111101001111101110100101101

!!!CBC: Previous Ciphertext:                             0111110010011100101110111111001101010010100111111000111011101011

!!!CBC: Current Block XOR with Previous Ciphertext:      1110111000101100011111011010111110001101001110000101001111000110

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101110001011000111110110101111

       - Right 32 Bits:            10001101001110000101001111000110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100101001101010101011100011011001011010001111100100111   [Subkey: 1]
          - Input Half:       10001101001110000101001111000110
          - S-Box Result:     00100110000100101001000101010000   [per every group of 4-bits]
          - Split Into Two:   0010011000010010 [L] 1001000101010000 [R]
          - Swap Halves:      10010001010100000010011000010010
          - Bit Inversion:    01101110101011111101100111101101
          - Compressed Key:   00101101001101000101100010111110   [done by compression P-Box]
          - XOR with Key:     01000011100110111000000101010011

          - FUNCTION OUTPUT:  01000011100110111000000101010011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101110001011000111110110101111

       - FUNCTION OUTPUT:          01000011100110111000000101010011

       - Left XOR FUNCTION OUTPUT: 10101101101101111111110011111100

       - Next Round Left 32 Bits:  10001101001110000101001111000110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10101101101101111111110011111100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001101001110000101001111000110

       - Right 32 Bits:            10101101101101111111110011111100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10110101100101010101000111001001101001011100000110110001   [Subkey: 2]
          - Input Half:       10101101101101111111110011111100
          - S-Box Result:     01000110100011011011010110110101   [per every group of 4-bits]
          - Split Into Two:   0100011010001101 [L] 1011010110110101 [R]
          - Swap Halves:      10110101101101010100011010001101
          - Bit Inversion:    01001010010010101011100101110010
          - Compressed Key:   00111100001110011101111001100100   [done by compression P-Box]
          - XOR with Key:     01110110011100110110011100010110

          - FUNCTION OUTPUT:  01110110011100110110011100010110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001101001110000101001111000110

       - FUNCTION OUTPUT:          01110110011100110110011100010110

       - Left XOR FUNCTION OUTPUT: 11111011010010110011010011010000

       - Next Round Left 32 Bits:  10101101101101111111110011111100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111011010010110011010011010000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10101101101101111111110011111100

       - Right 32 Bits:            11111011010010110011010011010000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100110101010101110001101100101101000111110010011100   [Subkey: 3]
          - Input Half:       11111011010010110011010011010000
          - S-Box Result:     10111000011110000001011101101111   [per every group of 4-bits]
          - Split Into Two:   1011100001111000 [L] 0001011101101111 [R]
          - Swap Halves:      00010111011011111011100001111000
          - Bit Inversion:    11101000100100000100011110000111
          - Compressed Key:   00111100011110101100010001011001   [done by compression P-Box]
          - XOR with Key:     11010100111010101000001111011110

          - FUNCTION OUTPUT:  11010100111010101000001111011110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10101101101101111111110011111100

       - FUNCTION OUTPUT:          11010100111010101000001111011110

       - Left XOR FUNCTION OUTPUT: 01111001010111010111111100100010

       - Next Round Left 32 Bits:  11111011010010110011010011010000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01111001010111010111111100100010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111011010010110011010011010000

       - Right 32 Bits:            01111001010111010111111100100010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010110010101010100011100100110100101110000011011000110   [Subkey: 4]
          - Input Half:       01111001010111010111111100100010
          - S-Box Result:     11010011100101101101101111101110   [per every group of 4-bits]
          - Split Into Two:   1101001110010110 [L] 1101101111101110 [R]
          - Swap Halves:      11011011111011101101001110010110
          - Bit Inversion:    00100100000100010010110001101001
          - Compressed Key:   01111100000100101000100111011010   [done by compression P-Box]
          - XOR with Key:     01011000000000111010010110110011

          - FUNCTION OUTPUT:  01011000000000111010010110110011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111011010010110011010011010000

       - FUNCTION OUTPUT:          01011000000000111010010110110011

       - Left XOR FUNCTION OUTPUT: 10100011010010001001000101100011

       - Next Round Left 32 Bits:  01111001010111010111111100100010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10100011010010001001000101100011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01111001010111010111111100100010

       - Right 32 Bits:            10100011010010001001000101100011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010011010101010111000110110010110100011111001001110010   [Subkey: 5]
          - Input Half:       10100011010010001001000101100011
          - S-Box Result:     01000001011100100011101000000001   [per every group of 4-bits]
          - Split Into Two:   0100000101110010 [L] 0011101000000001 [R]
          - Swap Halves:      00111010000000010100000101110010
          - Bit Inversion:    11000101111111101011111010001101
          - Compressed Key:   01011100101101111010111010000010   [done by compression P-Box]
          - XOR with Key:     10011001010010010001000000001111

          - FUNCTION OUTPUT:  10011001010010010001000000001111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01111001010111010111111100100010

       - FUNCTION OUTPUT:          10011001010010010001000000001111

       - Left XOR FUNCTION OUTPUT: 11100000000101000110111100101101

       - Next Round Left 32 Bits:  10100011010010001001000101100011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100000000101000110111100101101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10100011010010001001000101100011

       - Right 32 Bits:            11100000000101000110111100101101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011001010101010001110010011010010111000001101100011011   [Subkey: 6]
          - Input Half:       11100000000101000110111100101101
          - S-Box Result:     11001111101001110000101111100110   [per every group of 4-bits]
          - Split Into Two:   1100111110100111 [L] 0000101111100110 [R]
          - Swap Halves:      00001011111001101100111110100111
          - Bit Inversion:    11110100000110010011000001011000
          - Compressed Key:   10011100011001010010000010100111   [done by compression P-Box]
          - XOR with Key:     01101000011111000001000011111111

          - FUNCTION OUTPUT:  01101000011111000001000011111111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10100011010010001001000101100011

       - FUNCTION OUTPUT:          01101000011111000001000011111111

       - Left XOR FUNCTION OUTPUT: 11001011001101001000000110011100

       - Next Round Left 32 Bits:  11100000000101000110111100101101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001011001101001000000110011100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100000000101000110111100101101

       - Right 32 Bits:            11001011001101001000000110011100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001101010101011100011011001011010001111100100111001001   [Subkey: 7]
          - Input Half:       11001011001101001000000110011100
          - S-Box Result:     01011000000101110010101000110101   [per every group of 4-bits]
          - Split Into Two:   0101100000010111 [L] 0010101000110101 [R]
          - Swap Halves:      00101010001101010101100000010111
          - Bit Inversion:    11010101110010101010011111101000
          - Compressed Key:   10101100000110010011111101100101   [done by compression P-Box]
          - XOR with Key:     01111001110100111001100010001101

          - FUNCTION OUTPUT:  01111001110100111001100010001101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100000000101000110111100101101

       - FUNCTION OUTPUT:          01111001110100111001100010001101

       - Left XOR FUNCTION OUTPUT: 10011001110001111111011110100000

       - Next Round Left 32 Bits:  11001011001101001000000110011100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011001110001111111011110100000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11001011001101001000000110011100

       - Right 32 Bits:            10011001110001111111011110100000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100101010101000111001001101001011100000110110001101101   [Subkey: 8]
          - Input Half:       10011001110001111111011110100000
          - S-Box Result:     00110011010111011011110101001111   [per every group of 4-bits]
          - Split Into Two:   0011001101011101 [L] 1011110101001111 [R]
          - Swap Halves:      10111101010011110011001101011101
          - Bit Inversion:    01000010101100001100110010100010
          - Compressed Key:   00101100101110100111010000011101   [done by compression P-Box]
          - XOR with Key:     01101110000010101011100010111111

          - FUNCTION OUTPUT:  01101110000010101011100010111111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11001011001101001000000110011100

       - FUNCTION OUTPUT:          01101110000010101011100010111111

       - Left XOR FUNCTION OUTPUT: 10100101001111100011100100100011

       - Next Round Left 32 Bits:  10011001110001111111011110100000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10100101001111100011100100100011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011001110001111111011110100000

       - Right 32 Bits:            10100101001111100011100100100011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101010101110001101100101101000111110010011100100101   [Subkey: 9]
          - Input Half:       10100101001111100011100100100011
          - S-Box Result:     01001001000111000001001111100001   [per every group of 4-bits]
          - Split Into Two:   0100100100011100 [L] 0001001111100001 [R]
          - Swap Halves:      00010011111000010100100100011100
          - Bit Inversion:    11101100000111101011011011100011
          - Compressed Key:   00111100011000100001100110111100   [done by compression P-Box]
          - XOR with Key:     11010000011111001010111101011111

          - FUNCTION OUTPUT:  11010000011111001010111101011111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011001110001111111011110100000

       - FUNCTION OUTPUT:          11010000011111001010111101011111

       - Left XOR FUNCTION OUTPUT: 01001001101110110101100011111111

       - Next Round Left 32 Bits:  10100101001111100011100100100011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001001101110110101100011111111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10100101001111100011100100100011

       - Right 32 Bits:            01001001101110110101100011111111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010101010100011100100110100101110000011011000110110101   [Subkey: 10]
          - Input Half:       01001001101110110101100011111111
          - S-Box Result:     01110011100010001001001010111011   [per every group of 4-bits]
          - Split Into Two:   0111001110001000 [L] 1001001010111011 [R]
          - Swap Halves:      10010010101110110111001110001000
          - Bit Inversion:    01101101010001001000110001110111
          - Compressed Key:   00111000010100111011101001101100   [done by compression P-Box]
          - XOR with Key:     01010101000101110011011000011011

          - FUNCTION OUTPUT:  01010101000101110011011000011011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10100101001111100011100100100011

       - FUNCTION OUTPUT:          01010101000101110011011000011011

       - Left XOR FUNCTION OUTPUT: 11110000001010010000111100111000

       - Next Round Left 32 Bits:  01001001101110110101100011111111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110000001010010000111100111000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001001101110110101100011111111

       - Right 32 Bits:            11110000001010010000111100111000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010101010111000110110010110100011111001001110010010100   [Subkey: 11]
          - Input Half:       11110000001010010000111100111000
          - S-Box Result:     10111111111000111111101100010010   [per every group of 4-bits]
          - Split Into Two:   1011111111100011 [L] 1111101100010010 [R]
          - Swap Halves:      11111011000100101011111111100011
          - Bit Inversion:    00000100111011010100000000011100
          - Compressed Key:   00111110110101110110001001011000   [done by compression P-Box]
          - XOR with Key:     00111010001110100010001001000100

          - FUNCTION OUTPUT:  00111010001110100010001001000100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001001101110110101100011111111

       - FUNCTION OUTPUT:          00111010001110100010001001000100

       - Left XOR FUNCTION OUTPUT: 01110011100000010111101010111011

       - Next Round Left 32 Bits:  11110000001010010000111100111000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110011100000010111101010111011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110000001010010000111100111000

       - Right 32 Bits:            01110011100000010111101010111011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101010001110010011010010111000001101100011011010110   [Subkey: 12]
          - Input Half:       01110011100000010111101010111011
          - S-Box Result:     11010001001010101101010010001000   [per every group of 4-bits]
          - Split Into Two:   1101000100101010 [L] 1101010010001000 [R]
          - Swap Halves:      11010100100010001101000100101010
          - Bit Inversion:    00101011011101110010111011010101
          - Compressed Key:   00110100100001010001011111011010   [done by compression P-Box]
          - XOR with Key:     00011111111100100011100100001111

          - FUNCTION OUTPUT:  00011111111100100011100100001111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110000001010010000111100111000

       - FUNCTION OUTPUT:          00011111111100100011100100001111

       - Left XOR FUNCTION OUTPUT: 11101111110110110011011000110111

       - Next Round Left 32 Bits:  01110011100000010111101010111011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101111110110110011011000110111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110011100000010111101010111011

       - Right 32 Bits:            11101111110110110011011000110111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101011100011011001011010001111100100111001001010011   [Subkey: 13]
          - Input Half:       11101111110110110011011000110111
          - S-Box Result:     11001011011010000001000000011101   [per every group of 4-bits]
          - Split Into Two:   1100101101101000 [L] 0001000000011101 [R]
          - Swap Halves:      00010000000111011100101101101000
          - Bit Inversion:    11101111111000100011010010010111
          - Compressed Key:   00111001101011011111010110000110   [done by compression P-Box]
          - XOR with Key:     11010110010011111100000100010001

          - FUNCTION OUTPUT:  11010110010011111100000100010001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110011100000010111101010111011

       - FUNCTION OUTPUT:          11010110010011111100000100010001

       - Left XOR FUNCTION OUTPUT: 10100101110011101011101110101010

       - Next Round Left 32 Bits:  11101111110110110011011000110111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10100101110011101011101110101010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101111110110110011011000110111

       - Right 32 Bits:            10100101110011101011101110101010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101000111001001101001011100000110110001101101011001   [Subkey: 14]
          - Input Half:       10100101110011101011101110101010
          - S-Box Result:     01001001010111001000100001000100   [per every group of 4-bits]
          - Split Into Two:   0100100101011100 [L] 1000100001000100 [R]
          - Swap Halves:      10001000010001000100100101011100
          - Bit Inversion:    01110111101110111011011010100011
          - Compressed Key:   00111110011011000000100110100101   [done by compression P-Box]
          - XOR with Key:     01001001110101111011111100000110

          - FUNCTION OUTPUT:  01001001110101111011111100000110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101111110110110011011000110111

       - FUNCTION OUTPUT:          01001001110101111011111100000110

       - Left XOR FUNCTION OUTPUT: 10100110000011001000100100110001

       - Next Round Left 32 Bits:  10100101110011101011101110101010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10100110000011001000100100110001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10100101110011101011101110101010

       - Right 32 Bits:            10100110000011001000100100110001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101110001101100101101000111110010011100100101001101   [Subkey: 15]
          - Input Half:       10100110000011001000100100110001
          - S-Box Result:     01000000111101010010001100011010   [per every group of 4-bits]
          - Split Into Two:   0100000011110101 [L] 0010001100011010 [R]
          - Swap Halves:      00100011000110100100000011110101
          - Bit Inversion:    11011100111001011011111100001010
          - Compressed Key:   00110100010110001011111000101101   [done by compression P-Box]
          - XOR with Key:     11101000101111010000000100100111

          - FUNCTION OUTPUT:  11101000101111010000000100100111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10100101110011101011101110101010

       - FUNCTION OUTPUT:          11101000101111010000000100100111

       - Left XOR FUNCTION OUTPUT: 01001101011100111011101010001101

       - Next Round Left 32 Bits:  10100110000011001000100100110001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001101011100111011101010001101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10100110000011001000100100110001

       - Right 32 Bits:            01001101011100111011101010001101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010100011100100110100101110000011011000110110101100101   [Subkey: 16]
          - Input Half:       01001101011100111011101010001101
          - S-Box Result:     01110110110100011000010000100110   [per every group of 4-bits]
          - Split Into Two:   0111011011010001 [L] 1000010000100110 [R]
          - Swap Halves:      10000100001001100111011011010001
          - Bit Inversion:    01111011110110011000100100101110
          - Compressed Key:   00111001110111100110010000111100   [done by compression P-Box]
          - XOR with Key:     01000010000001111110110100010010

          - FUNCTION OUTPUT:  01000010000001111110110100010010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10100110000011001000100100110001

       - FUNCTION OUTPUT:          01000010000001111110110100010010

       - Left XOR FUNCTION OUTPUT: 11100100000010110110010000100011

       - Next Round Left 32 Bits:  01001101011100111011101010001101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100100000010110110010000100011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 1110010000001011011001000010001101001101011100111011101010001101

 > Processed Block:     1110010000001011011001000010001101001101011100111011101010001101



Plaintext Block: 4:                                      0111111010001110010011100111000001111111000010001000001000100010

!!!CBC: Previous Ciphertext:                             1110010000001011011001000010001101001101011100111011101010001101

!!!CBC: Current Block XOR with Previous Ciphertext:      1001101010000101001010100101001100110010011110110011100010101111

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011010100001010010101001010011

       - Right 32 Bits:            00110010011110110011100010101111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100101001101010101011100011011001011010001111100100111   [Subkey: 1]
          - Input Half:       00110010011110110011100010101111
          - S-Box Result:     00011110110110000001001001001011   [per every group of 4-bits]
          - Split Into Two:   0001111011011000 [L] 0001001001001011 [R]
          - Swap Halves:      00010010010010110001111011011000
          - Bit Inversion:    11101101101101001110000100100111
          - Compressed Key:   00101101001101000101100010111110   [done by compression P-Box]
          - XOR with Key:     11000000100000001011100110011001

          - FUNCTION OUTPUT:  11000000100000001011100110011001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011010100001010010101001010011

       - FUNCTION OUTPUT:          11000000100000001011100110011001

       - Left XOR FUNCTION OUTPUT: 01011010000001011001001111001010

       - Next Round Left 32 Bits:  00110010011110110011100010101111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011010000001011001001111001010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00110010011110110011100010101111

       - Right 32 Bits:            01011010000001011001001111001010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10110101100101010101000111001001101001011100000110110001   [Subkey: 2]
          - Input Half:       01011010000001011001001111001010
          - S-Box Result:     10010100111110010011000101010100   [per every group of 4-bits]
          - Split Into Two:   1001010011111001 [L] 0011000101010100 [R]
          - Swap Halves:      00110001010101001001010011111001
          - Bit Inversion:    11001110101010110110101100000110
          - Compressed Key:   00111100001110011101111001100100   [done by compression P-Box]
          - XOR with Key:     11110010100100101011010101100010

          - FUNCTION OUTPUT:  11110010100100101011010101100010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00110010011110110011100010101111

       - FUNCTION OUTPUT:          11110010100100101011010101100010

       - Left XOR FUNCTION OUTPUT: 11000000111010011000110111001101

       - Next Round Left 32 Bits:  01011010000001011001001111001010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000000111010011000110111001101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011010000001011001001111001010

       - Right 32 Bits:            11000000111010011000110111001101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100110101010101110001101100101101000111110010011100   [Subkey: 3]
          - Input Half:       11000000111010011000110111001101
          - S-Box Result:     01011111110000110010011001010110   [per every group of 4-bits]
          - Split Into Two:   0101111111000011 [L] 0010011001010110 [R]
          - Swap Halves:      00100110010101100101111111000011
          - Bit Inversion:    11011001101010011010000000111100
          - Compressed Key:   00111100011110101100010001011001   [done by compression P-Box]
          - XOR with Key:     11100101110100110110010001100101

          - FUNCTION OUTPUT:  11100101110100110110010001100101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011010000001011001001111001010

       - FUNCTION OUTPUT:          11100101110100110110010001100101

       - Left XOR FUNCTION OUTPUT: 10111111110101101111011110101111

       - Next Round Left 32 Bits:  11000000111010011000110111001101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10111111110101101111011110101111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000000111010011000110111001101

       - Right 32 Bits:            10111111110101101111011110101111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010110010101010100011100100110100101110000011011000110   [Subkey: 4]
          - Input Half:       10111111110101101111011110101111
          - S-Box Result:     10001011011000001011110101001011   [per every group of 4-bits]
          - Split Into Two:   1000101101100000 [L] 1011110101001011 [R]
          - Swap Halves:      10111101010010111000101101100000
          - Bit Inversion:    01000010101101000111010010011111
          - Compressed Key:   01111100000100101000100111011010   [done by compression P-Box]
          - XOR with Key:     00111110101001101111110101000101

          - FUNCTION OUTPUT:  00111110101001101111110101000101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000000111010011000110111001101

       - FUNCTION OUTPUT:          00111110101001101111110101000101

       - Left XOR FUNCTION OUTPUT: 11111110010011110111000010001000

       - Next Round Left 32 Bits:  10111111110101101111011110101111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111110010011110111000010001000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10111111110101101111011110101111

       - Right 32 Bits:            11111110010011110111000010001000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010011010101010111000110110010110100011111001001110010   [Subkey: 5]
          - Input Half:       11111110010011110111000010001000
          - S-Box Result:     10111100011110111101111100100010   [per every group of 4-bits]
          - Split Into Two:   1011110001111011 [L] 1101111100100010 [R]
          - Swap Halves:      11011111001000101011110001111011
          - Bit Inversion:    00100000110111010100001110000100
          - Compressed Key:   01011100101101111010111010000010   [done by compression P-Box]
          - XOR with Key:     01111100011010101110110100000110

          - FUNCTION OUTPUT:  01111100011010101110110100000110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10111111110101101111011110101111

       - FUNCTION OUTPUT:          01111100011010101110110100000110

       - Left XOR FUNCTION OUTPUT: 11000011101111000001101010101001

       - Next Round Left 32 Bits:  11111110010011110111000010001000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000011101111000001101010101001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111110010011110111000010001000

       - Right 32 Bits:            11000011101111000001101010101001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011001010101010001110010011010010111000001101100011011   [Subkey: 6]
          - Input Half:       11000011101111000001101010101001
          - S-Box Result:     01010001100001011010010001000011   [per every group of 4-bits]
          - Split Into Two:   0101000110000101 [L] 1010010001000011 [R]
          - Swap Halves:      10100100010000110101000110000101
          - Bit Inversion:    01011011101111001010111001111010
          - Compressed Key:   10011100011001010010000010100111   [done by compression P-Box]
          - XOR with Key:     11000111110110011000111011011101

          - FUNCTION OUTPUT:  11000111110110011000111011011101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111110010011110111000010001000

       - FUNCTION OUTPUT:          11000111110110011000111011011101

       - Left XOR FUNCTION OUTPUT: 00111001100101101111111001010101

       - Next Round Left 32 Bits:  11000011101111000001101010101001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111001100101101111111001010101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000011101111000001101010101001

       - Right 32 Bits:            00111001100101101111111001010101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001101010101011100011011001011010001111100100111001001   [Subkey: 7]
          - Input Half:       00111001100101101111111001010101
          - S-Box Result:     00010011001100001011110010011001   [per every group of 4-bits]
          - Split Into Two:   0001001100110000 [L] 1011110010011001 [R]
          - Swap Halves:      10111100100110010001001100110000
          - Bit Inversion:    01000011011001101110110011001111
          - Compressed Key:   10101100000110010011111101100101   [done by compression P-Box]
          - XOR with Key:     11101111011111111101001110101010

          - FUNCTION OUTPUT:  11101111011111111101001110101010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000011101111000001101010101001

       - FUNCTION OUTPUT:          11101111011111111101001110101010

       - Left XOR FUNCTION OUTPUT: 00101100110000111100100100000011

       - Next Round Left 32 Bits:  00111001100101101111111001010101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101100110000111100100100000011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111001100101101111111001010101

       - Right 32 Bits:            00101100110000111100100100000011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100101010101000111001001101001011100000110110001101101   [Subkey: 8]
          - Input Half:       00101100110000111100100100000011
          - S-Box Result:     11100101010100010101001111110001   [per every group of 4-bits]
          - Split Into Two:   1110010101010001 [L] 0101001111110001 [R]
          - Swap Halves:      01010011111100011110010101010001
          - Bit Inversion:    10101100000011100001101010101110
          - Compressed Key:   00101100101110100111010000011101   [done by compression P-Box]
          - XOR with Key:     10000000101101000110111010110011

          - FUNCTION OUTPUT:  10000000101101000110111010110011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111001100101101111111001010101

       - FUNCTION OUTPUT:          10000000101101000110111010110011

       - Left XOR FUNCTION OUTPUT: 10111001001000101001000011100110

       - Next Round Left 32 Bits:  00101100110000111100100100000011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10111001001000101001000011100110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101100110000111100100100000011

       - Right 32 Bits:            10111001001000101001000011100110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101010101110001101100101101000111110010011100100101   [Subkey: 9]
          - Input Half:       10111001001000101001000011100110
          - S-Box Result:     10000011111011100011111111000000   [per every group of 4-bits]
          - Split Into Two:   1000001111101110 [L] 0011111111000000 [R]
          - Swap Halves:      00111111110000001000001111101110
          - Bit Inversion:    11000000001111110111110000010001
          - Compressed Key:   00111100011000100001100110111100   [done by compression P-Box]
          - XOR with Key:     11111100010111010110010110101101

          - FUNCTION OUTPUT:  11111100010111010110010110101101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101100110000111100100100000011

       - FUNCTION OUTPUT:          11111100010111010110010110101101

       - Left XOR FUNCTION OUTPUT: 11010000100111101010110010101110

       - Next Round Left 32 Bits:  10111001001000101001000011100110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010000100111101010110010101110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10111001001000101001000011100110

       - Right 32 Bits:            11010000100111101010110010101110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010101010100011100100110100101110000011011000110110101   [Subkey: 10]
          - Input Half:       11010000100111101010110010101110
          - S-Box Result:     01101111001111000100010101001100   [per every group of 4-bits]
          - Split Into Two:   0110111100111100 [L] 0100010101001100 [R]
          - Swap Halves:      01000101010011000110111100111100
          - Bit Inversion:    10111010101100111001000011000011
          - Compressed Key:   00111000010100111011101001101100   [done by compression P-Box]
          - XOR with Key:     10000010111000000010101010101111

          - FUNCTION OUTPUT:  10000010111000000010101010101111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10111001001000101001000011100110

       - FUNCTION OUTPUT:          10000010111000000010101010101111

       - Left XOR FUNCTION OUTPUT: 00111011110000101011101001001001

       - Next Round Left 32 Bits:  11010000100111101010110010101110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111011110000101011101001001001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010000100111101010110010101110

       - Right 32 Bits:            00111011110000101011101001001001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010101010111000110110010110100011111001001110010010100   [Subkey: 11]
          - Input Half:       00111011110000101011101001001001
          - S-Box Result:     00011000010111101000010001110011   [per every group of 4-bits]
          - Split Into Two:   0001100001011110 [L] 1000010001110011 [R]
          - Swap Halves:      10000100011100110001100001011110
          - Bit Inversion:    01111011100011001110011110100001
          - Compressed Key:   00111110110101110110001001011000   [done by compression P-Box]
          - XOR with Key:     01000101010110111000010111111001

          - FUNCTION OUTPUT:  01000101010110111000010111111001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010000100111101010110010101110

       - FUNCTION OUTPUT:          01000101010110111000010111111001

       - Left XOR FUNCTION OUTPUT: 10010101110001010010100101010111

       - Next Round Left 32 Bits:  00111011110000101011101001001001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010101110001010010100101010111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111011110000101011101001001001

       - Right 32 Bits:            10010101110001010010100101010111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101010001110010011010010111000001101100011011010110   [Subkey: 12]
          - Input Half:       10010101110001010010100101010111
          - S-Box Result:     00111001010110011110001110011101   [per every group of 4-bits]
          - Split Into Two:   0011100101011001 [L] 1110001110011101 [R]
          - Swap Halves:      11100011100111010011100101011001
          - Bit Inversion:    00011100011000101100011010100110
          - Compressed Key:   00110100100001010001011111011010   [done by compression P-Box]
          - XOR with Key:     00101000111001111101000101111100

          - FUNCTION OUTPUT:  00101000111001111101000101111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111011110000101011101001001001

       - FUNCTION OUTPUT:          00101000111001111101000101111100

       - Left XOR FUNCTION OUTPUT: 00010011001001010110101100110101

       - Next Round Left 32 Bits:  10010101110001010010100101010111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00010011001001010110101100110101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010101110001010010100101010111

       - Right 32 Bits:            00010011001001010110101100110101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101011100011011001011010001111100100111001001010011   [Subkey: 13]
          - Input Half:       00010011001001010110101100110101
          - S-Box Result:     10100001111010010000100000011001   [per every group of 4-bits]
          - Split Into Two:   1010000111101001 [L] 0000100000011001 [R]
          - Swap Halves:      00001000000110011010000111101001
          - Bit Inversion:    11110111111001100101111000010110
          - Compressed Key:   00111001101011011111010110000110   [done by compression P-Box]
          - XOR with Key:     11001110010010111010101110010000

          - FUNCTION OUTPUT:  11001110010010111010101110010000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010101110001010010100101010111

       - FUNCTION OUTPUT:          11001110010010111010101110010000

       - Left XOR FUNCTION OUTPUT: 01011011100011101000001011000111

       - Next Round Left 32 Bits:  00010011001001010110101100110101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011011100011101000001011000111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00010011001001010110101100110101

       - Right 32 Bits:            01011011100011101000001011000111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101000111001001101001011100000110110001101101011001   [Subkey: 14]
          - Input Half:       01011011100011101000001011000111
          - S-Box Result:     10011000001011000010111001011101   [per every group of 4-bits]
          - Split Into Two:   1001100000101100 [L] 0010111001011101 [R]
          - Swap Halves:      00101110010111011001100000101100
          - Bit Inversion:    11010001101000100110011111010011
          - Compressed Key:   00111110011011000000100110100101   [done by compression P-Box]
          - XOR with Key:     11101111110011100110111001110110

          - FUNCTION OUTPUT:  11101111110011100110111001110110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00010011001001010110101100110101

       - FUNCTION OUTPUT:          11101111110011100110111001110110

       - Left XOR FUNCTION OUTPUT: 11111100111010110000010101000011

       - Next Round Left 32 Bits:  01011011100011101000001011000111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111100111010110000010101000011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011011100011101000001011000111

       - Right 32 Bits:            11111100111010110000010101000011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101110001101100101101000111110010011100100101001101   [Subkey: 15]
          - Input Half:       11111100111010110000010101000011
          - S-Box Result:     10110101110010001111100101110001   [per every group of 4-bits]
          - Split Into Two:   1011010111001000 [L] 1111100101110001 [R]
          - Swap Halves:      11111001011100011011010111001000
          - Bit Inversion:    00000110100011100100101000110111
          - Compressed Key:   00110100010110001011111000101101   [done by compression P-Box]
          - XOR with Key:     00110010110101101111010000011010

          - FUNCTION OUTPUT:  00110010110101101111010000011010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011011100011101000001011000111

       - FUNCTION OUTPUT:          00110010110101101111010000011010

       - Left XOR FUNCTION OUTPUT: 01101001010110000111011011011101

       - Next Round Left 32 Bits:  11111100111010110000010101000011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101001010110000111011011011101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111100111010110000010101000011

       - Right 32 Bits:            01101001010110000111011011011101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010100011100100110100101110000011011000110110101100101   [Subkey: 16]
          - Input Half:       01101001010110000111011011011101
          - S-Box Result:     00000011100100101101000001100110   [per every group of 4-bits]
          - Split Into Two:   0000001110010010 [L] 1101000001100110 [R]
          - Swap Halves:      11010000011001100000001110010010
          - Bit Inversion:    00101111100110011111110001101101
          - Compressed Key:   00111001110111100110010000111100   [done by compression P-Box]
          - XOR with Key:     00010110010001111001100001010001

          - FUNCTION OUTPUT:  00010110010001111001100001010001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111100111010110000010101000011

       - FUNCTION OUTPUT:          00010110010001111001100001010001

       - Left XOR FUNCTION OUTPUT: 11101010101011001001110100010010

       - Next Round Left 32 Bits:  01101001010110000111011011011101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101010101011001001110100010010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 1110101010101100100111010001001001101001010110000111011011011101

 > Processed Block:     1110101010101100100111010001001001101001010110000111011011011101


FINAL PROCESSED DATA BLOCKS: 1101010001101000110010100000001101110011010010100110000100101000,0111110010011100101110111111001101010010100111111000111011101011,1110010000001011011001000010001101001101011100111011101010001101,1110101010101100100111010001001001101001010110000111011011011101,

BLOCKS IN ASCII:             ÔhÊsJa(|?»óR??ëäd#Msº?ê¬?iXvÝ

=========================================================================================================================
STAGE 3: DES [DECRYPT] ==================================================================================================
=========================================================================================================================

56-bit key: MyAweso
In Binary:  01001101011110010100000101110111011001010111001101101111

Subkeys:    Key i = Key (i - 1) [Shifted left by 1 and inverted]

Subkey 1  : 01100101000011010111110100010001001101010001100100100001
Subkey 2  : 00110101111001010000010111011101100101011100110110111101
Subkey 3  : 10010100001101011111010001000100110101000110010010000101
Subkey 4  : 11010111100101000001011101110110010101110011011011110100
Subkey 5  : 01010000110101111101000100010011010100011001001000010110
Subkey 6  : 01011110010100000101110111011001010111001101101111010011
Subkey 7  : 01000011010111110100010001001101010001100100100001011001
Subkey 8  : 01111001010000010111011101100101011100110110111101001101
Subkey 9  : 00001101011111010001000100110101000110010010000101100101
Subkey 10 : 11100101000001011101110110010101110011011011110100110101
Subkey 11 : 00110101111101000100010011010100011001001000010110010100
Subkey 12 : 10010100000101110111011001010111001101101111010011010111
Subkey 13 : 11010111110100010001001101010001100100100001011001010000
Subkey 14 : 01010000010111011101100101011100110110111101001101011110
Subkey 15 : 01011111010001000100110101000110010010000101100101000011
Subkey 16 : 01000001011101110110010101110011011011110100110101111001

S-BOX (4x4):
INPUT | OUTPUT
------|-------
0000  | 1111
0001  | 1010
0010  | 1110
0011  | 0001
0100  | 0111
0101  | 1001
0110  | 0000
0111  | 1101
1000  | 0010
1001  | 0011
1010  | 0100
1011  | 1000
1100  | 0101
1101  | 0110
1110  | 1100
1111  | 1011

P-BOX (7 bits compressed to 4 bits)
Bit at Position X goes to Position Y
X: | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
Y: | 2 | 3 | 4 | 2 | 1 | 3 | 4 |


Data to decrypt         : ÔhÊsJa(|?»óR??ëäd#Msº?ê¬?iXvÝ

Data padded with spaces : ÔhÊsJa(|?»óR??ëäd#Msº?ê¬?iXvÝ[Padded with '0' spaces]

Data in ASCII           : 212,104,202,3,115,74,97,40,124,156,187,243,82,159,142,235,228,11,100,35,77,115,186,141,234,172,157,18,105,88,118,221,

Data in Binary          : 11010100,01101000,11001010,00000011,01110011,01001010,01100001,00101000,01111100,10011100,10111011,11110011,01010010,10011111,10001110,11101011,11100100,00001011,01100100,00100011,01001101,01110011,10111010,10001101,11101010,10101100,10011101,00010010,01101001,01011000,01110110,11011101,

Data in 64-bit Blocks   : 1101010001101000110010100000001101110011010010100110000100101000,0111110010011100101110111111001101010010100111111000111011101011,1110010000001011011001000010001101001101011100111011101010001101,1110101010101100100111010001001001101001010110000111011011011101,

!!!!NOTE: Subkeys used in REVERSE order for DECRYPTION



<<<<<< PROCESSING IN 'CBC' MODE >>>>>>


!!!CBC: Initial Previous Ciphertext = IV:               (0000000000000000000000000011000100110010001100110011010000110101)

Ciphertext Block 1:                                      1101010001101000110010100000001101110011010010100110000100101000

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010100011010001100101000000011

       - Right 32 Bits:            01110011010010100110000100101000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000001011101110110010101110011011011110100110101111001   [Subkey: 16]
          - Input Half:       01110011010010100110000100101000
          - S-Box Result:     11010001011101000000101011100010   [per every group of 4-bits]
          - Split Into Two:   1101000101110100 [L] 0000101011100010 [R]
          - Swap Halves:      00001010111000101101000101110100
          - Bit Inversion:    11110101000111010010111010001011
          - Compressed Key:   00001101100111100111110100110101   [done by compression P-Box]
          - XOR with Key:     11111000100000110101001110111110

          - FUNCTION OUTPUT:  11111000100000110101001110111110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010100011010001100101000000011

       - FUNCTION OUTPUT:          11111000100000110101001110111110

       - Left XOR FUNCTION OUTPUT: 00101100111010111001100110111101

       - Next Round Left 32 Bits:  01110011010010100110000100101000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101100111010111001100110111101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110011010010100110000100101000

       - Right 32 Bits:            00101100111010111001100110111101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011111010001000100110101000110010010000101100101000011   [Subkey: 15]
          - Input Half:       00101100111010111001100110111101
          - S-Box Result:     11100101110010000011001110000110   [per every group of 4-bits]
          - Split Into Two:   1110010111001000 [L] 0011001110000110 [R]
          - Swap Halves:      00110011100001101110010111001000
          - Bit Inversion:    11001100011110010001101000110111
          - Compressed Key:   11110100010110000010010000100110   [done by compression P-Box]
          - XOR with Key:     00111000001000010011111000010001

          - FUNCTION OUTPUT:  00111000001000010011111000010001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110011010010100110000100101000

       - FUNCTION OUTPUT:          00111000001000010011111000010001

       - Left XOR FUNCTION OUTPUT: 01001011011010110101111100111001

       - Next Round Left 32 Bits:  00101100111010111001100110111101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001011011010110101111100111001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101100111010111001100110111101

       - Right 32 Bits:            01001011011010110101111100111001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010000010111011101100101011100110110111101001101011110   [Subkey: 14]
          - Input Half:       01001011011010110101111100111001
          - S-Box Result:     01111000000010001001101100010011   [per every group of 4-bits]
          - Split Into Two:   0111100000001000 [L] 1001101100010011 [R]
          - Swap Halves:      10011011000100110111100000001000
          - Bit Inversion:    01100100111011001000011111110111
          - Compressed Key:   00011110011111001010111110101011   [done by compression P-Box]
          - XOR with Key:     01111010100100000010100001011100

          - FUNCTION OUTPUT:  01111010100100000010100001011100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101100111010111001100110111101

       - FUNCTION OUTPUT:          01111010100100000010100001011100

       - Left XOR FUNCTION OUTPUT: 01010110011110111011000111100001

       - Next Round Left 32 Bits:  01001011011010110101111100111001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01010110011110111011000111100001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001011011010110101111100111001

       - Right 32 Bits:            01010110011110111011000111100001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010111110100010001001101010001100100100001011001010000   [Subkey: 13]
          - Input Half:       01010110011110111011000111100001
          - S-Box Result:     10010000110110001000101011001010   [per every group of 4-bits]
          - Split Into Two:   1001000011011000 [L] 1000101011001010 [R]
          - Swap Halves:      10001010110010101001000011011000
          - Bit Inversion:    01110101001101010110111100100111
          - Compressed Key:   01111000001011001001000110010000   [done by compression P-Box]
          - XOR with Key:     00001101000110011111111010110111

          - FUNCTION OUTPUT:  00001101000110011111111010110111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001011011010110101111100111001

       - FUNCTION OUTPUT:          00001101000110011111111010110111

       - Left XOR FUNCTION OUTPUT: 01000110011100101010000110001110

       - Next Round Left 32 Bits:  01010110011110111011000111100001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000110011100101010000110001110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01010110011110111011000111100001

       - Right 32 Bits:            01000110011100101010000110001110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100000101110111011001010111001101101111010011010111   [Subkey: 12]
          - Input Half:       01000110011100101010000110001110
          - S-Box Result:     01110000110111100100101000101100   [per every group of 4-bits]
          - Split Into Two:   0111000011011110 [L] 0100101000101100 [R]
          - Swap Halves:      01001010001011000111000011011110
          - Bit Inversion:    10110101110100111000111100100001
          - Compressed Key:   00111100101111000101011101011110   [done by compression P-Box]
          - XOR with Key:     10001001011011111101100001111111

          - FUNCTION OUTPUT:  10001001011011111101100001111111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01010110011110111011000111100001

       - FUNCTION OUTPUT:          10001001011011111101100001111111

       - Left XOR FUNCTION OUTPUT: 11011111000101000110100110011110

       - Next Round Left 32 Bits:  01000110011100101010000110001110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11011111000101000110100110011110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01000110011100101010000110001110

       - Right 32 Bits:            11011111000101000110100110011110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101111101000100010011010100011001001000010110010100   [Subkey: 11]
          - Input Half:       11011111000101000110100110011110
          - S-Box Result:     01101011101001110000001100111100   [per every group of 4-bits]
          - Split Into Two:   0110101110100111 [L] 0000001100111100 [R]
          - Swap Halves:      00000011001111000110101110100111
          - Bit Inversion:    11111100110000111001010001011000
          - Compressed Key:   00111101000111010110001001111000   [done by compression P-Box]
          - XOR with Key:     11000001110111101111011000100000

          - FUNCTION OUTPUT:  11000001110111101111011000100000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01000110011100101010000110001110

       - FUNCTION OUTPUT:          11000001110111101111011000100000

       - Left XOR FUNCTION OUTPUT: 10000111101011000101011110101110

       - Next Round Left 32 Bits:  11011111000101000110100110011110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10000111101011000101011110101110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11011111000101000110100110011110

       - Right 32 Bits:            10000111101011000101011110101110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11100101000001011101110110010101110011011011110100110101   [Subkey: 10]
          - Input Half:       10000111101011000101011110101110
          - S-Box Result:     00101101010001011001110101001100   [per every group of 4-bits]
          - Split Into Two:   0010110101000101 [L] 1001110101001100 [R]
          - Swap Halves:      10011101010011000010110101000101
          - Bit Inversion:    01100010101100111101001010111010
          - Compressed Key:   00100100011101011011101000111100   [done by compression P-Box]
          - XOR with Key:     01000110110001100110100010000110

          - FUNCTION OUTPUT:  01000110110001100110100010000110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11011111000101000110100110011110

       - FUNCTION OUTPUT:          01000110110001100110100010000110

       - Left XOR FUNCTION OUTPUT: 10011001110100100000000100011000

       - Next Round Left 32 Bits:  10000111101011000101011110101110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011001110100100000000100011000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10000111101011000101011110101110

       - Right 32 Bits:            10011001110100100000000100011000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00001101011111010001000100110101000110010010000101100101   [Subkey: 9]
          - Input Half:       10011001110100100000000100011000
          - S-Box Result:     00110011011011101111101010100010   [per every group of 4-bits]
          - Split Into Two:   0011001101101110 [L] 1111101010100010 [R]
          - Swap Halves:      11111010101000100011001101101110
          - Bit Inversion:    00000101010111011100110010010001
          - Compressed Key:   10101111001001100001100000101100   [done by compression P-Box]
          - XOR with Key:     10101010011110111101010010111101

          - FUNCTION OUTPUT:  10101010011110111101010010111101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10000111101011000101011110101110

       - FUNCTION OUTPUT:          10101010011110111101010010111101

       - Left XOR FUNCTION OUTPUT: 00101101110101111000001100010011

       - Next Round Left 32 Bits:  10011001110100100000000100011000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101101110101111000001100010011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011001110100100000000100011000

       - Right 32 Bits:            00101101110101111000001100010011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111001010000010111011101100101011100110110111101001101   [Subkey: 8]
          - Input Half:       00101101110101111000001100010011
          - S-Box Result:     11100110011011010010000110100001   [per every group of 4-bits]
          - Split Into Two:   1110011001101101 [L] 0010000110100001 [R]
          - Swap Halves:      00100001101000011110011001101101
          - Bit Inversion:    11011110010111100001100110010010
          - Compressed Key:   10010000101110100111110110111101   [done by compression P-Box]
          - XOR with Key:     01001110111001000110010000101111

          - FUNCTION OUTPUT:  01001110111001000110010000101111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011001110100100000000100011000

       - FUNCTION OUTPUT:          01001110111001000110010000101111

       - Left XOR FUNCTION OUTPUT: 11010111001101100110010100110111

       - Next Round Left 32 Bits:  00101101110101111000001100010011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010111001101100110010100110111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101101110101111000001100010011

       - Right 32 Bits:            11010111001101100110010100110111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000011010111110100010001001101010001100100100001011001   [Subkey: 7]
          - Input Half:       11010111001101100110010100110111
          - S-Box Result:     01101101000100000000100100011101   [per every group of 4-bits]
          - Split Into Two:   0110110100010000 [L] 0000100100011101 [R]
          - Swap Halves:      00001001000111010110110100010000
          - Bit Inversion:    11110110111000101001001011101111
          - Compressed Key:   01001110000110000011010100000101   [done by compression P-Box]
          - XOR with Key:     10111000111110101010011111101010

          - FUNCTION OUTPUT:  10111000111110101010011111101010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101101110101111000001100010011

       - FUNCTION OUTPUT:          10111000111110101010011111101010

       - Left XOR FUNCTION OUTPUT: 10010101001011010010010011111001

       - Next Round Left 32 Bits:  11010111001101100110010100110111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010101001011010010010011111001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010111001101100110010100110111

       - Right 32 Bits:            10010101001011010010010011111001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011110010100000101110111011001010111001101101111010011   [Subkey: 6]
          - Input Half:       10010101001011010010010011111001
          - S-Box Result:     00111001111001101110011110110011   [per every group of 4-bits]
          - Split Into Two:   0011100111100110 [L] 1110011110110011 [R]
          - Swap Halves:      11100111101100110011100111100110
          - Bit Inversion:    00011000010011001100011000011001
          - Compressed Key:   11111000011111010011011011100110   [done by compression P-Box]
          - XOR with Key:     11100000001100011111000011111111

          - FUNCTION OUTPUT:  11100000001100011111000011111111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010111001101100110010100110111

       - FUNCTION OUTPUT:          11100000001100011111000011111111

       - Left XOR FUNCTION OUTPUT: 00110111000001111001010111001000

       - Next Round Left 32 Bits:  10010101001011010010010011111001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00110111000001111001010111001000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010101001011010010010011111001

       - Right 32 Bits:            00110111000001111001010111001000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010000110101111101000100010011010100011001001000010110   [Subkey: 5]
          - Input Half:       00110111000001111001010111001000
          - S-Box Result:     00011101111111010011100101010010   [per every group of 4-bits]
          - Split Into Two:   0001110111111101 [L] 0011100101010010 [R]
          - Swap Halves:      00111001010100100001110111111101
          - Bit Inversion:    11000110101011011110001000000010
          - Compressed Key:   00011100001101000011101010001010   [done by compression P-Box]
          - XOR with Key:     11011010100110011101100010001000

          - FUNCTION OUTPUT:  11011010100110011101100010001000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010101001011010010010011111001

       - FUNCTION OUTPUT:          11011010100110011101100010001000

       - Left XOR FUNCTION OUTPUT: 01001111101101001111110001110001

       - Next Round Left 32 Bits:  00110111000001111001010111001000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001111101101001111110001110001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00110111000001111001010111001000

       - Right 32 Bits:            01001111101101001111110001110001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010111100101000001011101110110010101110011011011110100   [Subkey: 4]
          - Input Half:       01001111101101001111110001110001
          - S-Box Result:     01111011100001111011010111011010   [per every group of 4-bits]
          - Split Into Two:   0111101110000111 [L] 1011010111011010 [R]
          - Swap Halves:      10110101110110100111101110000111
          - Bit Inversion:    01001010001001011000010001111000
          - Compressed Key:   01111100001011100010100111011000   [done by compression P-Box]
          - XOR with Key:     00110110000010111010110110100000

          - FUNCTION OUTPUT:  00110110000010111010110110100000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00110111000001111001010111001000

       - FUNCTION OUTPUT:          00110110000010111010110110100000

       - Left XOR FUNCTION OUTPUT: 00000001000011000011100001101000

       - Next Round Left 32 Bits:  01001111101101001111110001110001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00000001000011000011100001101000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001111101101001111110001110001

       - Right 32 Bits:            00000001000011000011100001101000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100001101011111010001000100110101000110010010000101   [Subkey: 3]
          - Input Half:       00000001000011000011100001101000
          - S-Box Result:     11111010111101010001001000000010   [per every group of 4-bits]
          - Split Into Two:   1111101011110101 [L] 0001001000000010 [R]
          - Swap Halves:      00010010000000101111101011110101
          - Bit Inversion:    11101101111111010000010100001010
          - Compressed Key:   00111101101110001010010001011100   [done by compression P-Box]
          - XOR with Key:     11010000010001011010000101010110

          - FUNCTION OUTPUT:  11010000010001011010000101010110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001111101101001111110001110001

       - FUNCTION OUTPUT:          11010000010001011010000101010110

       - Left XOR FUNCTION OUTPUT: 10011111111100010101110100100111

       - Next Round Left 32 Bits:  00000001000011000011100001101000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011111111100010101110100100111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00000001000011000011100001101000

       - Right 32 Bits:            10011111111100010101110100100111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101111001010000010111011101100101011100110110111101   [Subkey: 2]
          - Input Half:       10011111111100010101110100100111
          - S-Box Result:     00111011101110101001011011101101   [per every group of 4-bits]
          - Split Into Two:   0011101110111010 [L] 1001011011101101 [R]
          - Swap Halves:      10010110111011010011101110111010
          - Bit Inversion:    01101001000100101100010001000101
          - Compressed Key:   00110101000011011001111001111101   [done by compression P-Box]
          - XOR with Key:     01011100000111110101101000111000

          - FUNCTION OUTPUT:  01011100000111110101101000111000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00000001000011000011100001101000

       - FUNCTION OUTPUT:          01011100000111110101101000111000

       - Left XOR FUNCTION OUTPUT: 01011101000100110110001001010000

       - Next Round Left 32 Bits:  10011111111100010101110100100111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011101000100110110001001010000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011111111100010101110100100111

       - Right 32 Bits:            01011101000100110110001001010000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100101000011010111110100010001001101010001100100100001   [Subkey: 1]
          - Input Half:       01011101000100110110001001010000
          - S-Box Result:     10010110101000010000111010011111   [per every group of 4-bits]
          - Split Into Two:   1001011010100001 [L] 0000111010011111 [R]
          - Swap Halves:      00001110100111111001011010100001
          - Bit Inversion:    11110001011000000110100101011110
          - Compressed Key:   00100110111101000101100000100100   [done by compression P-Box]
          - XOR with Key:     11010111100101000011000101111010

          - FUNCTION OUTPUT:  11010111100101000011000101111010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011111111100010101110100100111

       - FUNCTION OUTPUT:          11010111100101000011000101111010

       - Left XOR FUNCTION OUTPUT: 01001000011001010110110001011101

       - Next Round Left 32 Bits:  01011101000100110110001001010000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001000011001010110110001011101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0100100001100101011011000101110101011101000100110110001001010000

 > Decrypted Block:     0100100001100101011011000101110101011101000100110110001001010000


!!!CBC: Previous Ciphertext:                             0000000000000000000000000011000100110010001100110011010000110101

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    0100100001100101011011000110110001101111001000000101011001100101

 > Final Processed Block:                                0100100001100101011011000110110001101111001000000101011001100101



Ciphertext Block 2:                                      0111110010011100101110111111001101010010100111111000111011101011

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01111100100111001011101111110011

       - Right 32 Bits:            01010010100111111000111011101011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000001011101110110010101110011011011110100110101111001   [Subkey: 16]
          - Input Half:       01010010100111111000111011101011
          - S-Box Result:     10011110001110110010110011001000   [per every group of 4-bits]
          - Split Into Two:   1001111000111011 [L] 0010110011001000 [R]
          - Swap Halves:      00101100110010001001111000111011
          - Bit Inversion:    11010011001101110110000111000100
          - Compressed Key:   00001101100111100111110100110101   [done by compression P-Box]
          - XOR with Key:     11011110101010010001110011110001

          - FUNCTION OUTPUT:  11011110101010010001110011110001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01111100100111001011101111110011

       - FUNCTION OUTPUT:          11011110101010010001110011110001

       - Left XOR FUNCTION OUTPUT: 10100010001101011010011100000010

       - Next Round Left 32 Bits:  01010010100111111000111011101011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10100010001101011010011100000010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01010010100111111000111011101011

       - Right 32 Bits:            10100010001101011010011100000010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011111010001000100110101000110010010000101100101000011   [Subkey: 15]
          - Input Half:       10100010001101011010011100000010
          - S-Box Result:     01001110000110010100110111111110   [per every group of 4-bits]
          - Split Into Two:   0100111000011001 [L] 0100110111111110 [R]
          - Swap Halves:      01001101111111100100111000011001
          - Bit Inversion:    10110010000000011011000111100110
          - Compressed Key:   11110100010110000010010000100110   [done by compression P-Box]
          - XOR with Key:     01000110010110011001010111000000

          - FUNCTION OUTPUT:  01000110010110011001010111000000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01010010100111111000111011101011

       - FUNCTION OUTPUT:          01000110010110011001010111000000

       - Left XOR FUNCTION OUTPUT: 00010100110001100001101100101011

       - Next Round Left 32 Bits:  10100010001101011010011100000010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00010100110001100001101100101011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10100010001101011010011100000010

       - Right 32 Bits:            00010100110001100001101100101011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010000010111011101100101011100110110111101001101011110   [Subkey: 14]
          - Input Half:       00010100110001100001101100101011
          - S-Box Result:     10100111010100001010100011101000   [per every group of 4-bits]
          - Split Into Two:   1010011101010000 [L] 1010100011101000 [R]
          - Swap Halves:      10101000111010001010011101010000
          - Bit Inversion:    01010111000101110101100010101111
          - Compressed Key:   00011110011111001010111110101011   [done by compression P-Box]
          - XOR with Key:     01001001011010111111011100000100

          - FUNCTION OUTPUT:  01001001011010111111011100000100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10100010001101011010011100000010

       - FUNCTION OUTPUT:          01001001011010111111011100000100

       - Left XOR FUNCTION OUTPUT: 11101011010111100101000000000110

       - Next Round Left 32 Bits:  00010100110001100001101100101011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101011010111100101000000000110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00010100110001100001101100101011

       - Right 32 Bits:            11101011010111100101000000000110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010111110100010001001101010001100100100001011001010000   [Subkey: 13]
          - Input Half:       11101011010111100101000000000110
          - S-Box Result:     11001000100111001001111111110000   [per every group of 4-bits]
          - Split Into Two:   1100100010011100 [L] 1001111111110000 [R]
          - Swap Halves:      10011111111100001100100010011100
          - Bit Inversion:    01100000000011110011011101100011
          - Compressed Key:   01111000001011001001000110010000   [done by compression P-Box]
          - XOR with Key:     00011000001000111010011011110011

          - FUNCTION OUTPUT:  00011000001000111010011011110011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00010100110001100001101100101011

       - FUNCTION OUTPUT:          00011000001000111010011011110011

       - Left XOR FUNCTION OUTPUT: 00001100111001011011110111011000

       - Next Round Left 32 Bits:  11101011010111100101000000000110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001100111001011011110111011000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101011010111100101000000000110

       - Right 32 Bits:            00001100111001011011110111011000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100000101110111011001010111001101101111010011010111   [Subkey: 12]
          - Input Half:       00001100111001011011110111011000
          - S-Box Result:     11110101110010011000011001100010   [per every group of 4-bits]
          - Split Into Two:   1111010111001001 [L] 1000011001100010 [R]
          - Swap Halves:      10000110011000101111010111001001
          - Bit Inversion:    01111001100111010000101000110110
          - Compressed Key:   00111100101111000101011101011110   [done by compression P-Box]
          - XOR with Key:     01000101001000010101110101101000

          - FUNCTION OUTPUT:  01000101001000010101110101101000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101011010111100101000000000110

       - FUNCTION OUTPUT:          01000101001000010101110101101000

       - Left XOR FUNCTION OUTPUT: 10101110011111110000110101101110

       - Next Round Left 32 Bits:  00001100111001011011110111011000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10101110011111110000110101101110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001100111001011011110111011000

       - Right 32 Bits:            10101110011111110000110101101110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101111101000100010011010100011001001000010110010100   [Subkey: 11]
          - Input Half:       10101110011111110000110101101110
          - S-Box Result:     01001100110110111111011000001100   [per every group of 4-bits]
          - Split Into Two:   0100110011011011 [L] 1111011000001100 [R]
          - Swap Halves:      11110110000011000100110011011011
          - Bit Inversion:    00001001111100111011001100100100
          - Compressed Key:   00111101000111010110001001111000   [done by compression P-Box]
          - XOR with Key:     00110100111011101101000101011100

          - FUNCTION OUTPUT:  00110100111011101101000101011100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001100111001011011110111011000

       - FUNCTION OUTPUT:          00110100111011101101000101011100

       - Left XOR FUNCTION OUTPUT: 00111000000010110110110010000100

       - Next Round Left 32 Bits:  10101110011111110000110101101110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111000000010110110110010000100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10101110011111110000110101101110

       - Right 32 Bits:            00111000000010110110110010000100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11100101000001011101110110010101110011011011110100110101   [Subkey: 10]
          - Input Half:       00111000000010110110110010000100
          - S-Box Result:     00010010111110000000010100100111   [per every group of 4-bits]
          - Split Into Two:   0001001011111000 [L] 0000010100100111 [R]
          - Swap Halves:      00000101001001110001001011111000
          - Bit Inversion:    11111010110110001110110100000111
          - Compressed Key:   00100100011101011011101000111100   [done by compression P-Box]
          - XOR with Key:     11011110101011010101011100111011

          - FUNCTION OUTPUT:  11011110101011010101011100111011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10101110011111110000110101101110

       - FUNCTION OUTPUT:          11011110101011010101011100111011

       - Left XOR FUNCTION OUTPUT: 01110000110100100101101001010101

       - Next Round Left 32 Bits:  00111000000010110110110010000100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110000110100100101101001010101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111000000010110110110010000100

       - Right 32 Bits:            01110000110100100101101001010101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00001101011111010001000100110101000110010010000101100101   [Subkey: 9]
          - Input Half:       01110000110100100101101001010101
          - S-Box Result:     11011111011011101001010010011001   [per every group of 4-bits]
          - Split Into Two:   1101111101101110 [L] 1001010010011001 [R]
          - Swap Halves:      10010100100110011101111101101110
          - Bit Inversion:    01101011011001100010000010010001
          - Compressed Key:   10101111001001100001100000101100   [done by compression P-Box]
          - XOR with Key:     11000100010000000011100010111101

          - FUNCTION OUTPUT:  11000100010000000011100010111101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111000000010110110110010000100

       - FUNCTION OUTPUT:          11000100010000000011100010111101

       - Left XOR FUNCTION OUTPUT: 11111100010010110101010000111001

       - Next Round Left 32 Bits:  01110000110100100101101001010101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111100010010110101010000111001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110000110100100101101001010101

       - Right 32 Bits:            11111100010010110101010000111001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111001010000010111011101100101011100110110111101001101   [Subkey: 8]
          - Input Half:       11111100010010110101010000111001
          - S-Box Result:     10110101011110001001011100010011   [per every group of 4-bits]
          - Split Into Two:   1011010101111000 [L] 1001011100010011 [R]
          - Swap Halves:      10010111000100111011010101111000
          - Bit Inversion:    01101000111011000100101010000111
          - Compressed Key:   10010000101110100111110110111101   [done by compression P-Box]
          - XOR with Key:     11111000010101100011011100111010

          - FUNCTION OUTPUT:  11111000010101100011011100111010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110000110100100101101001010101

       - FUNCTION OUTPUT:          11111000010101100011011100111010

       - Left XOR FUNCTION OUTPUT: 10001000100001000110110101101111

       - Next Round Left 32 Bits:  11111100010010110101010000111001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001000100001000110110101101111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111100010010110101010000111001

       - Right 32 Bits:            10001000100001000110110101101111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000011010111110100010001001101010001100100100001011001   [Subkey: 7]
          - Input Half:       10001000100001000110110101101111
          - S-Box Result:     00100010001001110000011000001011   [per every group of 4-bits]
          - Split Into Two:   0010001000100111 [L] 0000011000001011 [R]
          - Swap Halves:      00000110000010110010001000100111
          - Bit Inversion:    11111001111101001101110111011000
          - Compressed Key:   01001110000110000011010100000101   [done by compression P-Box]
          - XOR with Key:     10110111111011001110100011011101

          - FUNCTION OUTPUT:  10110111111011001110100011011101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111100010010110101010000111001

       - FUNCTION OUTPUT:          10110111111011001110100011011101

       - Left XOR FUNCTION OUTPUT: 01001011101001111011110011100100

       - Next Round Left 32 Bits:  10001000100001000110110101101111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001011101001111011110011100100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001000100001000110110101101111

       - Right 32 Bits:            01001011101001111011110011100100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011110010100000101110111011001010111001101101111010011   [Subkey: 6]
          - Input Half:       01001011101001111011110011100100
          - S-Box Result:     01111000010011011000010111000111   [per every group of 4-bits]
          - Split Into Two:   0111100001001101 [L] 1000010111000111 [R]
          - Swap Halves:      10000101110001110111100001001101
          - Bit Inversion:    01111010001110001000011110110010
          - Compressed Key:   11111000011111010011011011100110   [done by compression P-Box]
          - XOR with Key:     10000010010001011011000101010100

          - FUNCTION OUTPUT:  10000010010001011011000101010100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001000100001000110110101101111

       - FUNCTION OUTPUT:          10000010010001011011000101010100

       - Left XOR FUNCTION OUTPUT: 00001010110000011101110000111011

       - Next Round Left 32 Bits:  01001011101001111011110011100100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001010110000011101110000111011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001011101001111011110011100100

       - Right 32 Bits:            00001010110000011101110000111011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010000110101111101000100010011010100011001001000010110   [Subkey: 5]
          - Input Half:       00001010110000011101110000111011
          - S-Box Result:     11110100010110100110010100011000   [per every group of 4-bits]
          - Split Into Two:   1111010001011010 [L] 0110010100011000 [R]
          - Swap Halves:      01100101000110001111010001011010
          - Bit Inversion:    10011010111001110000101110100101
          - Compressed Key:   00011100001101000011101010001010   [done by compression P-Box]
          - XOR with Key:     10000110110100110011000100101111

          - FUNCTION OUTPUT:  10000110110100110011000100101111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001011101001111011110011100100

       - FUNCTION OUTPUT:          10000110110100110011000100101111

       - Left XOR FUNCTION OUTPUT: 11001101011101001000110111001011

       - Next Round Left 32 Bits:  00001010110000011101110000111011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001101011101001000110111001011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001010110000011101110000111011

       - Right 32 Bits:            11001101011101001000110111001011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010111100101000001011101110110010101110011011011110100   [Subkey: 4]
          - Input Half:       11001101011101001000110111001011
          - S-Box Result:     01010110110101110010011001011000   [per every group of 4-bits]
          - Split Into Two:   0101011011010111 [L] 0010011001011000 [R]
          - Swap Halves:      00100110010110000101011011010111
          - Bit Inversion:    11011001101001111010100100101000
          - Compressed Key:   01111100001011100010100111011000   [done by compression P-Box]
          - XOR with Key:     10100101100010011000000011110000

          - FUNCTION OUTPUT:  10100101100010011000000011110000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001010110000011101110000111011

       - FUNCTION OUTPUT:          10100101100010011000000011110000

       - Left XOR FUNCTION OUTPUT: 10101111010010000101110011001011

       - Next Round Left 32 Bits:  11001101011101001000110111001011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10101111010010000101110011001011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11001101011101001000110111001011

       - Right 32 Bits:            10101111010010000101110011001011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100001101011111010001000100110101000110010010000101   [Subkey: 3]
          - Input Half:       10101111010010000101110011001011
          - S-Box Result:     01001011011100101001010101011000   [per every group of 4-bits]
          - Split Into Two:   0100101101110010 [L] 1001010101011000 [R]
          - Swap Halves:      10010101010110000100101101110010
          - Bit Inversion:    01101010101001111011010010001101
          - Compressed Key:   00111101101110001010010001011100   [done by compression P-Box]
          - XOR with Key:     01010111000111110001000011010001

          - FUNCTION OUTPUT:  01010111000111110001000011010001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11001101011101001000110111001011

       - FUNCTION OUTPUT:          01010111000111110001000011010001

       - Left XOR FUNCTION OUTPUT: 10011010011010111001110100011010

       - Next Round Left 32 Bits:  10101111010010000101110011001011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011010011010111001110100011010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10101111010010000101110011001011

       - Right 32 Bits:            10011010011010111001110100011010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101111001010000010111011101100101011100110110111101   [Subkey: 2]
          - Input Half:       10011010011010111001110100011010
          - S-Box Result:     00110100000010000011011010100100   [per every group of 4-bits]
          - Split Into Two:   0011010000001000 [L] 0011011010100100 [R]
          - Swap Halves:      00110110101001000011010000001000
          - Bit Inversion:    11001001010110111100101111110111
          - Compressed Key:   00110101000011011001111001111101   [done by compression P-Box]
          - XOR with Key:     11111100010101100101010110001010

          - FUNCTION OUTPUT:  11111100010101100101010110001010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10101111010010000101110011001011

       - FUNCTION OUTPUT:          11111100010101100101010110001010

       - Left XOR FUNCTION OUTPUT: 01010011000111100000100101000001

       - Next Round Left 32 Bits:  10011010011010111001110100011010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01010011000111100000100101000001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011010011010111001110100011010

       - Right 32 Bits:            01010011000111100000100101000001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100101000011010111110100010001001101010001100100100001   [Subkey: 1]
          - Input Half:       01010011000111100000100101000001
          - S-Box Result:     10010001101011001111001101111010   [per every group of 4-bits]
          - Split Into Two:   1001000110101100 [L] 1111001101111010 [R]
          - Swap Halves:      11110011011110101001000110101100
          - Bit Inversion:    00001100100001010110111001010011
          - Compressed Key:   00100110111101000101100000100100   [done by compression P-Box]
          - XOR with Key:     00101010011100010011011001110111

          - FUNCTION OUTPUT:  00101010011100010011011001110111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011010011010111001110100011010

       - FUNCTION OUTPUT:          00101010011100010011011001110111

       - Left XOR FUNCTION OUTPUT: 10110000000110101010101101101101

       - Next Round Left 32 Bits:  01010011000111100000100101000001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10110000000110101010101101101101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 1011000000011010101010110110110101010011000111100000100101000001

 > Decrypted Block:     1011000000011010101010110110110101010011000111100000100101000001


!!!CBC: Previous Ciphertext:                             1101010001101000110010100000001101110011010010100110000100101000

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    0110010001110010011000010110111000100000010101000110100001101001

 > Final Processed Block:                                0110010001110010011000010110111000100000010101000110100001101001



Ciphertext Block 3:                                      1110010000001011011001000010001101001101011100111011101010001101

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100100000010110110010000100011

       - Right 32 Bits:            01001101011100111011101010001101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000001011101110110010101110011011011110100110101111001   [Subkey: 16]
          - Input Half:       01001101011100111011101010001101
          - S-Box Result:     01110110110100011000010000100110   [per every group of 4-bits]
          - Split Into Two:   0111011011010001 [L] 1000010000100110 [R]
          - Swap Halves:      10000100001001100111011011010001
          - Bit Inversion:    01111011110110011000100100101110
          - Compressed Key:   00001101100111100111110100110101   [done by compression P-Box]
          - XOR with Key:     01110110010001111111010000011011

          - FUNCTION OUTPUT:  01110110010001111111010000011011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100100000010110110010000100011

       - FUNCTION OUTPUT:          01110110010001111111010000011011

       - Left XOR FUNCTION OUTPUT: 10010010010011001001000000111000

       - Next Round Left 32 Bits:  01001101011100111011101010001101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010010010011001001000000111000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001101011100111011101010001101

       - Right 32 Bits:            10010010010011001001000000111000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011111010001000100110101000110010010000101100101000011   [Subkey: 15]
          - Input Half:       10010010010011001001000000111000
          - S-Box Result:     00111110011101010011111100010010   [per every group of 4-bits]
          - Split Into Two:   0011111001110101 [L] 0011111100010010 [R]
          - Swap Halves:      00111111000100100011111001110101
          - Bit Inversion:    11000000111011011100000110001010
          - Compressed Key:   11110100010110000010010000100110   [done by compression P-Box]
          - XOR with Key:     00110100101101011110010110101100

          - FUNCTION OUTPUT:  00110100101101011110010110101100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001101011100111011101010001101

       - FUNCTION OUTPUT:          00110100101101011110010110101100

       - Left XOR FUNCTION OUTPUT: 01111001110001100101111100100001

       - Next Round Left 32 Bits:  10010010010011001001000000111000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01111001110001100101111100100001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010010010011001001000000111000

       - Right 32 Bits:            01111001110001100101111100100001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010000010111011101100101011100110110111101001101011110   [Subkey: 14]
          - Input Half:       01111001110001100101111100100001
          - S-Box Result:     11010011010100001001101111101010   [per every group of 4-bits]
          - Split Into Two:   1101001101010000 [L] 1001101111101010 [R]
          - Swap Halves:      10011011111010101101001101010000
          - Bit Inversion:    01100100000101010010110010101111
          - Compressed Key:   00011110011111001010111110101011   [done by compression P-Box]
          - XOR with Key:     01111010011010011000001100000100

          - FUNCTION OUTPUT:  01111010011010011000001100000100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010010010011001001000000111000

       - FUNCTION OUTPUT:          01111010011010011000001100000100

       - Left XOR FUNCTION OUTPUT: 11101000001001010001001100111100

       - Next Round Left 32 Bits:  01111001110001100101111100100001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101000001001010001001100111100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01111001110001100101111100100001

       - Right 32 Bits:            11101000001001010001001100111100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010111110100010001001101010001100100100001011001010000   [Subkey: 13]
          - Input Half:       11101000001001010001001100111100
          - S-Box Result:     11000010111010011010000100010101   [per every group of 4-bits]
          - Split Into Two:   1100001011101001 [L] 1010000100010101 [R]
          - Swap Halves:      10100001000101011100001011101001
          - Bit Inversion:    01011110111010100011110100010110
          - Compressed Key:   01111000001011001001000110010000   [done by compression P-Box]
          - XOR with Key:     00100110110001101010110010000110

          - FUNCTION OUTPUT:  00100110110001101010110010000110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01111001110001100101111100100001

       - FUNCTION OUTPUT:          00100110110001101010110010000110

       - Left XOR FUNCTION OUTPUT: 01011111000000001111001110100111

       - Next Round Left 32 Bits:  11101000001001010001001100111100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011111000000001111001110100111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101000001001010001001100111100

       - Right 32 Bits:            01011111000000001111001110100111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100000101110111011001010111001101101111010011010111   [Subkey: 12]
          - Input Half:       01011111000000001111001110100111
          - S-Box Result:     10011011111111111011000101001101   [per every group of 4-bits]
          - Split Into Two:   1001101111111111 [L] 1011000101001101 [R]
          - Swap Halves:      10110001010011011001101111111111
          - Bit Inversion:    01001110101100100110010000000000
          - Compressed Key:   00111100101111000101011101011110   [done by compression P-Box]
          - XOR with Key:     01110010000011100011001101011110

          - FUNCTION OUTPUT:  01110010000011100011001101011110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101000001001010001001100111100

       - FUNCTION OUTPUT:          01110010000011100011001101011110

       - Left XOR FUNCTION OUTPUT: 10011010001010110010000001100010

       - Next Round Left 32 Bits:  01011111000000001111001110100111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011010001010110010000001100010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011111000000001111001110100111

       - Right 32 Bits:            10011010001010110010000001100010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101111101000100010011010100011001001000010110010100   [Subkey: 11]
          - Input Half:       10011010001010110010000001100010
          - S-Box Result:     00110100111010001110111100001110   [per every group of 4-bits]
          - Split Into Two:   0011010011101000 [L] 1110111100001110 [R]
          - Swap Halves:      11101111000011100011010011101000
          - Bit Inversion:    00010000111100011100101100010111
          - Compressed Key:   00111101000111010110001001111000   [done by compression P-Box]
          - XOR with Key:     00101101111011001010100101101111

          - FUNCTION OUTPUT:  00101101111011001010100101101111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011111000000001111001110100111

       - FUNCTION OUTPUT:          00101101111011001010100101101111

       - Left XOR FUNCTION OUTPUT: 01110010111011000101101011001000

       - Next Round Left 32 Bits:  10011010001010110010000001100010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110010111011000101101011001000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011010001010110010000001100010

       - Right 32 Bits:            01110010111011000101101011001000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11100101000001011101110110010101110011011011110100110101   [Subkey: 10]
          - Input Half:       01110010111011000101101011001000
          - S-Box Result:     11011110110001011001010001010010   [per every group of 4-bits]
          - Split Into Two:   1101111011000101 [L] 1001010001010010 [R]
          - Swap Halves:      10010100010100101101111011000101
          - Bit Inversion:    01101011101011010010000100111010
          - Compressed Key:   00100100011101011011101000111100   [done by compression P-Box]
          - XOR with Key:     01001111110110001001101100000110

          - FUNCTION OUTPUT:  01001111110110001001101100000110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011010001010110010000001100010

       - FUNCTION OUTPUT:          01001111110110001001101100000110

       - Left XOR FUNCTION OUTPUT: 11010101111100111011101101100100

       - Next Round Left 32 Bits:  01110010111011000101101011001000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010101111100111011101101100100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110010111011000101101011001000

       - Right 32 Bits:            11010101111100111011101101100100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00001101011111010001000100110101000110010010000101100101   [Subkey: 9]
          - Input Half:       11010101111100111011101101100100
          - S-Box Result:     01101001101100011000100000000111   [per every group of 4-bits]
          - Split Into Two:   0110100110110001 [L] 1000100000000111 [R]
          - Swap Halves:      10001000000001110110100110110001
          - Bit Inversion:    01110111111110001001011001001110
          - Compressed Key:   10101111001001100001100000101100   [done by compression P-Box]
          - XOR with Key:     11011000110111101000111001100010

          - FUNCTION OUTPUT:  11011000110111101000111001100010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110010111011000101101011001000

       - FUNCTION OUTPUT:          11011000110111101000111001100010

       - Left XOR FUNCTION OUTPUT: 10101010001100101101010010101010

       - Next Round Left 32 Bits:  11010101111100111011101101100100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10101010001100101101010010101010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010101111100111011101101100100

       - Right 32 Bits:            10101010001100101101010010101010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111001010000010111011101100101011100110110111101001101   [Subkey: 8]
          - Input Half:       10101010001100101101010010101010
          - S-Box Result:     01000100000111100110011101000100   [per every group of 4-bits]
          - Split Into Two:   0100010000011110 [L] 0110011101000100 [R]
          - Swap Halves:      01100111010001000100010000011110
          - Bit Inversion:    10011000101110111011101111100001
          - Compressed Key:   10010000101110100111110110111101   [done by compression P-Box]
          - XOR with Key:     00001000000000011100011001011100

          - FUNCTION OUTPUT:  00001000000000011100011001011100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010101111100111011101101100100

       - FUNCTION OUTPUT:          00001000000000011100011001011100

       - Left XOR FUNCTION OUTPUT: 11011101111100100111110100111000

       - Next Round Left 32 Bits:  10101010001100101101010010101010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11011101111100100111110100111000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10101010001100101101010010101010

       - Right 32 Bits:            11011101111100100111110100111000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000011010111110100010001001101010001100100100001011001   [Subkey: 7]
          - Input Half:       11011101111100100111110100111000
          - S-Box Result:     01100110101111101101011000010010   [per every group of 4-bits]
          - Split Into Two:   0110011010111110 [L] 1101011000010010 [R]
          - Swap Halves:      11010110000100100110011010111110
          - Bit Inversion:    00101001111011011001100101000001
          - Compressed Key:   01001110000110000011010100000101   [done by compression P-Box]
          - XOR with Key:     01100111111101011010110001000100

          - FUNCTION OUTPUT:  01100111111101011010110001000100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10101010001100101101010010101010

       - FUNCTION OUTPUT:          01100111111101011010110001000100

       - Left XOR FUNCTION OUTPUT: 11001101110001110111100011101110

       - Next Round Left 32 Bits:  11011101111100100111110100111000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001101110001110111100011101110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11011101111100100111110100111000

       - Right 32 Bits:            11001101110001110111100011101110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011110010100000101110111011001010111001101101111010011   [Subkey: 6]
          - Input Half:       11001101110001110111100011101110
          - S-Box Result:     01010110010111011101001011001100   [per every group of 4-bits]
          - Split Into Two:   0101011001011101 [L] 1101001011001100 [R]
          - Swap Halves:      11010010110011000101011001011101
          - Bit Inversion:    00101101001100111010100110100010
          - Compressed Key:   11111000011111010011011011100110   [done by compression P-Box]
          - XOR with Key:     11010101010011101001111101000100

          - FUNCTION OUTPUT:  11010101010011101001111101000100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11011101111100100111110100111000

       - FUNCTION OUTPUT:          11010101010011101001111101000100

       - Left XOR FUNCTION OUTPUT: 00001000101111001110001001111100

       - Next Round Left 32 Bits:  11001101110001110111100011101110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001000101111001110001001111100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11001101110001110111100011101110

       - Right 32 Bits:            00001000101111001110001001111100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010000110101111101000100010011010100011001001000010110   [Subkey: 5]
          - Input Half:       00001000101111001110001001111100
          - S-Box Result:     11110010100001011100111011010101   [per every group of 4-bits]
          - Split Into Two:   1111001010000101 [L] 1100111011010101 [R]
          - Swap Halves:      11001110110101011111001010000101
          - Bit Inversion:    00110001001010100000110101111010
          - Compressed Key:   00011100001101000011101010001010   [done by compression P-Box]
          - XOR with Key:     00101101000111100011011111110000

          - FUNCTION OUTPUT:  00101101000111100011011111110000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11001101110001110111100011101110

       - FUNCTION OUTPUT:          00101101000111100011011111110000

       - Left XOR FUNCTION OUTPUT: 11100000110110010100111100011110

       - Next Round Left 32 Bits:  00001000101111001110001001111100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100000110110010100111100011110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001000101111001110001001111100

       - Right 32 Bits:            11100000110110010100111100011110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010111100101000001011101110110010101110011011011110100   [Subkey: 4]
          - Input Half:       11100000110110010100111100011110
          - S-Box Result:     11001111011000110111101110101100   [per every group of 4-bits]
          - Split Into Two:   1100111101100011 [L] 0111101110101100 [R]
          - Swap Halves:      01111011101011001100111101100011
          - Bit Inversion:    10000100010100110011000010011100
          - Compressed Key:   01111100001011100010100111011000   [done by compression P-Box]
          - XOR with Key:     11111000011111010001100101000100

          - FUNCTION OUTPUT:  11111000011111010001100101000100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001000101111001110001001111100

       - FUNCTION OUTPUT:          11111000011111010001100101000100

       - Left XOR FUNCTION OUTPUT: 11110000110000011111101100111000

       - Next Round Left 32 Bits:  11100000110110010100111100011110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110000110000011111101100111000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100000110110010100111100011110

       - Right 32 Bits:            11110000110000011111101100111000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100001101011111010001000100110101000110010010000101   [Subkey: 3]
          - Input Half:       11110000110000011111101100111000
          - S-Box Result:     10111111010110101011100000010010   [per every group of 4-bits]
          - Split Into Two:   1011111101011010 [L] 1011100000010010 [R]
          - Swap Halves:      10111000000100101011111101011010
          - Bit Inversion:    01000111111011010100000010100101
          - Compressed Key:   00111101101110001010010001011100   [done by compression P-Box]
          - XOR with Key:     01111010010101011110010011111001

          - FUNCTION OUTPUT:  01111010010101011110010011111001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100000110110010100111100011110

       - FUNCTION OUTPUT:          01111010010101011110010011111001

       - Left XOR FUNCTION OUTPUT: 10011010100011001010101111100111

       - Next Round Left 32 Bits:  11110000110000011111101100111000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011010100011001010101111100111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110000110000011111101100111000

       - Right 32 Bits:            10011010100011001010101111100111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101111001010000010111011101100101011100110110111101   [Subkey: 2]
          - Input Half:       10011010100011001010101111100111
          - S-Box Result:     00110100001001010100100011001101   [per every group of 4-bits]
          - Split Into Two:   0011010000100101 [L] 0100100011001101 [R]
          - Swap Halves:      01001000110011010011010000100101
          - Bit Inversion:    10110111001100101100101111011010
          - Compressed Key:   00110101000011011001111001111101   [done by compression P-Box]
          - XOR with Key:     10000010001111110101010110100111

          - FUNCTION OUTPUT:  10000010001111110101010110100111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110000110000011111101100111000

       - FUNCTION OUTPUT:          10000010001111110101010110100111

       - Left XOR FUNCTION OUTPUT: 01110010111111101010111010011111

       - Next Round Left 32 Bits:  10011010100011001010101111100111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110010111111101010111010011111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011010100011001010101111100111

       - Right 32 Bits:            01110010111111101010111010011111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100101000011010111110100010001001101010001100100100001   [Subkey: 1]
          - Input Half:       01110010111111101010111010011111
          - S-Box Result:     11011110101111000100110000111011   [per every group of 4-bits]
          - Split Into Two:   1101111010111100 [L] 0100110000111011 [R]
          - Swap Halves:      01001100001110111101111010111100
          - Bit Inversion:    10110011110001000010000101000011
          - Compressed Key:   00100110111101000101100000100100   [done by compression P-Box]
          - XOR with Key:     10010101001100000111100101100111

          - FUNCTION OUTPUT:  10010101001100000111100101100111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011010100011001010101111100111

       - FUNCTION OUTPUT:          10010101001100000111100101100111

       - Left XOR FUNCTION OUTPUT: 00001111101111001101001010000000

       - Next Round Left 32 Bits:  01110010111111101010111010011111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001111101111001101001010000000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0000111110111100110100101000000001110010111111101010111010011111

 > Decrypted Block:     0000111110111100110100101000000001110010111111101010111010011111


!!!CBC: Previous Ciphertext:                             0111110010011100101110111111001101010010100111111000111011101011

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    0111001100100000011010010111001100100000011000010010000001110100

 > Final Processed Block:                                0111001100100000011010010111001100100000011000010010000001110100



Ciphertext Block 4:                                      1110101010101100100111010001001001101001010110000111011011011101

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101010101011001001110100010010

       - Right 32 Bits:            01101001010110000111011011011101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000001011101110110010101110011011011110100110101111001   [Subkey: 16]
          - Input Half:       01101001010110000111011011011101
          - S-Box Result:     00000011100100101101000001100110   [per every group of 4-bits]
          - Split Into Two:   0000001110010010 [L] 1101000001100110 [R]
          - Swap Halves:      11010000011001100000001110010010
          - Bit Inversion:    00101111100110011111110001101101
          - Compressed Key:   00001101100111100111110100110101   [done by compression P-Box]
          - XOR with Key:     00100010000001111000000101011000

          - FUNCTION OUTPUT:  00100010000001111000000101011000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101010101011001001110100010010

       - FUNCTION OUTPUT:          00100010000001111000000101011000

       - Left XOR FUNCTION OUTPUT: 11001000101010110001110001001010

       - Next Round Left 32 Bits:  01101001010110000111011011011101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001000101010110001110001001010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101001010110000111011011011101

       - Right 32 Bits:            11001000101010110001110001001010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011111010001000100110101000110010010000101100101000011   [Subkey: 15]
          - Input Half:       11001000101010110001110001001010
          - S-Box Result:     01010010010010001010010101110100   [per every group of 4-bits]
          - Split Into Two:   0101001001001000 [L] 1010010101110100 [R]
          - Swap Halves:      10100101011101000101001001001000
          - Bit Inversion:    01011010100010111010110110110111
          - Compressed Key:   11110100010110000010010000100110   [done by compression P-Box]
          - XOR with Key:     10101110110100111000100110010001

          - FUNCTION OUTPUT:  10101110110100111000100110010001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101001010110000111011011011101

       - FUNCTION OUTPUT:          10101110110100111000100110010001

       - Left XOR FUNCTION OUTPUT: 11000111100010111111111101001100

       - Next Round Left 32 Bits:  11001000101010110001110001001010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000111100010111111111101001100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11001000101010110001110001001010

       - Right 32 Bits:            11000111100010111111111101001100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010000010111011101100101011100110110111101001101011110   [Subkey: 14]
          - Input Half:       11000111100010111111111101001100
          - S-Box Result:     01011101001010001011101101110101   [per every group of 4-bits]
          - Split Into Two:   0101110100101000 [L] 1011101101110101 [R]
          - Swap Halves:      10111011011101010101110100101000
          - Bit Inversion:    01000100100010101010001011010111
          - Compressed Key:   00011110011111001010111110101011   [done by compression P-Box]
          - XOR with Key:     01011010111101100000110101111100

          - FUNCTION OUTPUT:  01011010111101100000110101111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11001000101010110001110001001010

       - FUNCTION OUTPUT:          01011010111101100000110101111100

       - Left XOR FUNCTION OUTPUT: 10010010010111010001000100110110

       - Next Round Left 32 Bits:  11000111100010111111111101001100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010010010111010001000100110110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000111100010111111111101001100

       - Right 32 Bits:            10010010010111010001000100110110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010111110100010001001101010001100100100001011001010000   [Subkey: 13]
          - Input Half:       10010010010111010001000100110110
          - S-Box Result:     00111110100101101010101000010000   [per every group of 4-bits]
          - Split Into Two:   0011111010010110 [L] 1010101000010000 [R]
          - Swap Halves:      10101010000100000011111010010110
          - Bit Inversion:    01010101111011111100000101101001
          - Compressed Key:   01111000001011001001000110010000   [done by compression P-Box]
          - XOR with Key:     00101101110000110101000011111001

          - FUNCTION OUTPUT:  00101101110000110101000011111001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000111100010111111111101001100

       - FUNCTION OUTPUT:          00101101110000110101000011111001

       - Left XOR FUNCTION OUTPUT: 11101010010010001010111110110101

       - Next Round Left 32 Bits:  10010010010111010001000100110110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101010010010001010111110110101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010010010111010001000100110110

       - Right 32 Bits:            11101010010010001010111110110101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100000101110111011001010111001101101111010011010111   [Subkey: 12]
          - Input Half:       11101010010010001010111110110101
          - S-Box Result:     11000100011100100100101110001001   [per every group of 4-bits]
          - Split Into Two:   1100010001110010 [L] 0100101110001001 [R]
          - Swap Halves:      01001011100010011100010001110010
          - Bit Inversion:    10110100011101100011101110001101
          - Compressed Key:   00111100101111000101011101011110   [done by compression P-Box]
          - XOR with Key:     10001000110010100110110011010011

          - FUNCTION OUTPUT:  10001000110010100110110011010011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010010010111010001000100110110

       - FUNCTION OUTPUT:          10001000110010100110110011010011

       - Left XOR FUNCTION OUTPUT: 00011010100101110111110111100101

       - Next Round Left 32 Bits:  11101010010010001010111110110101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011010100101110111110111100101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101010010010001010111110110101

       - Right 32 Bits:            00011010100101110111110111100101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101111101000100010011010100011001001000010110010100   [Subkey: 11]
          - Input Half:       00011010100101110111110111100101
          - S-Box Result:     10100100001111011101011011001001   [per every group of 4-bits]
          - Split Into Two:   1010010000111101 [L] 1101011011001001 [R]
          - Swap Halves:      11010110110010011010010000111101
          - Bit Inversion:    00101001001101100101101111000010
          - Compressed Key:   00111101000111010110001001111000   [done by compression P-Box]
          - XOR with Key:     00010100001010110011100110111010

          - FUNCTION OUTPUT:  00010100001010110011100110111010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101010010010001010111110110101

       - FUNCTION OUTPUT:          00010100001010110011100110111010

       - Left XOR FUNCTION OUTPUT: 11111110011000111001011000001111

       - Next Round Left 32 Bits:  00011010100101110111110111100101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111110011000111001011000001111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00011010100101110111110111100101

       - Right 32 Bits:            11111110011000111001011000001111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11100101000001011101110110010101110011011011110100110101   [Subkey: 10]
          - Input Half:       11111110011000111001011000001111
          - S-Box Result:     10111100000000010011000011111011   [per every group of 4-bits]
          - Split Into Two:   1011110000000001 [L] 0011000011111011 [R]
          - Swap Halves:      00110000111110111011110000000001
          - Bit Inversion:    11001111000001000100001111111110
          - Compressed Key:   00100100011101011011101000111100   [done by compression P-Box]
          - XOR with Key:     11101011011100011111100111000010

          - FUNCTION OUTPUT:  11101011011100011111100111000010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00011010100101110111110111100101

       - FUNCTION OUTPUT:          11101011011100011111100111000010

       - Left XOR FUNCTION OUTPUT: 11110001111001101000010000100111

       - Next Round Left 32 Bits:  11111110011000111001011000001111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110001111001101000010000100111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111110011000111001011000001111

       - Right 32 Bits:            11110001111001101000010000100111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00001101011111010001000100110101000110010010000101100101   [Subkey: 9]
          - Input Half:       11110001111001101000010000100111
          - S-Box Result:     10111010110000000010011111101101   [per every group of 4-bits]
          - Split Into Two:   1011101011000000 [L] 0010011111101101 [R]
          - Swap Halves:      00100111111011011011101011000000
          - Bit Inversion:    11011000000100100100010100111111
          - Compressed Key:   10101111001001100001100000101100   [done by compression P-Box]
          - XOR with Key:     01110111001101000101110100010011

          - FUNCTION OUTPUT:  01110111001101000101110100010011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111110011000111001011000001111

       - FUNCTION OUTPUT:          01110111001101000101110100010011

       - Left XOR FUNCTION OUTPUT: 10001001010101111100101100011100

       - Next Round Left 32 Bits:  11110001111001101000010000100111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001001010101111100101100011100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110001111001101000010000100111

       - Right 32 Bits:            10001001010101111100101100011100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111001010000010111011101100101011100110110111101001101   [Subkey: 8]
          - Input Half:       10001001010101111100101100011100
          - S-Box Result:     00100011100111010101100010100101   [per every group of 4-bits]
          - Split Into Two:   0010001110011101 [L] 0101100010100101 [R]
          - Swap Halves:      01011000101001010010001110011101
          - Bit Inversion:    10100111010110101101110001100010
          - Compressed Key:   10010000101110100111110110111101   [done by compression P-Box]
          - XOR with Key:     00110111111000001010000111011111

          - FUNCTION OUTPUT:  00110111111000001010000111011111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110001111001101000010000100111

       - FUNCTION OUTPUT:          00110111111000001010000111011111

       - Left XOR FUNCTION OUTPUT: 11000110000001100010010111111000

       - Next Round Left 32 Bits:  10001001010101111100101100011100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000110000001100010010111111000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001001010101111100101100011100

       - Right 32 Bits:            11000110000001100010010111111000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000011010111110100010001001101010001100100100001011001   [Subkey: 7]
          - Input Half:       11000110000001100010010111111000
          - S-Box Result:     01010000111100001110100110110010   [per every group of 4-bits]
          - Split Into Two:   0101000011110000 [L] 1110100110110010 [R]
          - Swap Halves:      11101001101100100101000011110000
          - Bit Inversion:    00010110010011011010111100001111
          - Compressed Key:   01001110000110000011010100000101   [done by compression P-Box]
          - XOR with Key:     01011000010101011001101000001010

          - FUNCTION OUTPUT:  01011000010101011001101000001010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001001010101111100101100011100

       - FUNCTION OUTPUT:          01011000010101011001101000001010

       - Left XOR FUNCTION OUTPUT: 11010001000000100101000100010110

       - Next Round Left 32 Bits:  11000110000001100010010111111000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010001000000100101000100010110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000110000001100010010111111000

       - Right 32 Bits:            11010001000000100101000100010110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011110010100000101110111011001010111001101101111010011   [Subkey: 6]
          - Input Half:       11010001000000100101000100010110
          - S-Box Result:     01101010111111101001101010100000   [per every group of 4-bits]
          - Split Into Two:   0110101011111110 [L] 1001101010100000 [R]
          - Swap Halves:      10011010101000000110101011111110
          - Bit Inversion:    01100101010111111001010100000001
          - Compressed Key:   11111000011111010011011011100110   [done by compression P-Box]
          - XOR with Key:     10011101001000101010001111100111

          - FUNCTION OUTPUT:  10011101001000101010001111100111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000110000001100010010111111000

       - FUNCTION OUTPUT:          10011101001000101010001111100111

       - Left XOR FUNCTION OUTPUT: 01011011001001001000011000011111

       - Next Round Left 32 Bits:  11010001000000100101000100010110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011011001001001000011000011111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010001000000100101000100010110

       - Right 32 Bits:            01011011001001001000011000011111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010000110101111101000100010011010100011001001000010110   [Subkey: 5]
          - Input Half:       01011011001001001000011000011111
          - S-Box Result:     10011000111001110010000010101011   [per every group of 4-bits]
          - Split Into Two:   1001100011100111 [L] 0010000010101011 [R]
          - Swap Halves:      00100000101010111001100011100111
          - Bit Inversion:    11011111010101000110011100011000
          - Compressed Key:   00011100001101000011101010001010   [done by compression P-Box]
          - XOR with Key:     11000011011000000101110110010010

          - FUNCTION OUTPUT:  11000011011000000101110110010010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010001000000100101000100010110

       - FUNCTION OUTPUT:          11000011011000000101110110010010

       - Left XOR FUNCTION OUTPUT: 00010010011000100000110010000100

       - Next Round Left 32 Bits:  01011011001001001000011000011111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00010010011000100000110010000100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011011001001001000011000011111

       - Right 32 Bits:            00010010011000100000110010000100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010111100101000001011101110110010101110011011011110100   [Subkey: 4]
          - Input Half:       00010010011000100000110010000100
          - S-Box Result:     10101110000011101111010100100111   [per every group of 4-bits]
          - Split Into Two:   1010111000001110 [L] 1111010100100111 [R]
          - Swap Halves:      11110101001001111010111000001110
          - Bit Inversion:    00001010110110000101000111110001
          - Compressed Key:   01111100001011100010100111011000   [done by compression P-Box]
          - XOR with Key:     01110110111101100111100000101001

          - FUNCTION OUTPUT:  01110110111101100111100000101001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011011001001001000011000011111

       - FUNCTION OUTPUT:          01110110111101100111100000101001

       - Left XOR FUNCTION OUTPUT: 00101101110100101111111000110110

       - Next Round Left 32 Bits:  00010010011000100000110010000100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101101110100101111111000110110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00010010011000100000110010000100

       - Right 32 Bits:            00101101110100101111111000110110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100001101011111010001000100110101000110010010000101   [Subkey: 3]
          - Input Half:       00101101110100101111111000110110
          - S-Box Result:     11100110011011101011110000010000   [per every group of 4-bits]
          - Split Into Two:   1110011001101110 [L] 1011110000010000 [R]
          - Swap Halves:      10111100000100001110011001101110
          - Bit Inversion:    01000011111011110001100110010001
          - Compressed Key:   00111101101110001010010001011100   [done by compression P-Box]
          - XOR with Key:     01111110010101111011110111001101

          - FUNCTION OUTPUT:  01111110010101111011110111001101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00010010011000100000110010000100

       - FUNCTION OUTPUT:          01111110010101111011110111001101

       - Left XOR FUNCTION OUTPUT: 01101100001101011011000101001001

       - Next Round Left 32 Bits:  00101101110100101111111000110110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101100001101011011000101001001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101101110100101111111000110110

       - Right 32 Bits:            01101100001101011011000101001001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101111001010000010111011101100101011100110110111101   [Subkey: 2]
          - Input Half:       01101100001101011011000101001001
          - S-Box Result:     00000101000110011000101001110011   [per every group of 4-bits]
          - Split Into Two:   0000010100011001 [L] 1000101001110011 [R]
          - Swap Halves:      10001010011100110000010100011001
          - Bit Inversion:    01110101100011001111101011100110
          - Compressed Key:   00110101000011011001111001111101   [done by compression P-Box]
          - XOR with Key:     01000000100000010110010010011011

          - FUNCTION OUTPUT:  01000000100000010110010010011011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101101110100101111111000110110

       - FUNCTION OUTPUT:          01000000100000010110010010011011

       - Left XOR FUNCTION OUTPUT: 01101101010100111001101010101101

       - Next Round Left 32 Bits:  01101100001101011011000101001001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101101010100111001101010101101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101100001101011011000101001001

       - Right 32 Bits:            01101101010100111001101010101101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100101000011010111110100010001001101010001100100100001   [Subkey: 1]
          - Input Half:       01101101010100111001101010101101
          - S-Box Result:     00000110100100010011010001000110   [per every group of 4-bits]
          - Split Into Two:   0000011010010001 [L] 0011010001000110 [R]
          - Swap Halves:      00110100010001100000011010010001
          - Bit Inversion:    11001011101110011111100101101110
          - Compressed Key:   00100110111101000101100000100100   [done by compression P-Box]
          - XOR with Key:     11101101010011011010000101001010

          - FUNCTION OUTPUT:  11101101010011011010000101001010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101100001101011011000101001001

       - FUNCTION OUTPUT:          11101101010011011010000101001010

       - Left XOR FUNCTION OUTPUT: 10000001011110000001000000000011

       - Next Round Left 32 Bits:  01101101010100111001101010101101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10000001011110000001000000000011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 1000000101111000000100000000001101101101010100111001101010101101

 > Decrypted Block:     1000000101111000000100000000001101101101010100111001101010101101


!!!CBC: Previous Ciphertext:                             1110010000001011011001000010001101001101011100111011101010001101

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    0110010101110011011101000010000000100000001000000010000000100000

 > Final Processed Block:                                0110010101110011011101000010000000100000001000000010000000100000


FINAL PROCESSED DATA BLOCKS: 0100100001100101011011000110110001101111001000000101011001100101,0110010001110010011000010110111000100000010101000110100001101001,0111001100100000011010010111001100100000011000010010000001110100,0110010101110011011101000010000000100000001000000010000000100000,

BLOCKS IN ASCII:             Hello Vedran This is a test     

