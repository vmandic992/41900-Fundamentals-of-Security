Triple DES Capture

168-bit key: MyAwesomeTripleDESKey

3 x 56-bit DES keys: MyAweso, meTripl, eDESKey

Initialization Vector: N/A (Using ECB)

=========================================================================================================================
STAGE 1: DES [DECRYPT] ==================================================================================================
=========================================================================================================================

56-bit key: eDESKey
In Binary:  01100101010001000100010101010011010010110110010101111001

Subkeys:    Key i = Key (i - 1) [Shifted left by 1 and inverted]

Subkey 1  : 00110101011101110111010101011001011010010011010100001101
Subkey 2  : 10010101000100010001010101001101001011011001010111100101
Subkey 3  : 11010101110111011101010101100101101001001101010000110100
Subkey 4  : 01010100010001000101010100110100101101100101011110010110
Subkey 5  : 01010111011101110101010110010110100100110101000011010011
Subkey 6  : 01010001000100010101010011010010110110010101111001011001
Subkey 7  : 01011101110111010101011001011010010011010100001101001101
Subkey 8  : 01000100010001010101001101001011011001010111100101100101
Subkey 9  : 01110111011101010101100101101001001101010000110100110101
Subkey 10 : 00010001000101010100110100101101100101011110010110010101
Subkey 11 : 11011101110101010110010110100100110101000011010011010101
Subkey 12 : 01000100010101010011010010110110010101111001011001010100
Subkey 13 : 01110111010101011001011010010011010100001101001101010111
Subkey 14 : 00010001010101001101001011011001010111100101100101010001
Subkey 15 : 11011101010101100101101001001101010000110100110101011101
Subkey 16 : 01000101010100110100101101100101011110010110010101000100

S-BOX (4x4):
INPUT | OUTPUT
------|-------
0000  | 1111
0001  | 1010
0010  | 1110
0011  | 0001
0100  | 0111
0101  | 1001
0110  | 0000
0111  | 1101
1000  | 0010
1001  | 0011
1010  | 0100
1011  | 1000
1100  | 0101
1101  | 0110
1110  | 1100
1111  | 1011

P-BOX (7 bits compressed to 4 bits)
Bit at Position X goes to Position Y
X: | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
Y: | 4 | 3 | 1 | 2 | 1 | 4 | 3 |


Data to decrypt         : ?-„dƒ˚≈?&Tf∂£Ã#„Ïg¿Za

Data padded with spaces : ?-„dƒ˚≈?&Tf∂£Ã#„Ïg¿Za[Padded with '0' spaces]

Data in ASCII           : 131,45,26,227,100,196,251,197,137,38,16,84,102,182,163,204,35,227,25,236,103,192,90,97,

Data in Binary          : 10000011,00101101,00011010,11100011,01100100,11000100,11111011,11000101,10001001,00100110,00010000,01010100,01100110,10110110,10100011,11001100,00100011,11100011,00011001,11101100,01100111,11000000,01011010,01100001,

Data in 64-bit Blocks   : 1000001100101101000110101110001101100100110001001111101111000101,1000100100100110000100000101010001100110101101101010001111001100,0010001111100011000110011110110001100111110000000101101001100001,

!!!!NOTE: Subkeys used in REVERSE order for DECRYPTION



<<<<<< PROCESSING IN 'ECB' MODE >>>>>>


Ciphertext Block 1: 1000001100101101000110101110001101100100110001001111101111000101

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10000011001011010001101011100011

       - Right 32 Bits:            01100100110001001111101111000101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000101010100110100101101100101011110010110010101000100   [Subkey: 16]
          - Input Half:       01100100110001001111101111000101
          - S-Box Result:     00000111010101111011100001011001   [per every group of 4-bits]
          - Split Into Two:   0000011101010111 [L] 1011100001011001 [R]
          - Swap Halves:      10111000010110010000011101010111
          - Bit Inversion:    01000111101001101111100010101000
          - Compressed Key:   00011000011010010111101001011000   [done by compression P-Box]
          - XOR with Key:     01011111110011111000001011110000

          - FUNCTION OUTPUT:  01011111110011111000001011110000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10000011001011010001101011100011

       - FUNCTION OUTPUT:          01011111110011111000001011110000

       - Left XOR FUNCTION OUTPUT: 11011100111000101001100000010011

       - Next Round Left 32 Bits:  01100100110001001111101111000101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11011100111000101001100000010011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01100100110001001111101111000101

       - Right 32 Bits:            11011100111000101001100000010011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011101010101100101101001001101010000110100110101011101   [Subkey: 15]
          - Input Half:       11011100111000101001100000010011
          - S-Box Result:     01100101110011100011001010100001   [per every group of 4-bits]
          - Split Into Two:   0110010111001110 [L] 0011001010100001 [R]
          - Swap Halves:      00110010101000010110010111001110
          - Bit Inversion:    11001101010111101001101000110001
          - Compressed Key:   11011010011110000101111001011110   [done by compression P-Box]
          - XOR with Key:     00010111001001101100010001101111

          - FUNCTION OUTPUT:  00010111001001101100010001101111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01100100110001001111101111000101

       - FUNCTION OUTPUT:          00010111001001101100010001101111

       - Left XOR FUNCTION OUTPUT: 01110011111000100011111110101010

       - Next Round Left 32 Bits:  11011100111000101001100000010011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110011111000100011111110101010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11011100111000101001100000010011

       - Right 32 Bits:            01110011111000100011111110101010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010001010101001101001011011001010111100101100101010001   [Subkey: 14]
          - Input Half:       01110011111000100011111110101010
          - S-Box Result:     11010001110011100001101101000100   [per every group of 4-bits]
          - Split Into Two:   1101000111001110 [L] 0001101101000100 [R]
          - Swap Halves:      00011011010001001101000111001110
          - Bit Inversion:    11100100101110110010111000110001
          - Compressed Key:   01001010010111100101011000010010   [done by compression P-Box]
          - XOR with Key:     10101110111001010111100000100011

          - FUNCTION OUTPUT:  10101110111001010111100000100011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11011100111000101001100000010011

       - FUNCTION OUTPUT:          10101110111001010111100000100011

       - Left XOR FUNCTION OUTPUT: 01110010000001111110000000110000

       - Next Round Left 32 Bits:  01110011111000100011111110101010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110010000001111110000000110000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110011111000100011111110101010

       - Right 32 Bits:            01110010000001111110000000110000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110111010101011001011010010011010100001101001101010111   [Subkey: 13]
          - Input Half:       01110010000001111110000000110000
          - S-Box Result:     11011110111111011100111100011111   [per every group of 4-bits]
          - Split Into Two:   1101111011111101 [L] 1100111100011111 [R]
          - Swap Halves:      11001111000111111101111011111101
          - Bit Inversion:    00110000111000000010000100000010
          - Compressed Key:   01111010000101100101001110011011   [done by compression P-Box]
          - XOR with Key:     01001010111101100111001010011001

          - FUNCTION OUTPUT:  01001010111101100111001010011001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110011111000100011111110101010

       - FUNCTION OUTPUT:          01001010111101100111001010011001

       - Left XOR FUNCTION OUTPUT: 00111001000101000100110100110011

       - Next Round Left 32 Bits:  01110010000001111110000000110000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111001000101000100110100110011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110010000001111110000000110000

       - Right 32 Bits:            00111001000101000100110100110011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000100010101010011010010110110010101111001011001010100   [Subkey: 12]
          - Input Half:       00111001000101000100110100110011
          - S-Box Result:     00010011101001110111011000010001   [per every group of 4-bits]
          - Split Into Two:   0001001110100111 [L] 0111011000010001 [R]
          - Swap Halves:      01110110000100010001001110100111
          - Bit Inversion:    10001001111011101110110001011000
          - Compressed Key:   00011010100101110001110111001000   [done by compression P-Box]
          - XOR with Key:     10010011011110011111000110010000

          - FUNCTION OUTPUT:  10010011011110011111000110010000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110010000001111110000000110000

       - FUNCTION OUTPUT:          10010011011110011111000110010000

       - Left XOR FUNCTION OUTPUT: 11100001011111100001000110100000

       - Next Round Left 32 Bits:  00111001000101000100110100110011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100001011111100001000110100000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111001000101000100110100110011

       - Right 32 Bits:            11100001011111100001000110100000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011101110101010110010110100100110101000011010011010101   [Subkey: 11]
          - Input Half:       11100001011111100001000110100000
          - S-Box Result:     11001010110111001010101001001111   [per every group of 4-bits]
          - Split Into Two:   1100101011011100 [L] 1010101001001111 [R]
          - Swap Halves:      10101010010011111100101011011100
          - Bit Inversion:    01010101101100000011010100100011
          - Compressed Key:   11011010110001011001000001101010   [done by compression P-Box]
          - XOR with Key:     10001111011101011010010101001001

          - FUNCTION OUTPUT:  10001111011101011010010101001001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111001000101000100110100110011

       - FUNCTION OUTPUT:          10001111011101011010010101001001

       - Left XOR FUNCTION OUTPUT: 10110110011000011110100001111010

       - Next Round Left 32 Bits:  11100001011111100001000110100000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10110110011000011110100001111010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100001011111100001000110100000

       - Right 32 Bits:            10110110011000011110100001111010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010001000101010100110100101101100101011110010110010101   [Subkey: 10]
          - Input Half:       10110110011000011110100001111010
          - S-Box Result:     10000000000010101100001011010100   [per every group of 4-bits]
          - Split Into Two:   1000000000001010 [L] 1100001011010100 [R]
          - Swap Halves:      11000010110101001000000000001010
          - Bit Inversion:    00111101001010110111111111110101
          - Compressed Key:   01001010011000011100101101111010   [done by compression P-Box]
          - XOR with Key:     01110111010010101011010010001111

          - FUNCTION OUTPUT:  01110111010010101011010010001111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100001011111100001000110100000

       - FUNCTION OUTPUT:          01110111010010101011010010001111

       - Left XOR FUNCTION OUTPUT: 10010110001101001010010100101111

       - Next Round Left 32 Bits:  10110110011000011110100001111010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010110001101001010010100101111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10110110011000011110100001111010

       - Right 32 Bits:            10010110001101001010010100101111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110111011101010101100101101001001101010000110100110101   [Subkey: 9]
          - Input Half:       10010110001101001010010100101111
          - S-Box Result:     00110000000101110100100111101011   [per every group of 4-bits]
          - Split Into Two:   0011000000010111 [L] 0100100111101011 [R]
          - Swap Halves:      01001001111010110011000000010111
          - Bit Inversion:    10110110000101001100111111101000
          - Compressed Key:   01111110011110010110100001011010   [done by compression P-Box]
          - XOR with Key:     11001000011011011010011110110010

          - FUNCTION OUTPUT:  11001000011011011010011110110010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10110110011000011110100001111010

       - FUNCTION OUTPUT:          11001000011011011010011110110010

       - Left XOR FUNCTION OUTPUT: 01111110000011000100111111001000

       - Next Round Left 32 Bits:  10010110001101001010010100101111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01111110000011000100111111001000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010110001101001010010100101111

       - Right 32 Bits:            01111110000011000100111111001000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000100010001010101001101001011011001010111100101100101   [Subkey: 8]
          - Input Half:       01111110000011000100111111001000
          - S-Box Result:     11011100111101010111101101010010   [per every group of 4-bits]
          - Split Into Two:   1101110011110101 [L] 0111101101010010 [R]
          - Swap Halves:      01111011010100101101110011110101
          - Bit Inversion:    10000100101011010010001100001010
          - Compressed Key:   00010010010110000111101000011010   [done by compression P-Box]
          - XOR with Key:     10010110111101010101100100010000

          - FUNCTION OUTPUT:  10010110111101010101100100010000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010110001101001010010100101111

       - FUNCTION OUTPUT:          10010110111101010101100100010000

       - Left XOR FUNCTION OUTPUT: 00000000110000011111110000111111

       - Next Round Left 32 Bits:  01111110000011000100111111001000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00000000110000011111110000111111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01111110000011000100111111001000

       - Right 32 Bits:            00000000110000011111110000111111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011101110111010101011001011010010011010100001101001101   [Subkey: 7]
          - Input Half:       00000000110000011111110000111111
          - S-Box Result:     11111111010110101011010100011011   [per every group of 4-bits]
          - Split Into Two:   1111111101011010 [L] 1011010100011011 [R]
          - Swap Halves:      10110101000110111111111101011010
          - Bit Inversion:    01001010111001000000000010100101
          - Compressed Key:   11011011010110100001101010011110   [done by compression P-Box]
          - XOR with Key:     10010001101111100001101000111011

          - FUNCTION OUTPUT:  10010001101111100001101000111011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01111110000011000100111111001000

       - FUNCTION OUTPUT:          10010001101111100001101000111011

       - Left XOR FUNCTION OUTPUT: 11101111101100100101010111110011

       - Next Round Left 32 Bits:  00000000110000011111110000111111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101111101100100101010111110011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00000000110000011111110000111111

       - Right 32 Bits:            11101111101100100101010111110011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010001000100010101010011010010110110010101111001011001   [Subkey: 6]
          - Input Half:       11101111101100100101010111110011
          - S-Box Result:     11001011100011101001100110110001   [per every group of 4-bits]
          - Split Into Two:   1100101110001110 [L] 1001100110110001 [R]
          - Swap Halves:      10011001101100011100101110001110
          - Bit Inversion:    01100110010011100011010001110001
          - Compressed Key:   01001000010111101001101011000110   [done by compression P-Box]
          - XOR with Key:     00101110000100001010111010110111

          - FUNCTION OUTPUT:  00101110000100001010111010110111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00000000110000011111110000111111

       - FUNCTION OUTPUT:          00101110000100001010111010110111

       - Left XOR FUNCTION OUTPUT: 00101110110100010101001010001000

       - Next Round Left 32 Bits:  11101111101100100101010111110011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101110110100010101001010001000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101111101100100101010111110011

       - Right 32 Bits:            00101110110100010101001010001000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010111011101110101010110010110100100110101000011010011   [Subkey: 5]
          - Input Half:       00101110110100010101001010001000
          - S-Box Result:     11101100011010101001111000100010   [per every group of 4-bits]
          - Split Into Two:   1110110001101010 [L] 1001111000100010 [R]
          - Swap Halves:      10011110001000101110110001101010
          - Bit Inversion:    01100001110111010001001110010101
          - Compressed Key:   01111110010101101000111000100011   [done by compression P-Box]
          - XOR with Key:     00011111100010111001110110110110

          - FUNCTION OUTPUT:  00011111100010111001110110110110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101111101100100101010111110011

       - FUNCTION OUTPUT:          00011111100010111001110110110110

       - Left XOR FUNCTION OUTPUT: 11110000001110011100100001000101

       - Next Round Left 32 Bits:  00101110110100010101001010001000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110000001110011100100001000101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101110110100010101001010001000

       - Right 32 Bits:            11110000001110011100100001000101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010100010001000101010100110100101101100101011110010110   [Subkey: 4]
          - Input Half:       11110000001110011100100001000101
          - S-Box Result:     10111111000100110101001001111001   [per every group of 4-bits]
          - Split Into Two:   1011111100010011 [L] 0101001001111001 [R]
          - Swap Halves:      01010010011110011011111100010011
          - Bit Inversion:    10101101100001100100000011101100
          - Compressed Key:   01010010010100111010011011111001   [done by compression P-Box]
          - XOR with Key:     11111111110101011110011000010101

          - FUNCTION OUTPUT:  11111111110101011110011000010101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101110110100010101001010001000

       - FUNCTION OUTPUT:          11111111110101011110011000010101

       - Left XOR FUNCTION OUTPUT: 11010001000001001011010010011101

       - Next Round Left 32 Bits:  11110000001110011100100001000101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010001000001001011010010011101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110000001110011100100001000101

       - Right 32 Bits:            11010001000001001011010010011101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010101110111011101010101100101101001001101010000110100   [Subkey: 3]
          - Input Half:       11010001000001001011010010011101
          - S-Box Result:     01101010111101111000011100110110   [per every group of 4-bits]
          - Split Into Two:   0110101011110111 [L] 1000011100110110 [R]
          - Swap Halves:      10000111001101100110101011110111
          - Bit Inversion:    01111000110010011001010100001000
          - Compressed Key:   01011011010110011110001101001000   [done by compression P-Box]
          - XOR with Key:     00100011100100000111011001000000

          - FUNCTION OUTPUT:  00100011100100000111011001000000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110000001110011100100001000101

       - FUNCTION OUTPUT:          00100011100100000111011001000000

       - Left XOR FUNCTION OUTPUT: 11010011101010011011111000000101

       - Next Round Left 32 Bits:  11010001000001001011010010011101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010011101010011011111000000101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010001000001001011010010011101

       - Right 32 Bits:            11010011101010011011111000000101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010101000100010001010101001101001011011001010111100101   [Subkey: 2]
          - Input Half:       11010011101010011011111000000101
          - S-Box Result:     01100001010000111000110011111001   [per every group of 4-bits]
          - Split Into Two:   0110000101000011 [L] 1000110011111001 [R]
          - Swap Halves:      10001100111110010110000101000011
          - Bit Inversion:    01110011000001101001111010111100
          - Compressed Key:   01011000000110000110100101111010   [done by compression P-Box]
          - XOR with Key:     00101011000111101111011111000110

          - FUNCTION OUTPUT:  00101011000111101111011111000110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010001000001001011010010011101

       - FUNCTION OUTPUT:          00101011000111101111011111000110

       - Left XOR FUNCTION OUTPUT: 11111010000110100100001101011011

       - Next Round Left 32 Bits:  11010011101010011011111000000101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111010000110100100001101011011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010011101010011011111000000101

       - Right 32 Bits:            11111010000110100100001101011011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101011101110111010101011001011010010011010100001101   [Subkey: 1]
          - Input Half:       11111010000110100100001101011011
          - S-Box Result:     10110100101001000111000110011000   [per every group of 4-bits]
          - Split Into Two:   1011010010100100 [L] 0111000110011000 [R]
          - Swap Halves:      01110001100110001011010010100100
          - Bit Inversion:    10001110011001110100101101011011
          - Compressed Key:   01011110110110100111100001011110   [done by compression P-Box]
          - XOR with Key:     11010000101111010011001100000101

          - FUNCTION OUTPUT:  11010000101111010011001100000101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010011101010011011111000000101

       - FUNCTION OUTPUT:          11010000101111010011001100000101

       - Left XOR FUNCTION OUTPUT: 00000011000101001000110100000000

       - Next Round Left 32 Bits:  11111010000110100100001101011011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00000011000101001000110100000000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0000001100010100100011010000000011111010000110100100001101011011

 > Processed Block:     0000001100010100100011010000000011111010000110100100001101011011


Ciphertext Block 2: 1000100100100110000100000101010001100110101101101010001111001100

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001001001001100001000001010100

       - Right 32 Bits:            01100110101101101010001111001100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000101010100110100101101100101011110010110010101000100   [Subkey: 16]
          - Input Half:       01100110101101101010001111001100
          - S-Box Result:     00000000100000000100000101010101   [per every group of 4-bits]
          - Split Into Two:   0000000010000000 [L] 0100000101010101 [R]
          - Swap Halves:      01000001010101010000000010000000
          - Bit Inversion:    10111110101010101111111101111111
          - Compressed Key:   00011000011010010111101001011000   [done by compression P-Box]
          - XOR with Key:     10100110110000111000010100100111

          - FUNCTION OUTPUT:  10100110110000111000010100100111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001001001001100001000001010100

       - FUNCTION OUTPUT:          10100110110000111000010100100111

       - Left XOR FUNCTION OUTPUT: 00101111111001011001010101110011

       - Next Round Left 32 Bits:  01100110101101101010001111001100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101111111001011001010101110011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01100110101101101010001111001100

       - Right 32 Bits:            00101111111001011001010101110011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011101010101100101101001001101010000110100110101011101   [Subkey: 15]
          - Input Half:       00101111111001011001010101110011
          - S-Box Result:     11101011110010010011100111010001   [per every group of 4-bits]
          - Split Into Two:   1110101111001001 [L] 0011100111010001 [R]
          - Swap Halves:      00111001110100011110101111001001
          - Bit Inversion:    11000110001011100001010000110110
          - Compressed Key:   11011010011110000101111001011110   [done by compression P-Box]
          - XOR with Key:     00011100010101100100101001101000

          - FUNCTION OUTPUT:  00011100010101100100101001101000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01100110101101101010001111001100

       - FUNCTION OUTPUT:          00011100010101100100101001101000

       - Left XOR FUNCTION OUTPUT: 01111010111000001110100110100100

       - Next Round Left 32 Bits:  00101111111001011001010101110011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01111010111000001110100110100100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101111111001011001010101110011

       - Right 32 Bits:            01111010111000001110100110100100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010001010101001101001011011001010111100101100101010001   [Subkey: 14]
          - Input Half:       01111010111000001110100110100100
          - S-Box Result:     11010100110011111100001101000111   [per every group of 4-bits]
          - Split Into Two:   1101010011001111 [L] 1100001101000111 [R]
          - Swap Halves:      11000011010001111101010011001111
          - Bit Inversion:    00111100101110000010101100110000
          - Compressed Key:   01001010010111100101011000010010   [done by compression P-Box]
          - XOR with Key:     01110110111001100111110100100010

          - FUNCTION OUTPUT:  01110110111001100111110100100010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101111111001011001010101110011

       - FUNCTION OUTPUT:          01110110111001100111110100100010

       - Left XOR FUNCTION OUTPUT: 01011001000000111110100001010001

       - Next Round Left 32 Bits:  01111010111000001110100110100100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011001000000111110100001010001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01111010111000001110100110100100

       - Right 32 Bits:            01011001000000111110100001010001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110111010101011001011010010011010100001101001101010111   [Subkey: 13]
          - Input Half:       01011001000000111110100001010001
          - S-Box Result:     10010011111100011100001010011010   [per every group of 4-bits]
          - Split Into Two:   1001001111110001 [L] 1100001010011010 [R]
          - Swap Halves:      11000010100110101001001111110001
          - Bit Inversion:    00111101011001010110110000001110
          - Compressed Key:   01111010000101100101001110011011   [done by compression P-Box]
          - XOR with Key:     01000111011100110011111110010101

          - FUNCTION OUTPUT:  01000111011100110011111110010101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01111010111000001110100110100100

       - FUNCTION OUTPUT:          01000111011100110011111110010101

       - Left XOR FUNCTION OUTPUT: 00111101100100111101011000110001

       - Next Round Left 32 Bits:  01011001000000111110100001010001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111101100100111101011000110001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011001000000111110100001010001

       - Right 32 Bits:            00111101100100111101011000110001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000100010101010011010010110110010101111001011001010100   [Subkey: 12]
          - Input Half:       00111101100100111101011000110001
          - S-Box Result:     00010110001100010110000000011010   [per every group of 4-bits]
          - Split Into Two:   0001011000110001 [L] 0110000000011010 [R]
          - Swap Halves:      01100000000110100001011000110001
          - Bit Inversion:    10011111111001011110100111001110
          - Compressed Key:   00011010100101110001110111001000   [done by compression P-Box]
          - XOR with Key:     10000101011100101111010000000110

          - FUNCTION OUTPUT:  10000101011100101111010000000110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011001000000111110100001010001

       - FUNCTION OUTPUT:          10000101011100101111010000000110

       - Left XOR FUNCTION OUTPUT: 11011100011100010001110001010111

       - Next Round Left 32 Bits:  00111101100100111101011000110001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11011100011100010001110001010111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111101100100111101011000110001

       - Right 32 Bits:            11011100011100010001110001010111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011101110101010110010110100100110101000011010011010101   [Subkey: 11]
          - Input Half:       11011100011100010001110001010111
          - S-Box Result:     01100101110110101010010110011101   [per every group of 4-bits]
          - Split Into Two:   0110010111011010 [L] 1010010110011101 [R]
          - Swap Halves:      10100101100111010110010111011010
          - Bit Inversion:    01011010011000101001101000100101
          - Compressed Key:   11011010110001011001000001101010   [done by compression P-Box]
          - XOR with Key:     10000000101001110000101001001111

          - FUNCTION OUTPUT:  10000000101001110000101001001111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111101100100111101011000110001

       - FUNCTION OUTPUT:          10000000101001110000101001001111

       - Left XOR FUNCTION OUTPUT: 10111101001101001101110001111110

       - Next Round Left 32 Bits:  11011100011100010001110001010111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10111101001101001101110001111110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11011100011100010001110001010111

       - Right 32 Bits:            10111101001101001101110001111110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010001000101010100110100101101100101011110010110010101   [Subkey: 10]
          - Input Half:       10111101001101001101110001111110
          - S-Box Result:     10000110000101110110010111011100   [per every group of 4-bits]
          - Split Into Two:   1000011000010111 [L] 0110010111011100 [R]
          - Swap Halves:      01100101110111001000011000010111
          - Bit Inversion:    10011010001000110111100111101000
          - Compressed Key:   01001010011000011100101101111010   [done by compression P-Box]
          - XOR with Key:     11010000010000101011001010010010

          - FUNCTION OUTPUT:  11010000010000101011001010010010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11011100011100010001110001010111

       - FUNCTION OUTPUT:          11010000010000101011001010010010

       - Left XOR FUNCTION OUTPUT: 00001100001100111010111011000101

       - Next Round Left 32 Bits:  10111101001101001101110001111110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001100001100111010111011000101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10111101001101001101110001111110

       - Right 32 Bits:            00001100001100111010111011000101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110111011101010101100101101001001101010000110100110101   [Subkey: 9]
          - Input Half:       00001100001100111010111011000101
          - S-Box Result:     11110101000100010100110001011001   [per every group of 4-bits]
          - Split Into Two:   1111010100010001 [L] 0100110001011001 [R]
          - Swap Halves:      01001100010110011111010100010001
          - Bit Inversion:    10110011101001100000101011101110
          - Compressed Key:   01111110011110010110100001011010   [done by compression P-Box]
          - XOR with Key:     11001101110111110110001010110100

          - FUNCTION OUTPUT:  11001101110111110110001010110100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10111101001101001101110001111110

       - FUNCTION OUTPUT:          11001101110111110110001010110100

       - Left XOR FUNCTION OUTPUT: 01110000111010111011111011001010

       - Next Round Left 32 Bits:  00001100001100111010111011000101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110000111010111011111011001010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001100001100111010111011000101

       - Right 32 Bits:            01110000111010111011111011001010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000100010001010101001101001011011001010111100101100101   [Subkey: 8]
          - Input Half:       01110000111010111011111011001010
          - S-Box Result:     11011111110010001000110001010100   [per every group of 4-bits]
          - Split Into Two:   1101111111001000 [L] 1000110001010100 [R]
          - Swap Halves:      10001100010101001101111111001000
          - Bit Inversion:    01110011101010110010000000110111
          - Compressed Key:   00010010010110000111101000011010   [done by compression P-Box]
          - XOR with Key:     01100001111100110101101000101101

          - FUNCTION OUTPUT:  01100001111100110101101000101101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001100001100111010111011000101

       - FUNCTION OUTPUT:          01100001111100110101101000101101

       - Left XOR FUNCTION OUTPUT: 01101101110000001111010011101000

       - Next Round Left 32 Bits:  01110000111010111011111011001010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101101110000001111010011101000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110000111010111011111011001010

       - Right 32 Bits:            01101101110000001111010011101000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011101110111010101011001011010010011010100001101001101   [Subkey: 7]
          - Input Half:       01101101110000001111010011101000
          - S-Box Result:     00000110010111111011011111000010   [per every group of 4-bits]
          - Split Into Two:   0000011001011111 [L] 1011011111000010 [R]
          - Swap Halves:      10110111110000100000011001011111
          - Bit Inversion:    01001000001111011111100110100000
          - Compressed Key:   11011011010110100001101010011110   [done by compression P-Box]
          - XOR with Key:     10010011011001111110001100111110

          - FUNCTION OUTPUT:  10010011011001111110001100111110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110000111010111011111011001010

       - FUNCTION OUTPUT:          10010011011001111110001100111110

       - Left XOR FUNCTION OUTPUT: 11100011100011000101110111110100

       - Next Round Left 32 Bits:  01101101110000001111010011101000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100011100011000101110111110100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101101110000001111010011101000

       - Right 32 Bits:            11100011100011000101110111110100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010001000100010101010011010010110110010101111001011001   [Subkey: 6]
          - Input Half:       11100011100011000101110111110100
          - S-Box Result:     11000001001001011001011010110111   [per every group of 4-bits]
          - Split Into Two:   1100000100100101 [L] 1001011010110111 [R]
          - Swap Halves:      10010110101101111100000100100101
          - Bit Inversion:    01101001010010000011111011011010
          - Compressed Key:   01001000010111101001101011000110   [done by compression P-Box]
          - XOR with Key:     00100001000101101010010000011100

          - FUNCTION OUTPUT:  00100001000101101010010000011100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101101110000001111010011101000

       - FUNCTION OUTPUT:          00100001000101101010010000011100

       - Left XOR FUNCTION OUTPUT: 01001100110101100101000011110100

       - Next Round Left 32 Bits:  11100011100011000101110111110100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001100110101100101000011110100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100011100011000101110111110100

       - Right 32 Bits:            01001100110101100101000011110100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010111011101110101010110010110100100110101000011010011   [Subkey: 5]
          - Input Half:       01001100110101100101000011110100
          - S-Box Result:     01110101011000001001111110110111   [per every group of 4-bits]
          - Split Into Two:   0111010101100000 [L] 1001111110110111 [R]
          - Swap Halves:      10011111101101110111010101100000
          - Bit Inversion:    01100000010010001000101010011111
          - Compressed Key:   01111110010101101000111000100011   [done by compression P-Box]
          - XOR with Key:     00011110000111100000010010111100

          - FUNCTION OUTPUT:  00011110000111100000010010111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100011100011000101110111110100

       - FUNCTION OUTPUT:          00011110000111100000010010111100

       - Left XOR FUNCTION OUTPUT: 11111101100100100101100101001000

       - Next Round Left 32 Bits:  01001100110101100101000011110100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111101100100100101100101001000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001100110101100101000011110100

       - Right 32 Bits:            11111101100100100101100101001000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010100010001000101010100110100101101100101011110010110   [Subkey: 4]
          - Input Half:       11111101100100100101100101001000
          - S-Box Result:     10110110001111101001001101110010   [per every group of 4-bits]
          - Split Into Two:   1011011000111110 [L] 1001001101110010 [R]
          - Swap Halves:      10010011011100101011011000111110
          - Bit Inversion:    01101100100011010100100111000001
          - Compressed Key:   01010010010100111010011011111001   [done by compression P-Box]
          - XOR with Key:     00111110110111101110111100111000

          - FUNCTION OUTPUT:  00111110110111101110111100111000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001100110101100101000011110100

       - FUNCTION OUTPUT:          00111110110111101110111100111000

       - Left XOR FUNCTION OUTPUT: 01110010000010001011111111001100

       - Next Round Left 32 Bits:  11111101100100100101100101001000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110010000010001011111111001100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111101100100100101100101001000

       - Right 32 Bits:            01110010000010001011111111001100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010101110111011101010101100101101001001101010000110100   [Subkey: 3]
          - Input Half:       01110010000010001011111111001100
          - S-Box Result:     11011110111100101000101101010101   [per every group of 4-bits]
          - Split Into Two:   1101111011110010 [L] 1000101101010101 [R]
          - Swap Halves:      10001011010101011101111011110010
          - Bit Inversion:    01110100101010100010000100001101
          - Compressed Key:   01011011010110011110001101001000   [done by compression P-Box]
          - XOR with Key:     00101111111100111100001001000101

          - FUNCTION OUTPUT:  00101111111100111100001001000101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111101100100100101100101001000

       - FUNCTION OUTPUT:          00101111111100111100001001000101

       - Left XOR FUNCTION OUTPUT: 11010010011000011001101100001101

       - Next Round Left 32 Bits:  01110010000010001011111111001100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010010011000011001101100001101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110010000010001011111111001100

       - Right 32 Bits:            11010010011000011001101100001101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010101000100010001010101001101001011011001010111100101   [Subkey: 2]
          - Input Half:       11010010011000011001101100001101
          - S-Box Result:     01101110000010100011100011110110   [per every group of 4-bits]
          - Split Into Two:   0110111000001010 [L] 0011100011110110 [R]
          - Swap Halves:      00111000111101100110111000001010
          - Bit Inversion:    11000111000010011001000111110101
          - Compressed Key:   01011000000110000110100101111010   [done by compression P-Box]
          - XOR with Key:     10011111000100011111100010001111

          - FUNCTION OUTPUT:  10011111000100011111100010001111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110010000010001011111111001100

       - FUNCTION OUTPUT:          10011111000100011111100010001111

       - Left XOR FUNCTION OUTPUT: 11101101000110010100011101000011

       - Next Round Left 32 Bits:  11010010011000011001101100001101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101101000110010100011101000011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010010011000011001101100001101

       - Right 32 Bits:            11101101000110010100011101000011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101011101110111010101011001011010010011010100001101   [Subkey: 1]
          - Input Half:       11101101000110010100011101000011
          - S-Box Result:     11000110101000110111110101110001   [per every group of 4-bits]
          - Split Into Two:   1100011010100011 [L] 0111110101110001 [R]
          - Swap Halves:      01111101011100011100011010100011
          - Bit Inversion:    10000010100011100011100101011100
          - Compressed Key:   01011110110110100111100001011110   [done by compression P-Box]
          - XOR with Key:     11011100010101000100000100000010

          - FUNCTION OUTPUT:  11011100010101000100000100000010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010010011000011001101100001101

       - FUNCTION OUTPUT:          11011100010101000100000100000010

       - Left XOR FUNCTION OUTPUT: 00001110001101011101101000001111

       - Next Round Left 32 Bits:  11101101000110010100011101000011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001110001101011101101000001111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0000111000110101110110100000111111101101000110010100011101000011

 > Processed Block:     0000111000110101110110100000111111101101000110010100011101000011


Ciphertext Block 3: 0010001111100011000110011110110001100111110000000101101001100001

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00100011111000110001100111101100

       - Right 32 Bits:            01100111110000000101101001100001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000101010100110100101101100101011110010110010101000100   [Subkey: 16]
          - Input Half:       01100111110000000101101001100001
          - S-Box Result:     00001101010111111001010000001010   [per every group of 4-bits]
          - Split Into Two:   0000110101011111 [L] 1001010000001010 [R]
          - Swap Halves:      10010100000010100000110101011111
          - Bit Inversion:    01101011111101011111001010100000
          - Compressed Key:   00011000011010010111101001011000   [done by compression P-Box]
          - XOR with Key:     01110011100111001000100011111000

          - FUNCTION OUTPUT:  01110011100111001000100011111000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00100011111000110001100111101100

       - FUNCTION OUTPUT:          01110011100111001000100011111000

       - Left XOR FUNCTION OUTPUT: 01010000011111111001000100010100

       - Next Round Left 32 Bits:  01100111110000000101101001100001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01010000011111111001000100010100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01100111110000000101101001100001

       - Right 32 Bits:            01010000011111111001000100010100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011101010101100101101001001101010000110100110101011101   [Subkey: 15]
          - Input Half:       01010000011111111001000100010100
          - S-Box Result:     10011111110110110011101010100111   [per every group of 4-bits]
          - Split Into Two:   1001111111011011 [L] 0011101010100111 [R]
          - Swap Halves:      00111010101001111001111111011011
          - Bit Inversion:    11000101010110000110000000100100
          - Compressed Key:   11011010011110000101111001011110   [done by compression P-Box]
          - XOR with Key:     00011111001000000011111001111010

          - FUNCTION OUTPUT:  00011111001000000011111001111010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01100111110000000101101001100001

       - FUNCTION OUTPUT:          00011111001000000011111001111010

       - Left XOR FUNCTION OUTPUT: 01111000111000000110010000011011

       - Next Round Left 32 Bits:  01010000011111111001000100010100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01111000111000000110010000011011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01010000011111111001000100010100

       - Right 32 Bits:            01111000111000000110010000011011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010001010101001101001011011001010111100101100101010001   [Subkey: 14]
          - Input Half:       01111000111000000110010000011011
          - S-Box Result:     11010010110011110000011110101000   [per every group of 4-bits]
          - Split Into Two:   1101001011001111 [L] 0000011110101000 [R]
          - Swap Halves:      00000111101010001101001011001111
          - Bit Inversion:    11111000010101110010110100110000
          - Compressed Key:   01001010010111100101011000010010   [done by compression P-Box]
          - XOR with Key:     10110010000010010111101100100010

          - FUNCTION OUTPUT:  10110010000010010111101100100010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01010000011111111001000100010100

       - FUNCTION OUTPUT:          10110010000010010111101100100010

       - Left XOR FUNCTION OUTPUT: 11100010011101101110101000110110

       - Next Round Left 32 Bits:  01111000111000000110010000011011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100010011101101110101000110110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01111000111000000110010000011011

       - Right 32 Bits:            11100010011101101110101000110110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110111010101011001011010010011010100001101001101010111   [Subkey: 13]
          - Input Half:       11100010011101101110101000110110
          - S-Box Result:     11001110110100001100010000010000   [per every group of 4-bits]
          - Split Into Two:   1100111011010000 [L] 1100010000010000 [R]
          - Swap Halves:      11000100000100001100111011010000
          - Bit Inversion:    00111011111011110011000100101111
          - Compressed Key:   01111010000101100101001110011011   [done by compression P-Box]
          - XOR with Key:     01000001111110010110001010110100

          - FUNCTION OUTPUT:  01000001111110010110001010110100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01111000111000000110010000011011

       - FUNCTION OUTPUT:          01000001111110010110001010110100

       - Left XOR FUNCTION OUTPUT: 00111001000110010000011010101111

       - Next Round Left 32 Bits:  11100010011101101110101000110110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111001000110010000011010101111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100010011101101110101000110110

       - Right 32 Bits:            00111001000110010000011010101111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000100010101010011010010110110010101111001011001010100   [Subkey: 12]
          - Input Half:       00111001000110010000011010101111
          - S-Box Result:     00010011101000111111000001001011   [per every group of 4-bits]
          - Split Into Two:   0001001110100011 [L] 1111000001001011 [R]
          - Swap Halves:      11110000010010110001001110100011
          - Bit Inversion:    00001111101101001110110001011100
          - Compressed Key:   00011010100101110001110111001000   [done by compression P-Box]
          - XOR with Key:     00010101001000111111000110010100

          - FUNCTION OUTPUT:  00010101001000111111000110010100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100010011101101110101000110110

       - FUNCTION OUTPUT:          00010101001000111111000110010100

       - Left XOR FUNCTION OUTPUT: 11110111010101010001101110100010

       - Next Round Left 32 Bits:  00111001000110010000011010101111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110111010101010001101110100010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111001000110010000011010101111

       - Right 32 Bits:            11110111010101010001101110100010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011101110101010110010110100100110101000011010011010101   [Subkey: 11]
          - Input Half:       11110111010101010001101110100010
          - S-Box Result:     10111101100110011010100001001110   [per every group of 4-bits]
          - Split Into Two:   1011110110011001 [L] 1010100001001110 [R]
          - Swap Halves:      10101000010011101011110110011001
          - Bit Inversion:    01010111101100010100001001100110
          - Compressed Key:   11011010110001011001000001101010   [done by compression P-Box]
          - XOR with Key:     10001101011101001101001000001100

          - FUNCTION OUTPUT:  10001101011101001101001000001100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111001000110010000011010101111

       - FUNCTION OUTPUT:          10001101011101001101001000001100

       - Left XOR FUNCTION OUTPUT: 10110100011011011101010010100011

       - Next Round Left 32 Bits:  11110111010101010001101110100010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10110100011011011101010010100011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110111010101010001101110100010

       - Right 32 Bits:            10110100011011011101010010100011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010001000101010100110100101101100101011110010110010101   [Subkey: 10]
          - Input Half:       10110100011011011101010010100011
          - S-Box Result:     10000111000001100110011101000001   [per every group of 4-bits]
          - Split Into Two:   1000011100000110 [L] 0110011101000001 [R]
          - Swap Halves:      01100111010000011000011100000110
          - Bit Inversion:    10011000101111100111100011111001
          - Compressed Key:   01001010011000011100101101111010   [done by compression P-Box]
          - XOR with Key:     11010010110111111011001110000011

          - FUNCTION OUTPUT:  11010010110111111011001110000011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110111010101010001101110100010

       - FUNCTION OUTPUT:          11010010110111111011001110000011

       - Left XOR FUNCTION OUTPUT: 00100101100010101010100000100001

       - Next Round Left 32 Bits:  10110100011011011101010010100011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00100101100010101010100000100001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10110100011011011101010010100011

       - Right 32 Bits:            00100101100010101010100000100001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110111011101010101100101101001001101010000110100110101   [Subkey: 9]
          - Input Half:       00100101100010101010100000100001
          - S-Box Result:     11101001001001000100001011101010   [per every group of 4-bits]
          - Split Into Two:   1110100100100100 [L] 0100001011101010 [R]
          - Swap Halves:      01000010111010101110100100100100
          - Bit Inversion:    10111101000101010001011011011011
          - Compressed Key:   01111110011110010110100001011010   [done by compression P-Box]
          - XOR with Key:     11000011011011000111111010000001

          - FUNCTION OUTPUT:  11000011011011000111111010000001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10110100011011011101010010100011

       - FUNCTION OUTPUT:          11000011011011000111111010000001

       - Left XOR FUNCTION OUTPUT: 01110111000000011010101000100010

       - Next Round Left 32 Bits:  00100101100010101010100000100001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110111000000011010101000100010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00100101100010101010100000100001

       - Right 32 Bits:            01110111000000011010101000100010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000100010001010101001101001011011001010111100101100101   [Subkey: 8]
          - Input Half:       01110111000000011010101000100010
          - S-Box Result:     11011101111110100100010011101110   [per every group of 4-bits]
          - Split Into Two:   1101110111111010 [L] 0100010011101110 [R]
          - Swap Halves:      01000100111011101101110111111010
          - Bit Inversion:    10111011000100010010001000000101
          - Compressed Key:   00010010010110000111101000011010   [done by compression P-Box]
          - XOR with Key:     10101001010010010101100000011111

          - FUNCTION OUTPUT:  10101001010010010101100000011111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00100101100010101010100000100001

       - FUNCTION OUTPUT:          10101001010010010101100000011111

       - Left XOR FUNCTION OUTPUT: 10001100110000111111000000111110

       - Next Round Left 32 Bits:  01110111000000011010101000100010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001100110000111111000000111110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110111000000011010101000100010

       - Right 32 Bits:            10001100110000111111000000111110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011101110111010101011001011010010011010100001101001101   [Subkey: 7]
          - Input Half:       10001100110000111111000000111110
          - S-Box Result:     00100101010100011011111100011100   [per every group of 4-bits]
          - Split Into Two:   0010010101010001 [L] 1011111100011100 [R]
          - Swap Halves:      10111111000111000010010101010001
          - Bit Inversion:    01000000111000111101101010101110
          - Compressed Key:   11011011010110100001101010011110   [done by compression P-Box]
          - XOR with Key:     10011011101110011100000000110000

          - FUNCTION OUTPUT:  10011011101110011100000000110000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110111000000011010101000100010

       - FUNCTION OUTPUT:          10011011101110011100000000110000

       - Left XOR FUNCTION OUTPUT: 11101100101110000110101000010010

       - Next Round Left 32 Bits:  10001100110000111111000000111110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101100101110000110101000010010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001100110000111111000000111110

       - Right 32 Bits:            11101100101110000110101000010010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010001000100010101010011010010110110010101111001011001   [Subkey: 6]
          - Input Half:       11101100101110000110101000010010
          - S-Box Result:     11000101100000100000010010101110   [per every group of 4-bits]
          - Split Into Two:   1100010110000010 [L] 0000010010101110 [R]
          - Swap Halves:      00000100101011101100010110000010
          - Bit Inversion:    11111011010100010011101001111101
          - Compressed Key:   01001000010111101001101011000110   [done by compression P-Box]
          - XOR with Key:     10110011000011111010000010111011

          - FUNCTION OUTPUT:  10110011000011111010000010111011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001100110000111111000000111110

       - FUNCTION OUTPUT:          10110011000011111010000010111011

       - Left XOR FUNCTION OUTPUT: 00111111110011000101000010000101

       - Next Round Left 32 Bits:  11101100101110000110101000010010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111111110011000101000010000101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101100101110000110101000010010

       - Right 32 Bits:            00111111110011000101000010000101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010111011101110101010110010110100100110101000011010011   [Subkey: 5]
          - Input Half:       00111111110011000101000010000101
          - S-Box Result:     00011011010101011001111100101001   [per every group of 4-bits]
          - Split Into Two:   0001101101010101 [L] 1001111100101001 [R]
          - Swap Halves:      10011111001010010001101101010101
          - Bit Inversion:    01100000110101101110010010101010
          - Compressed Key:   01111110010101101000111000100011   [done by compression P-Box]
          - XOR with Key:     00011110100000000110101010001001

          - FUNCTION OUTPUT:  00011110100000000110101010001001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101100101110000110101000010010

       - FUNCTION OUTPUT:          00011110100000000110101010001001

       - Left XOR FUNCTION OUTPUT: 11110010001110000000000010011011

       - Next Round Left 32 Bits:  00111111110011000101000010000101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110010001110000000000010011011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111111110011000101000010000101

       - Right 32 Bits:            11110010001110000000000010011011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010100010001000101010100110100101101100101011110010110   [Subkey: 4]
          - Input Half:       11110010001110000000000010011011
          - S-Box Result:     10111110000100101111111100111000   [per every group of 4-bits]
          - Split Into Two:   1011111000010010 [L] 1111111100111000 [R]
          - Swap Halves:      11111111001110001011111000010010
          - Bit Inversion:    00000000110001110100000111101101
          - Compressed Key:   01010010010100111010011011111001   [done by compression P-Box]
          - XOR with Key:     01010010100101001110011100010100

          - FUNCTION OUTPUT:  01010010100101001110011100010100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111111110011000101000010000101

       - FUNCTION OUTPUT:          01010010100101001110011100010100

       - Left XOR FUNCTION OUTPUT: 01101101010110001011011110010001

       - Next Round Left 32 Bits:  11110010001110000000000010011011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101101010110001011011110010001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110010001110000000000010011011

       - Right 32 Bits:            01101101010110001011011110010001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010101110111011101010101100101101001001101010000110100   [Subkey: 3]
          - Input Half:       01101101010110001011011110010001
          - S-Box Result:     00000110100100101000110100111010   [per every group of 4-bits]
          - Split Into Two:   0000011010010010 [L] 1000110100111010 [R]
          - Swap Halves:      10001101001110100000011010010010
          - Bit Inversion:    01110010110001011111100101101101
          - Compressed Key:   01011011010110011110001101001000   [done by compression P-Box]
          - XOR with Key:     00101001100111000001101000100101

          - FUNCTION OUTPUT:  00101001100111000001101000100101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110010001110000000000010011011

       - FUNCTION OUTPUT:          00101001100111000001101000100101

       - Left XOR FUNCTION OUTPUT: 11011011101001000001101010111110

       - Next Round Left 32 Bits:  01101101010110001011011110010001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11011011101001000001101010111110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101101010110001011011110010001

       - Right 32 Bits:            11011011101001000001101010111110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010101000100010001010101001101001011011001010111100101   [Subkey: 2]
          - Input Half:       11011011101001000001101010111110
          - S-Box Result:     01101000010001111010010010001100   [per every group of 4-bits]
          - Split Into Two:   0110100001000111 [L] 1010010010001100 [R]
          - Swap Halves:      10100100100011000110100001000111
          - Bit Inversion:    01011011011100111001011110111000
          - Compressed Key:   01011000000110000110100101111010   [done by compression P-Box]
          - XOR with Key:     00000011011010111111111011000010

          - FUNCTION OUTPUT:  00000011011010111111111011000010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101101010110001011011110010001

       - FUNCTION OUTPUT:          00000011011010111111111011000010

       - Left XOR FUNCTION OUTPUT: 01101110001100110100100101010011

       - Next Round Left 32 Bits:  11011011101001000001101010111110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101110001100110100100101010011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11011011101001000001101010111110

       - Right 32 Bits:            01101110001100110100100101010011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101011101110111010101011001011010010011010100001101   [Subkey: 1]
          - Input Half:       01101110001100110100100101010011
          - S-Box Result:     00001100000100010111001110010001   [per every group of 4-bits]
          - Split Into Two:   0000110000010001 [L] 0111001110010001 [R]
          - Swap Halves:      01110011100100010000110000010001
          - Bit Inversion:    10001100011011101111001111101110
          - Compressed Key:   01011110110110100111100001011110   [done by compression P-Box]
          - XOR with Key:     11010010101101001000101110110000

          - FUNCTION OUTPUT:  11010010101101001000101110110000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11011011101001000001101010111110

       - FUNCTION OUTPUT:          11010010101101001000101110110000

       - Left XOR FUNCTION OUTPUT: 00001001000100001001000100001110

       - Next Round Left 32 Bits:  01101110001100110100100101010011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001001000100001001000100001110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0000100100010000100100010000111001101110001100110100100101010011

 > Processed Block:     0000100100010000100100010000111001101110001100110100100101010011


FINAL PROCESSED DATA BLOCKS: 0000001100010100100011010000000011111010000110100100001101011011,0000111000110101110110100000111111101101000110010100011101000011,0000100100010000100100010000111001101110001100110100100101010011,

BLOCKS IN ASCII:             ? ˙C[5⁄ÌGC	?n3IS

=========================================================================================================================
STAGE 2: DES [ENCRYPT] ==================================================================================================
=========================================================================================================================

56-bit key: meTripl
In Binary:  01101101011001010101010001110010011010010111000001101100

Subkeys:    Key i = Key (i - 1) [Shifted left by 1 and inverted]

Subkey 1  : 00100101001101010101011100011011001011010001111100100111
Subkey 2  : 10110101100101010101000111001001101001011100000110110001
Subkey 3  : 10010100110101010101110001101100101101000111110010011100
Subkey 4  : 11010110010101010100011100100110100101110000011011000110
Subkey 5  : 01010011010101010111000110110010110100011111001001110010
Subkey 6  : 01011001010101010001110010011010010111000001101100011011
Subkey 7  : 01001101010101011100011011001011010001111100100111001001
Subkey 8  : 01100101010101000111001001101001011100000110110001101101
Subkey 9  : 00110101010101110001101100101101000111110010011100100101
Subkey 10 : 10010101010100011100100110100101110000011011000110110101
Subkey 11 : 11010101010111000110110010110100011111001001110010010100
Subkey 12 : 01010101010001110010011010010111000001101100011011010110
Subkey 13 : 01010101011100011011001011010001111100100111001001010011
Subkey 14 : 01010101000111001001101001011100000110110001101101011001
Subkey 15 : 01010101110001101100101101000111110010011100100101001101
Subkey 16 : 01010100011100100110100101110000011011000110110101100101

S-BOX (4x4):
INPUT | OUTPUT
------|-------
0000  | 1111
0001  | 1010
0010  | 1110
0011  | 0001
0100  | 0111
0101  | 1001
0110  | 0000
0111  | 1101
1000  | 0010
1001  | 0011
1010  | 0100
1011  | 1000
1100  | 0101
1101  | 0110
1110  | 1100
1111  | 1011

P-BOX (7 bits compressed to 4 bits)
Bit at Position X goes to Position Y
X: | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
Y: | 4 | 3 | 1 | 2 | 1 | 4 | 3 |


Data to encrypt         : ? ˙C[5⁄ÌGC	?n3IS

Data padded with spaces : ? ˙C[5⁄ÌGC	?n3IS[Padded with '0' spaces]

Data in ASCII           : 3,20,141,0,250,26,67,91,14,53,218,15,237,25,71,67,9,16,145,14,110,51,73,83,

Data in Binary          : 00000011,00010100,10001101,00000000,11111010,00011010,01000011,01011011,00001110,00110101,11011010,00001111,11101101,00011001,01000111,01000011,00001001,00010000,10010001,00001110,01101110,00110011,01001001,01010011,

Data in 64-bit Blocks   : 0000001100010100100011010000000011111010000110100100001101011011,0000111000110101110110100000111111101101000110010100011101000011,0000100100010000100100010000111001101110001100110100100101010011,



<<<<<< PROCESSING IN 'ECB' MODE >>>>>>



Plaintext Block 1: 0000001100010100100011010000000011111010000110100100001101011011

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00000011000101001000110100000000

       - Right 32 Bits:            11111010000110100100001101011011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100101001101010101011100011011001011010001111100100111   [Subkey: 1]
          - Input Half:       11111010000110100100001101011011
          - S-Box Result:     10110100101001000111000110011000   [per every group of 4-bits]
          - Split Into Two:   1011010010100100 [L] 0111000110011000 [R]
          - Swap Halves:      01110001100110001011010010100100
          - Bit Inversion:    10001110011001110100101101011011
          - Compressed Key:   00011110010100100110100011011011   [done by compression P-Box]
          - XOR with Key:     10010000001101010010001110000000

          - FUNCTION OUTPUT:  10010000001101010010001110000000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00000011000101001000110100000000

       - FUNCTION OUTPUT:          10010000001101010010001110000000

       - Left XOR FUNCTION OUTPUT: 10010011001000011010111010000000

       - Next Round Left 32 Bits:  11111010000110100100001101011011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010011001000011010111010000000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111010000110100100001101011011

       - Right 32 Bits:            10010011001000011010111010000000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10110101100101010101000111001001101001011100000110110001   [Subkey: 2]
          - Input Half:       10010011001000011010111010000000
          - S-Box Result:     00110001111010100100110000101111   [per every group of 4-bits]
          - Split Into Two:   0011000111101010 [L] 0100110000101111 [R]
          - Swap Halves:      01001100001011110011000111101010
          - Bit Inversion:    10110011110100001100111000010101
          - Compressed Key:   01011010010111001110101100110010   [done by compression P-Box]
          - XOR with Key:     11101001100011000010010100100111

          - FUNCTION OUTPUT:  11101001100011000010010100100111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111010000110100100001101011011

       - FUNCTION OUTPUT:          11101001100011000010010100100111

       - Left XOR FUNCTION OUTPUT: 00010011100101100110011001111100

       - Next Round Left 32 Bits:  10010011001000011010111010000000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00010011100101100110011001111100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010011001000011010111010000000

       - Right 32 Bits:            00010011100101100110011001111100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100110101010101110001101100101101000111110010011100   [Subkey: 3]
          - Input Half:       00010011100101100110011001111100
          - S-Box Result:     10100001001100000000000011010101   [per every group of 4-bits]
          - Split Into Two:   1010000100110000 [L] 0000000011010101 [R]
          - Swap Halves:      00000000110101011010000100110000
          - Bit Inversion:    11111111001010100101111011001111
          - Compressed Key:   01011010011110011010001001101100   [done by compression P-Box]
          - XOR with Key:     10100101010100111111110010100011

          - FUNCTION OUTPUT:  10100101010100111111110010100011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010011001000011010111010000000

       - FUNCTION OUTPUT:          10100101010100111111110010100011

       - Left XOR FUNCTION OUTPUT: 00110110011100100101001000100011

       - Next Round Left 32 Bits:  00010011100101100110011001111100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00110110011100100101001000100011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00010011100101100110011001111100

       - Right 32 Bits:            00110110011100100101001000100011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010110010101010100011100100110100101110000011011000110   [Subkey: 4]
          - Input Half:       00110110011100100101001000100011
          - S-Box Result:     00010000110111101001111011100001   [per every group of 4-bits]
          - Split Into Two:   0001000011011110 [L] 1001111011100001 [R]
          - Swap Halves:      10011110111000010001000011011110
          - Bit Inversion:    01100001000111101110111100100001
          - Compressed Key:   01111010010000011000110011101001   [done by compression P-Box]
          - XOR with Key:     00011011010111110110001111001000

          - FUNCTION OUTPUT:  00011011010111110110001111001000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00010011100101100110011001111100

       - FUNCTION OUTPUT:          00011011010111110110001111001000

       - Left XOR FUNCTION OUTPUT: 00001000110010010000010110110100

       - Next Round Left 32 Bits:  00110110011100100101001000100011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001000110010010000010110110100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00110110011100100101001000100011

       - Right 32 Bits:            00001000110010010000010110110100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010011010101010111000110110010110100011111001001110010   [Subkey: 5]
          - Input Half:       00001000110010010000010110110100
          - S-Box Result:     11110010010100111111100110000111   [per every group of 4-bits]
          - Split Into Two:   1111001001010011 [L] 1111100110000111 [R]
          - Swap Halves:      11111001100001111111001001010011
          - Bit Inversion:    00000110011110000000110110101100
          - Compressed Key:   01101010110101111001101110000001   [done by compression P-Box]
          - XOR with Key:     01101100101011111001011000101101

          - FUNCTION OUTPUT:  01101100101011111001011000101101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00110110011100100101001000100011

       - FUNCTION OUTPUT:          01101100101011111001011000101101

       - Left XOR FUNCTION OUTPUT: 01011010110111011100010000001110

       - Next Round Left 32 Bits:  00001000110010010000010110110100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011010110111011100010000001110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001000110010010000010110110100

       - Right 32 Bits:            01011010110111011100010000001110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011001010101010001110010011010010111000001101100011011   [Subkey: 6]
          - Input Half:       01011010110111011100010000001110
          - S-Box Result:     10010100011001100101011111111100   [per every group of 4-bits]
          - Split Into Two:   1001010001100110 [L] 0101011111111100 [R]
          - Swap Halves:      01010111111111001001010001100110
          - Bit Inversion:    10101000000000110110101110011001
          - Compressed Key:   11001010001101100001000010010111   [done by compression P-Box]
          - XOR with Key:     01100010001101010111101100001110

          - FUNCTION OUTPUT:  01100010001101010111101100001110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001000110010010000010110110100

       - FUNCTION OUTPUT:          01100010001101010111101100001110

       - Left XOR FUNCTION OUTPUT: 01101010111111000111111010111010

       - Next Round Left 32 Bits:  01011010110111011100010000001110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101010111111000111111010111010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011010110111011100010000001110

       - Right 32 Bits:            01101010111111000111111010111010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001101010101011100011011001011010001111100100111001001   [Subkey: 7]
          - Input Half:       01101010111111000111111010111010
          - S-Box Result:     00000100101101011101110010000100   [per every group of 4-bits]
          - Split Into Two:   0000010010110101 [L] 1101110010000100 [R]
          - Swap Halves:      11011100100001000000010010110101
          - Bit Inversion:    00100011011110111111101101001010
          - Compressed Key:   10011010010011000101111100110110   [done by compression P-Box]
          - XOR with Key:     10111001001101111010010001111100

          - FUNCTION OUTPUT:  10111001001101111010010001111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011010110111011100010000001110

       - FUNCTION OUTPUT:          10111001001101111010010001111100

       - Left XOR FUNCTION OUTPUT: 11100011111010100110000001110010

       - Next Round Left 32 Bits:  01101010111111000111111010111010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100011111010100110000001110010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101010111111000111111010111010

       - Right 32 Bits:            11100011111010100110000001110010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100101010101000111001001101001011100000110110001101101   [Subkey: 8]
          - Input Half:       11100011111010100110000001110010
          - S-Box Result:     11000001110001000000111111011110   [per every group of 4-bits]
          - Split Into Two:   1100000111000100 [L] 0000111111011110 [R]
          - Swap Halves:      00001111110111101100000111000100
          - Bit Inversion:    11110000001000010011111000111011
          - Compressed Key:   00011010110110010111001001001110   [done by compression P-Box]
          - XOR with Key:     11101010111110000100110001110101

          - FUNCTION OUTPUT:  11101010111110000100110001110101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101010111111000111111010111010

       - FUNCTION OUTPUT:          11101010111110000100110001110101

       - Left XOR FUNCTION OUTPUT: 10000000000001000011001011001111

       - Next Round Left 32 Bits:  11100011111010100110000001110010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10000000000001000011001011001111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100011111010100110000001110010

       - Right 32 Bits:            10000000000001000011001011001111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101010101110001101100101101000111110010011100100101   [Subkey: 9]
          - Input Half:       10000000000001000011001011001111
          - S-Box Result:     00101111111101110001111001011011   [per every group of 4-bits]
          - Split Into Two:   0010111111110111 [L] 0001111001011011 [R]
          - Swap Halves:      00011110010110110010111111110111
          - Bit Inversion:    11100001101001001101000000001000
          - Compressed Key:   01011010001100010100110011011010   [done by compression P-Box]
          - XOR with Key:     10111011100101011001110011010010

          - FUNCTION OUTPUT:  10111011100101011001110011010010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100011111010100110000001110010

       - FUNCTION OUTPUT:          10111011100101011001110011010010

       - Left XOR FUNCTION OUTPUT: 01011000011111111111110010100000

       - Next Round Left 32 Bits:  10000000000001000011001011001111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011000011111111111110010100000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10000000000001000011001011001111

       - Right 32 Bits:            01011000011111111111110010100000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010101010100011100100110100101110000011011000110110101   [Subkey: 10]
          - Input Half:       01011000011111111111110010100000
          - S-Box Result:     10010010110110111011010101001111   [per every group of 4-bits]
          - Split Into Two:   1001001011011011 [L] 1011010101001111 [R]
          - Swap Halves:      10110101010011111001001011011011
          - Bit Inversion:    01001010101100000110110100100100
          - Compressed Key:   01011000011001011101100100111010   [done by compression P-Box]
          - XOR with Key:     00010010110101011011010000011110

          - FUNCTION OUTPUT:  00010010110101011011010000011110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10000000000001000011001011001111

       - FUNCTION OUTPUT:          00010010110101011011010000011110

       - Left XOR FUNCTION OUTPUT: 10010010110100011000011011010001

       - Next Round Left 32 Bits:  01011000011111111111110010100000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010010110100011000011011010001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011000011111111111110010100000

       - Right 32 Bits:            10010010110100011000011011010001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010101010111000110110010110100011111001001110010010100   [Subkey: 11]
          - Input Half:       10010010110100011000011011010001
          - S-Box Result:     00111110011010100010000001101010   [per every group of 4-bits]
          - Split Into Two:   0011111001101010 [L] 0010000001101010 [R]
          - Swap Halves:      00100000011010100011111001101010
          - Bit Inversion:    11011111100101011100000110010101
          - Compressed Key:   01011011111001110011000101101000   [done by compression P-Box]
          - XOR with Key:     10000100011100101111000011111101

          - FUNCTION OUTPUT:  10000100011100101111000011111101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011000011111111111110010100000

       - FUNCTION OUTPUT:          10000100011100101111000011111101

       - Left XOR FUNCTION OUTPUT: 11011100000011010000110001011101

       - Next Round Left 32 Bits:  10010010110100011000011011010001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11011100000011010000110001011101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010010110100011000011011010001

       - Right 32 Bits:            11011100000011010000110001011101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101010001110010011010010111000001101100011011010110   [Subkey: 12]
          - Input Half:       11011100000011010000110001011101
          - S-Box Result:     01100101111101101111010110010110   [per every group of 4-bits]
          - Split Into Two:   0110010111110110 [L] 1111010110010110 [R]
          - Swap Halves:      11110101100101100110010111110110
          - Bit Inversion:    00001010011010011001101000001001
          - Compressed Key:   01010010100001100100011111101001   [done by compression P-Box]
          - XOR with Key:     01011000111011111101110111100000

          - FUNCTION OUTPUT:  01011000111011111101110111100000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010010110100011000011011010001

       - FUNCTION OUTPUT:          01011000111011111101110111100000

       - Left XOR FUNCTION OUTPUT: 11001010001111100101101100110001

       - Next Round Left 32 Bits:  11011100000011010000110001011101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001010001111100101101100110001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11011100000011010000110001011101

       - Right 32 Bits:            11001010001111100101101100110001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101011100011011001011010001111100100111001001010011   [Subkey: 13]
          - Input Half:       11001010001111100101101100110001
          - S-Box Result:     01010100000111001001100000011010   [per every group of 4-bits]
          - Split Into Two:   0101010000011100 [L] 1001100000011010 [R]
          - Swap Halves:      10011000000110100101010000011100
          - Bit Inversion:    01100111111001011010101111100011
          - Compressed Key:   01011100100111101111011010000011   [done by compression P-Box]
          - XOR with Key:     00111011011110110101110101100000

          - FUNCTION OUTPUT:  00111011011110110101110101100000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11011100000011010000110001011101

       - FUNCTION OUTPUT:          00111011011110110101110101100000

       - Left XOR FUNCTION OUTPUT: 11100111011101100101000100111101

       - Next Round Left 32 Bits:  11001010001111100101101100110001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100111011101100101000100111101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11001010001111100101101100110001

       - Right 32 Bits:            11100111011101100101000100111101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101000111001001101001011100000110110001101101011001   [Subkey: 14]
          - Input Half:       11100111011101100101000100111101
          - S-Box Result:     11001101110100001001101000010110   [per every group of 4-bits]
          - Split Into Two:   1100110111010000 [L] 1001101000010110 [R]
          - Swap Halves:      10011010000101101100110111010000
          - Bit Inversion:    01100101111010010011001000101111
          - Compressed Key:   01011011001110100000110010010110   [done by compression P-Box]
          - XOR with Key:     00111110110100110011111010111001

          - FUNCTION OUTPUT:  00111110110100110011111010111001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11001010001111100101101100110001

       - FUNCTION OUTPUT:          00111110110100110011111010111001

       - Left XOR FUNCTION OUTPUT: 11110100111011010110010110001000

       - Next Round Left 32 Bits:  11100111011101100101000100111101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110100111011010110010110001000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100111011101100101000100111101

       - Right 32 Bits:            11110100111011010110010110001000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101110001101100101101000111110010011100100101001101   [Subkey: 15]
          - Input Half:       11110100111011010110010110001000
          - S-Box Result:     10110111110001100000100100100010   [per every group of 4-bits]
          - Split Into Two:   1011011111000110 [L] 0000100100100010 [R]
          - Swap Halves:      00001001001000101011011111000110
          - Bit Inversion:    11110110110111010100100000111001
          - Compressed Key:   01010010011010001101101100011110   [done by compression P-Box]
          - XOR with Key:     10100100101101011001001100100111

          - FUNCTION OUTPUT:  10100100101101011001001100100111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100111011101100101000100111101

       - FUNCTION OUTPUT:          10100100101101011001001100100111

       - Left XOR FUNCTION OUTPUT: 01000011110000111100001000011010

       - Next Round Left 32 Bits:  11110100111011010110010110001000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000011110000111100001000011010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110100111011010110010110001000

       - Right 32 Bits:            01000011110000111100001000011010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010100011100100110100101110000011011000110110101100101   [Subkey: 16]
          - Input Half:       01000011110000111100001000011010
          - S-Box Result:     01110001010100010101111010100100   [per every group of 4-bits]
          - Split Into Two:   0111000101010001 [L] 0101111010100100 [R]
          - Swap Halves:      01011110101001000111000101010001
          - Bit Inversion:    10100001010110111000111010101110
          - Compressed Key:   01011100111010110011001001011010   [done by compression P-Box]
          - XOR with Key:     11111101101100001011110011110100

          - FUNCTION OUTPUT:  11111101101100001011110011110100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110100111011010110010110001000

       - FUNCTION OUTPUT:          11111101101100001011110011110100

       - Left XOR FUNCTION OUTPUT: 00001001010111011101100101111100

       - Next Round Left 32 Bits:  01000011110000111100001000011010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001001010111011101100101111100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0000100101011101110110010111110001000011110000111100001000011010

 > Processed Block:     0000100101011101110110010111110001000011110000111100001000011010



Plaintext Block 2: 0000111000110101110110100000111111101101000110010100011101000011

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001110001101011101101000001111

       - Right 32 Bits:            11101101000110010100011101000011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100101001101010101011100011011001011010001111100100111   [Subkey: 1]
          - Input Half:       11101101000110010100011101000011
          - S-Box Result:     11000110101000110111110101110001   [per every group of 4-bits]
          - Split Into Two:   1100011010100011 [L] 0111110101110001 [R]
          - Swap Halves:      01111101011100011100011010100011
          - Bit Inversion:    10000010100011100011100101011100
          - Compressed Key:   00011110010100100110100011011011   [done by compression P-Box]
          - XOR with Key:     10011100110111000101000110000111

          - FUNCTION OUTPUT:  10011100110111000101000110000111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001110001101011101101000001111

       - FUNCTION OUTPUT:          10011100110111000101000110000111

       - Left XOR FUNCTION OUTPUT: 10010010111010011000101110001000

       - Next Round Left 32 Bits:  11101101000110010100011101000011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010010111010011000101110001000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101101000110010100011101000011

       - Right 32 Bits:            10010010111010011000101110001000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10110101100101010101000111001001101001011100000110110001   [Subkey: 2]
          - Input Half:       10010010111010011000101110001000
          - S-Box Result:     00111110110000110010100000100010   [per every group of 4-bits]
          - Split Into Two:   0011111011000011 [L] 0010100000100010 [R]
          - Swap Halves:      00101000001000100011111011000011
          - Bit Inversion:    11010111110111011100000100111100
          - Compressed Key:   01011010010111001110101100110010   [done by compression P-Box]
          - XOR with Key:     10001101100000010010101000001110

          - FUNCTION OUTPUT:  10001101100000010010101000001110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101101000110010100011101000011

       - FUNCTION OUTPUT:          10001101100000010010101000001110

       - Left XOR FUNCTION OUTPUT: 01100000100110000110110101001101

       - Next Round Left 32 Bits:  10010010111010011000101110001000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01100000100110000110110101001101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010010111010011000101110001000

       - Right 32 Bits:            01100000100110000110110101001101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100110101010101110001101100101101000111110010011100   [Subkey: 3]
          - Input Half:       01100000100110000110110101001101
          - S-Box Result:     00001111001100100000011001110110   [per every group of 4-bits]
          - Split Into Two:   0000111100110010 [L] 0000011001110110 [R]
          - Swap Halves:      00000110011101100000111100110010
          - Bit Inversion:    11111001100010011111000011001101
          - Compressed Key:   01011010011110011010001001101100   [done by compression P-Box]
          - XOR with Key:     10100011111100000101001010100001

          - FUNCTION OUTPUT:  10100011111100000101001010100001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010010111010011000101110001000

       - FUNCTION OUTPUT:          10100011111100000101001010100001

       - Left XOR FUNCTION OUTPUT: 00110001000110011101100100101001

       - Next Round Left 32 Bits:  01100000100110000110110101001101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00110001000110011101100100101001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01100000100110000110110101001101

       - Right 32 Bits:            00110001000110011101100100101001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010110010101010100011100100110100101110000011011000110   [Subkey: 4]
          - Input Half:       00110001000110011101100100101001
          - S-Box Result:     00011010101000110110001111100011   [per every group of 4-bits]
          - Split Into Two:   0001101010100011 [L] 0110001111100011 [R]
          - Swap Halves:      01100011111000110001101010100011
          - Bit Inversion:    10011100000111001110010101011100
          - Compressed Key:   01111010010000011000110011101001   [done by compression P-Box]
          - XOR with Key:     11100110010111010110100110110101

          - FUNCTION OUTPUT:  11100110010111010110100110110101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01100000100110000110110101001101

       - FUNCTION OUTPUT:          11100110010111010110100110110101

       - Left XOR FUNCTION OUTPUT: 10000110110001010000010011111000

       - Next Round Left 32 Bits:  00110001000110011101100100101001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10000110110001010000010011111000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00110001000110011101100100101001

       - Right 32 Bits:            10000110110001010000010011111000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010011010101010111000110110010110100011111001001110010   [Subkey: 5]
          - Input Half:       10000110110001010000010011111000
          - S-Box Result:     00100000010110011111011110110010   [per every group of 4-bits]
          - Split Into Two:   0010000001011001 [L] 1111011110110010 [R]
          - Swap Halves:      11110111101100100010000001011001
          - Bit Inversion:    00001000010011011101111110100110
          - Compressed Key:   01101010110101111001101110000001   [done by compression P-Box]
          - XOR with Key:     01100010100110100100010000100111

          - FUNCTION OUTPUT:  01100010100110100100010000100111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00110001000110011101100100101001

       - FUNCTION OUTPUT:          01100010100110100100010000100111

       - Left XOR FUNCTION OUTPUT: 01010011100000111001110100001110

       - Next Round Left 32 Bits:  10000110110001010000010011111000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01010011100000111001110100001110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10000110110001010000010011111000

       - Right 32 Bits:            01010011100000111001110100001110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011001010101010001110010011010010111000001101100011011   [Subkey: 6]
          - Input Half:       01010011100000111001110100001110
          - S-Box Result:     10010001001000010011011011111100   [per every group of 4-bits]
          - Split Into Two:   1001000100100001 [L] 0011011011111100 [R]
          - Swap Halves:      00110110111111001001000100100001
          - Bit Inversion:    11001001000000110110111011011110
          - Compressed Key:   11001010001101100001000010010111   [done by compression P-Box]
          - XOR with Key:     00000011001101010111111001001001

          - FUNCTION OUTPUT:  00000011001101010111111001001001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10000110110001010000010011111000

       - FUNCTION OUTPUT:          00000011001101010111111001001001

       - Left XOR FUNCTION OUTPUT: 10000101111100000111101010110001

       - Next Round Left 32 Bits:  01010011100000111001110100001110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10000101111100000111101010110001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01010011100000111001110100001110

       - Right 32 Bits:            10000101111100000111101010110001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001101010101011100011011001011010001111100100111001001   [Subkey: 7]
          - Input Half:       10000101111100000111101010110001
          - S-Box Result:     00101001101111111101010010001010   [per every group of 4-bits]
          - Split Into Two:   0010100110111111 [L] 1101010010001010 [R]
          - Swap Halves:      11010100100010100010100110111111
          - Bit Inversion:    00101011011101011101011001000000
          - Compressed Key:   10011010010011000101111100110110   [done by compression P-Box]
          - XOR with Key:     10110001001110011000100101110110

          - FUNCTION OUTPUT:  10110001001110011000100101110110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01010011100000111001110100001110

       - FUNCTION OUTPUT:          10110001001110011000100101110110

       - Left XOR FUNCTION OUTPUT: 11100010101110100001010001111000

       - Next Round Left 32 Bits:  10000101111100000111101010110001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100010101110100001010001111000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10000101111100000111101010110001

       - Right 32 Bits:            11100010101110100001010001111000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100101010101000111001001101001011100000110110001101101   [Subkey: 8]
          - Input Half:       11100010101110100001010001111000
          - S-Box Result:     11001110100001001010011111010010   [per every group of 4-bits]
          - Split Into Two:   1100111010000100 [L] 1010011111010010 [R]
          - Swap Halves:      10100111110100101100111010000100
          - Bit Inversion:    01011000001011010011000101111011
          - Compressed Key:   00011010110110010111001001001110   [done by compression P-Box]
          - XOR with Key:     01000010111101000100001100110101

          - FUNCTION OUTPUT:  01000010111101000100001100110101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10000101111100000111101010110001

       - FUNCTION OUTPUT:          01000010111101000100001100110101

       - Left XOR FUNCTION OUTPUT: 11000111000001000011100110000100

       - Next Round Left 32 Bits:  11100010101110100001010001111000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000111000001000011100110000100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100010101110100001010001111000

       - Right 32 Bits:            11000111000001000011100110000100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101010101110001101100101101000111110010011100100101   [Subkey: 9]
          - Input Half:       11000111000001000011100110000100
          - S-Box Result:     01011101111101110001001100100111   [per every group of 4-bits]
          - Split Into Two:   0101110111110111 [L] 0001001100100111 [R]
          - Swap Halves:      00010011001001110101110111110111
          - Bit Inversion:    11101100110110001010001000001000
          - Compressed Key:   01011010001100010100110011011010   [done by compression P-Box]
          - XOR with Key:     10110110111010011110111011010010

          - FUNCTION OUTPUT:  10110110111010011110111011010010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100010101110100001010001111000

       - FUNCTION OUTPUT:          10110110111010011110111011010010

       - Left XOR FUNCTION OUTPUT: 01010100010100111111101010101010

       - Next Round Left 32 Bits:  11000111000001000011100110000100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01010100010100111111101010101010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000111000001000011100110000100

       - Right 32 Bits:            01010100010100111111101010101010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010101010100011100100110100101110000011011000110110101   [Subkey: 10]
          - Input Half:       01010100010100111111101010101010
          - S-Box Result:     10010111100100011011010001000100   [per every group of 4-bits]
          - Split Into Two:   1001011110010001 [L] 1011010001000100 [R]
          - Swap Halves:      10110100010001001001011110010001
          - Bit Inversion:    01001011101110110110100001101110
          - Compressed Key:   01011000011001011101100100111010   [done by compression P-Box]
          - XOR with Key:     00010011110111101011000101010100

          - FUNCTION OUTPUT:  00010011110111101011000101010100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000111000001000011100110000100

       - FUNCTION OUTPUT:          00010011110111101011000101010100

       - Left XOR FUNCTION OUTPUT: 11010100110110101000100011010000

       - Next Round Left 32 Bits:  01010100010100111111101010101010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010100110110101000100011010000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01010100010100111111101010101010

       - Right 32 Bits:            11010100110110101000100011010000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010101010111000110110010110100011111001001110010010100   [Subkey: 11]
          - Input Half:       11010100110110101000100011010000
          - S-Box Result:     01100111011001000010001001101111   [per every group of 4-bits]
          - Split Into Two:   0110011101100100 [L] 0010001001101111 [R]
          - Swap Halves:      00100010011011110110011101100100
          - Bit Inversion:    11011101100100001001100010011011
          - Compressed Key:   01011011111001110011000101101000   [done by compression P-Box]
          - XOR with Key:     10000110011101111010100111110011

          - FUNCTION OUTPUT:  10000110011101111010100111110011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01010100010100111111101010101010

       - FUNCTION OUTPUT:          10000110011101111010100111110011

       - Left XOR FUNCTION OUTPUT: 11010010001001000101001101011001

       - Next Round Left 32 Bits:  11010100110110101000100011010000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010010001001000101001101011001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010100110110101000100011010000

       - Right 32 Bits:            11010010001001000101001101011001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101010001110010011010010111000001101100011011010110   [Subkey: 12]
          - Input Half:       11010010001001000101001101011001
          - S-Box Result:     01101110111001111001000110010011   [per every group of 4-bits]
          - Split Into Two:   0110111011100111 [L] 1001000110010011 [R]
          - Swap Halves:      10010001100100110110111011100111
          - Bit Inversion:    01101110011011001001000100011000
          - Compressed Key:   01010010100001100100011111101001   [done by compression P-Box]
          - XOR with Key:     00111100111010101101011011110001

          - FUNCTION OUTPUT:  00111100111010101101011011110001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010100110110101000100011010000

       - FUNCTION OUTPUT:          00111100111010101101011011110001

       - Left XOR FUNCTION OUTPUT: 11101000001100000101111000100001

       - Next Round Left 32 Bits:  11010010001001000101001101011001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101000001100000101111000100001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010010001001000101001101011001

       - Right 32 Bits:            11101000001100000101111000100001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101011100011011001011010001111100100111001001010011   [Subkey: 13]
          - Input Half:       11101000001100000101111000100001
          - S-Box Result:     11000010000111111001110011101010   [per every group of 4-bits]
          - Split Into Two:   1100001000011111 [L] 1001110011101010 [R]
          - Swap Halves:      10011100111010101100001000011111
          - Bit Inversion:    01100011000101010011110111100000
          - Compressed Key:   01011100100111101111011010000011   [done by compression P-Box]
          - XOR with Key:     00111111100010111100101101100011

          - FUNCTION OUTPUT:  00111111100010111100101101100011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010010001001000101001101011001

       - FUNCTION OUTPUT:          00111111100010111100101101100011

       - Left XOR FUNCTION OUTPUT: 11101101101011111001100000111010

       - Next Round Left 32 Bits:  11101000001100000101111000100001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101101101011111001100000111010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101000001100000101111000100001

       - Right 32 Bits:            11101101101011111001100000111010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101000111001001101001011100000110110001101101011001   [Subkey: 14]
          - Input Half:       11101101101011111001100000111010
          - S-Box Result:     11000110010010110011001000010100   [per every group of 4-bits]
          - Split Into Two:   1100011001001011 [L] 0011001000010100 [R]
          - Swap Halves:      00110010000101001100011001001011
          - Bit Inversion:    11001101111010110011100110110100
          - Compressed Key:   01011011001110100000110010010110   [done by compression P-Box]
          - XOR with Key:     10010110110100010011010100100010

          - FUNCTION OUTPUT:  10010110110100010011010100100010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101000001100000101111000100001

       - FUNCTION OUTPUT:          10010110110100010011010100100010

       - Left XOR FUNCTION OUTPUT: 01111110111000010110101100000011

       - Next Round Left 32 Bits:  11101101101011111001100000111010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01111110111000010110101100000011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101101101011111001100000111010

       - Right 32 Bits:            01111110111000010110101100000011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101110001101100101101000111110010011100100101001101   [Subkey: 15]
          - Input Half:       01111110111000010110101100000011
          - S-Box Result:     11011100110010100000100011110001   [per every group of 4-bits]
          - Split Into Two:   1101110011001010 [L] 0000100011110001 [R]
          - Swap Halves:      00001000111100011101110011001010
          - Bit Inversion:    11110111000011100010001100110101
          - Compressed Key:   01010010011010001101101100011110   [done by compression P-Box]
          - XOR with Key:     10100101011001101111100000101011

          - FUNCTION OUTPUT:  10100101011001101111100000101011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101101101011111001100000111010

       - FUNCTION OUTPUT:          10100101011001101111100000101011

       - Left XOR FUNCTION OUTPUT: 01001000110010010110000000010001

       - Next Round Left 32 Bits:  01111110111000010110101100000011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001000110010010110000000010001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01111110111000010110101100000011

       - Right 32 Bits:            01001000110010010110000000010001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010100011100100110100101110000011011000110110101100101   [Subkey: 16]
          - Input Half:       01001000110010010110000000010001
          - S-Box Result:     01110010010100110000111110101010   [per every group of 4-bits]
          - Split Into Two:   0111001001010011 [L] 0000111110101010 [R]
          - Swap Halves:      00001111101010100111001001010011
          - Bit Inversion:    11110000010101011000110110101100
          - Compressed Key:   01011100111010110011001001011010   [done by compression P-Box]
          - XOR with Key:     10101100101111101011111111110110

          - FUNCTION OUTPUT:  10101100101111101011111111110110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01111110111000010110101100000011

       - FUNCTION OUTPUT:          10101100101111101011111111110110

       - Left XOR FUNCTION OUTPUT: 11010010010111111101010011110101

       - Next Round Left 32 Bits:  01001000110010010110000000010001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010010010111111101010011110101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 1101001001011111110101001111010101001000110010010110000000010001

 > Processed Block:     1101001001011111110101001111010101001000110010010110000000010001



Plaintext Block 3: 0000100100010000100100010000111001101110001100110100100101010011

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001001000100001001000100001110

       - Right 32 Bits:            01101110001100110100100101010011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100101001101010101011100011011001011010001111100100111   [Subkey: 1]
          - Input Half:       01101110001100110100100101010011
          - S-Box Result:     00001100000100010111001110010001   [per every group of 4-bits]
          - Split Into Two:   0000110000010001 [L] 0111001110010001 [R]
          - Swap Halves:      01110011100100010000110000010001
          - Bit Inversion:    10001100011011101111001111101110
          - Compressed Key:   00011110010100100110100011011011   [done by compression P-Box]
          - XOR with Key:     10010010001111001001101100110101

          - FUNCTION OUTPUT:  10010010001111001001101100110101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001001000100001001000100001110

       - FUNCTION OUTPUT:          10010010001111001001101100110101

       - Left XOR FUNCTION OUTPUT: 10011011001011000000101000111011

       - Next Round Left 32 Bits:  01101110001100110100100101010011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011011001011000000101000111011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101110001100110100100101010011

       - Right 32 Bits:            10011011001011000000101000111011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10110101100101010101000111001001101001011100000110110001   [Subkey: 2]
          - Input Half:       10011011001011000000101000111011
          - S-Box Result:     00111000111001011111010000011000   [per every group of 4-bits]
          - Split Into Two:   0011100011100101 [L] 1111010000011000 [R]
          - Swap Halves:      11110100000110000011100011100101
          - Bit Inversion:    00001011111001111100011100011010
          - Compressed Key:   01011010010111001110101100110010   [done by compression P-Box]
          - XOR with Key:     01010001101110110010110000101000

          - FUNCTION OUTPUT:  01010001101110110010110000101000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101110001100110100100101010011

       - FUNCTION OUTPUT:          01010001101110110010110000101000

       - Left XOR FUNCTION OUTPUT: 00111111100010000110010101111011

       - Next Round Left 32 Bits:  10011011001011000000101000111011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111111100010000110010101111011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011011001011000000101000111011

       - Right 32 Bits:            00111111100010000110010101111011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100110101010101110001101100101101000111110010011100   [Subkey: 3]
          - Input Half:       00111111100010000110010101111011
          - S-Box Result:     00011011001000100000100111011000   [per every group of 4-bits]
          - Split Into Two:   0001101100100010 [L] 0000100111011000 [R]
          - Swap Halves:      00001001110110000001101100100010
          - Bit Inversion:    11110110001001111110010011011101
          - Compressed Key:   01011010011110011010001001101100   [done by compression P-Box]
          - XOR with Key:     10101100010111100100011010110001

          - FUNCTION OUTPUT:  10101100010111100100011010110001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011011001011000000101000111011

       - FUNCTION OUTPUT:          10101100010111100100011010110001

       - Left XOR FUNCTION OUTPUT: 00110111011100100100110010001010

       - Next Round Left 32 Bits:  00111111100010000110010101111011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00110111011100100100110010001010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111111100010000110010101111011

       - Right 32 Bits:            00110111011100100100110010001010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010110010101010100011100100110100101110000011011000110   [Subkey: 4]
          - Input Half:       00110111011100100100110010001010
          - S-Box Result:     00011101110111100111010100100100   [per every group of 4-bits]
          - Split Into Two:   0001110111011110 [L] 0111010100100100 [R]
          - Swap Halves:      01110101001001000001110111011110
          - Bit Inversion:    10001010110110111110001000100001
          - Compressed Key:   01111010010000011000110011101001   [done by compression P-Box]
          - XOR with Key:     11110000100110100110111011001000

          - FUNCTION OUTPUT:  11110000100110100110111011001000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111111100010000110010101111011

       - FUNCTION OUTPUT:          11110000100110100110111011001000

       - Left XOR FUNCTION OUTPUT: 11001111000100100000101110110011

       - Next Round Left 32 Bits:  00110111011100100100110010001010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001111000100100000101110110011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00110111011100100100110010001010

       - Right 32 Bits:            11001111000100100000101110110011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010011010101010111000110110010110100011111001001110010   [Subkey: 5]
          - Input Half:       11001111000100100000101110110011
          - S-Box Result:     01011011101011101111100010000001   [per every group of 4-bits]
          - Split Into Two:   0101101110101110 [L] 1111100010000001 [R]
          - Swap Halves:      11111000100000010101101110101110
          - Bit Inversion:    00000111011111101010010001010001
          - Compressed Key:   01101010110101111001101110000001   [done by compression P-Box]
          - XOR with Key:     01101101101010010011111111010000

          - FUNCTION OUTPUT:  01101101101010010011111111010000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00110111011100100100110010001010

       - FUNCTION OUTPUT:          01101101101010010011111111010000

       - Left XOR FUNCTION OUTPUT: 01011010110110110111001101011010

       - Next Round Left 32 Bits:  11001111000100100000101110110011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011010110110110111001101011010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11001111000100100000101110110011

       - Right 32 Bits:            01011010110110110111001101011010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011001010101010001110010011010010111000001101100011011   [Subkey: 6]
          - Input Half:       01011010110110110111001101011010
          - S-Box Result:     10010100011010001101000110010100   [per every group of 4-bits]
          - Split Into Two:   1001010001101000 [L] 1101000110010100 [R]
          - Swap Halves:      11010001100101001001010001101000
          - Bit Inversion:    00101110011010110110101110010111
          - Compressed Key:   11001010001101100001000010010111   [done by compression P-Box]
          - XOR with Key:     11100100010111010111101100000000

          - FUNCTION OUTPUT:  11100100010111010111101100000000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11001111000100100000101110110011

       - FUNCTION OUTPUT:          11100100010111010111101100000000

       - Left XOR FUNCTION OUTPUT: 00101011010011110111000010110011

       - Next Round Left 32 Bits:  01011010110110110111001101011010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101011010011110111000010110011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011010110110110111001101011010

       - Right 32 Bits:            00101011010011110111000010110011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001101010101011100011011001011010001111100100111001001   [Subkey: 7]
          - Input Half:       00101011010011110111000010110011
          - S-Box Result:     11101000011110111101111110000001   [per every group of 4-bits]
          - Split Into Two:   1110100001111011 [L] 1101111110000001 [R]
          - Swap Halves:      11011111100000011110100001111011
          - Bit Inversion:    00100000011111100001011110000100
          - Compressed Key:   10011010010011000101111100110110   [done by compression P-Box]
          - XOR with Key:     10111010001100100100100010110010

          - FUNCTION OUTPUT:  10111010001100100100100010110010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011010110110110111001101011010

       - FUNCTION OUTPUT:          10111010001100100100100010110010

       - Left XOR FUNCTION OUTPUT: 11100000111010010011101111101000

       - Next Round Left 32 Bits:  00101011010011110111000010110011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100000111010010011101111101000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101011010011110111000010110011

       - Right 32 Bits:            11100000111010010011101111101000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100101010101000111001001101001011100000110110001101101   [Subkey: 8]
          - Input Half:       11100000111010010011101111101000
          - S-Box Result:     11001111110000110001100011000010   [per every group of 4-bits]
          - Split Into Two:   1100111111000011 [L] 0001100011000010 [R]
          - Swap Halves:      00011000110000101100111111000011
          - Bit Inversion:    11100111001111010011000000111100
          - Compressed Key:   00011010110110010111001001001110   [done by compression P-Box]
          - XOR with Key:     11111101111001000100001001110010

          - FUNCTION OUTPUT:  11111101111001000100001001110010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101011010011110111000010110011

       - FUNCTION OUTPUT:          11111101111001000100001001110010

       - Left XOR FUNCTION OUTPUT: 11010110101010110011001011000001

       - Next Round Left 32 Bits:  11100000111010010011101111101000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010110101010110011001011000001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100000111010010011101111101000

       - Right 32 Bits:            11010110101010110011001011000001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101010101110001101100101101000111110010011100100101   [Subkey: 9]
          - Input Half:       11010110101010110011001011000001
          - S-Box Result:     01100000010010000001111001011010   [per every group of 4-bits]
          - Split Into Two:   0110000001001000 [L] 0001111001011010 [R]
          - Swap Halves:      00011110010110100110000001001000
          - Bit Inversion:    11100001101001011001111110110111
          - Compressed Key:   01011010001100010100110011011010   [done by compression P-Box]
          - XOR with Key:     10111011100101001101001101101101

          - FUNCTION OUTPUT:  10111011100101001101001101101101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100000111010010011101111101000

       - FUNCTION OUTPUT:          10111011100101001101001101101101

       - Left XOR FUNCTION OUTPUT: 01011011011111011110100010000101

       - Next Round Left 32 Bits:  11010110101010110011001011000001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011011011111011110100010000101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010110101010110011001011000001

       - Right 32 Bits:            01011011011111011110100010000101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010101010100011100100110100101110000011011000110110101   [Subkey: 10]
          - Input Half:       01011011011111011110100010000101
          - S-Box Result:     10011000110101101100001000101001   [per every group of 4-bits]
          - Split Into Two:   1001100011010110 [L] 1100001000101001 [R]
          - Swap Halves:      11000010001010011001100011010110
          - Bit Inversion:    00111101110101100110011100101001
          - Compressed Key:   01011000011001011101100100111010   [done by compression P-Box]
          - XOR with Key:     01100101101100111011111000010011

          - FUNCTION OUTPUT:  01100101101100111011111000010011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010110101010110011001011000001

       - FUNCTION OUTPUT:          01100101101100111011111000010011

       - Left XOR FUNCTION OUTPUT: 10110011000110001000110011010010

       - Next Round Left 32 Bits:  01011011011111011110100010000101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10110011000110001000110011010010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011011011111011110100010000101

       - Right 32 Bits:            10110011000110001000110011010010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010101010111000110110010110100011111001001110010010100   [Subkey: 11]
          - Input Half:       10110011000110001000110011010010
          - S-Box Result:     10000001101000100010010101101110   [per every group of 4-bits]
          - Split Into Two:   1000000110100010 [L] 0010010101101110 [R]
          - Swap Halves:      00100101011011101000000110100010
          - Bit Inversion:    11011010100100010111111001011101
          - Compressed Key:   01011011111001110011000101101000   [done by compression P-Box]
          - XOR with Key:     10000001011101100100111100110101

          - FUNCTION OUTPUT:  10000001011101100100111100110101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011011011111011110100010000101

       - FUNCTION OUTPUT:          10000001011101100100111100110101

       - Left XOR FUNCTION OUTPUT: 11011010000010111010011110110000

       - Next Round Left 32 Bits:  10110011000110001000110011010010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11011010000010111010011110110000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10110011000110001000110011010010

       - Right 32 Bits:            11011010000010111010011110110000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101010001110010011010010111000001101100011011010110   [Subkey: 12]
          - Input Half:       11011010000010111010011110110000
          - S-Box Result:     01100100111110000100110110001111   [per every group of 4-bits]
          - Split Into Two:   0110010011111000 [L] 0100110110001111 [R]
          - Swap Halves:      01001101100011110110010011111000
          - Bit Inversion:    10110010011100001001101100000111
          - Compressed Key:   01010010100001100100011111101001   [done by compression P-Box]
          - XOR with Key:     11100000111101101101110011101110

          - FUNCTION OUTPUT:  11100000111101101101110011101110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10110011000110001000110011010010

       - FUNCTION OUTPUT:          11100000111101101101110011101110

       - Left XOR FUNCTION OUTPUT: 01010011111011100101000000111100

       - Next Round Left 32 Bits:  11011010000010111010011110110000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01010011111011100101000000111100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11011010000010111010011110110000

       - Right 32 Bits:            01010011111011100101000000111100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101011100011011001011010001111100100111001001010011   [Subkey: 13]
          - Input Half:       01010011111011100101000000111100
          - S-Box Result:     10010001110011001001111100010101   [per every group of 4-bits]
          - Split Into Two:   1001000111001100 [L] 1001111100010101 [R]
          - Swap Halves:      10011111000101011001000111001100
          - Bit Inversion:    01100000111010100110111000110011
          - Compressed Key:   01011100100111101111011010000011   [done by compression P-Box]
          - XOR with Key:     00111100011101001001100010110000

          - FUNCTION OUTPUT:  00111100011101001001100010110000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11011010000010111010011110110000

       - FUNCTION OUTPUT:          00111100011101001001100010110000

       - Left XOR FUNCTION OUTPUT: 11100110011111110011111100000000

       - Next Round Left 32 Bits:  01010011111011100101000000111100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100110011111110011111100000000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01010011111011100101000000111100

       - Right 32 Bits:            11100110011111110011111100000000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101000111001001101001011100000110110001101101011001   [Subkey: 14]
          - Input Half:       11100110011111110011111100000000
          - S-Box Result:     11000000110110110001101111111111   [per every group of 4-bits]
          - Split Into Two:   1100000011011011 [L] 0001101111111111 [R]
          - Swap Halves:      00011011111111111100000011011011
          - Bit Inversion:    11100100000000000011111100100100
          - Compressed Key:   01011011001110100000110010010110   [done by compression P-Box]
          - XOR with Key:     10111111001110100011001110110010

          - FUNCTION OUTPUT:  10111111001110100011001110110010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01010011111011100101000000111100

       - FUNCTION OUTPUT:          10111111001110100011001110110010

       - Left XOR FUNCTION OUTPUT: 11101100110101000110001110001110

       - Next Round Left 32 Bits:  11100110011111110011111100000000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101100110101000110001110001110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100110011111110011111100000000

       - Right 32 Bits:            11101100110101000110001110001110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101110001101100101101000111110010011100100101001101   [Subkey: 15]
          - Input Half:       11101100110101000110001110001110
          - S-Box Result:     11000101011001110000000100101100   [per every group of 4-bits]
          - Split Into Two:   1100010101100111 [L] 0000000100101100 [R]
          - Swap Halves:      00000001001011001100010101100111
          - Bit Inversion:    11111110110100110011101010011000
          - Compressed Key:   01010010011010001101101100011110   [done by compression P-Box]
          - XOR with Key:     10101100101110111110000110000110

          - FUNCTION OUTPUT:  10101100101110111110000110000110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100110011111110011111100000000

       - FUNCTION OUTPUT:          10101100101110111110000110000110

       - Left XOR FUNCTION OUTPUT: 01001010110001001101111010000110

       - Next Round Left 32 Bits:  11101100110101000110001110001110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001010110001001101111010000110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101100110101000110001110001110

       - Right 32 Bits:            01001010110001001101111010000110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010100011100100110100101110000011011000110110101100101   [Subkey: 16]
          - Input Half:       01001010110001001101111010000110
          - S-Box Result:     01110100010101110110110000100000   [per every group of 4-bits]
          - Split Into Two:   0111010001010111 [L] 0110110000100000 [R]
          - Swap Halves:      01101100001000000111010001010111
          - Bit Inversion:    10010011110111111000101110101000
          - Compressed Key:   01011100111010110011001001011010   [done by compression P-Box]
          - XOR with Key:     11001111001101001011100111110010

          - FUNCTION OUTPUT:  11001111001101001011100111110010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101100110101000110001110001110

       - FUNCTION OUTPUT:          11001111001101001011100111110010

       - Left XOR FUNCTION OUTPUT: 00100011111000001101101001111100

       - Next Round Left 32 Bits:  01001010110001001101111010000110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00100011111000001101101001111100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0010001111100000110110100111110001001010110001001101111010000110

 > Processed Block:     0010001111100000110110100111110001001010110001001101111010000110


FINAL PROCESSED DATA BLOCKS: 0000100101011101110110010111110001000011110000111100001000011010,1101001001011111110101001111010101001000110010010110000000010001,0010001111100000110110100111110001001010110001001101111010000110,

BLOCKS IN ASCII:             	]Ÿ|C√¬“_‘ıH…`#‡⁄|Jƒﬁ?

=========================================================================================================================
STAGE 3: DES [DECRYPT] ==================================================================================================
=========================================================================================================================

56-bit key: MyAweso
In Binary:  01001101011110010100000101110111011001010111001101101111

Subkeys:    Key i = Key (i - 1) [Shifted left by 1 and inverted]

Subkey 1  : 01100101000011010111110100010001001101010001100100100001
Subkey 2  : 00110101111001010000010111011101100101011100110110111101
Subkey 3  : 10010100001101011111010001000100110101000110010010000101
Subkey 4  : 11010111100101000001011101110110010101110011011011110100
Subkey 5  : 01010000110101111101000100010011010100011001001000010110
Subkey 6  : 01011110010100000101110111011001010111001101101111010011
Subkey 7  : 01000011010111110100010001001101010001100100100001011001
Subkey 8  : 01111001010000010111011101100101011100110110111101001101
Subkey 9  : 00001101011111010001000100110101000110010010000101100101
Subkey 10 : 11100101000001011101110110010101110011011011110100110101
Subkey 11 : 00110101111101000100010011010100011001001000010110010100
Subkey 12 : 10010100000101110111011001010111001101101111010011010111
Subkey 13 : 11010111110100010001001101010001100100100001011001010000
Subkey 14 : 01010000010111011101100101011100110110111101001101011110
Subkey 15 : 01011111010001000100110101000110010010000101100101000011
Subkey 16 : 01000001011101110110010101110011011011110100110101111001

S-BOX (4x4):
INPUT | OUTPUT
------|-------
0000  | 1111
0001  | 1010
0010  | 1110
0011  | 0001
0100  | 0111
0101  | 1001
0110  | 0000
0111  | 1101
1000  | 0010
1001  | 0011
1010  | 0100
1011  | 1000
1100  | 0101
1101  | 0110
1110  | 1100
1111  | 1011

P-BOX (7 bits compressed to 4 bits)
Bit at Position X goes to Position Y
X: | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
Y: | 4 | 3 | 1 | 2 | 1 | 4 | 3 |


Data to decrypt         : 	]Ÿ|C√¬“_‘ıH…`#‡⁄|Jƒﬁ?

Data padded with spaces : 	]Ÿ|C√¬“_‘ıH…`#‡⁄|Jƒﬁ?[Padded with '0' spaces]

Data in ASCII           : 9,93,217,124,67,195,194,26,210,95,212,245,72,201,96,17,35,224,218,124,74,196,222,134,

Data in Binary          : 00001001,01011101,11011001,01111100,01000011,11000011,11000010,00011010,11010010,01011111,11010100,11110101,01001000,11001001,01100000,00010001,00100011,11100000,11011010,01111100,01001010,11000100,11011110,10000110,

Data in 64-bit Blocks   : 0000100101011101110110010111110001000011110000111100001000011010,1101001001011111110101001111010101001000110010010110000000010001,0010001111100000110110100111110001001010110001001101111010000110,

!!!!NOTE: Subkeys used in REVERSE order for DECRYPTION



<<<<<< PROCESSING IN 'ECB' MODE >>>>>>


Ciphertext Block 1: 0000100101011101110110010111110001000011110000111100001000011010

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001001010111011101100101111100

       - Right 32 Bits:            01000011110000111100001000011010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000001011101110110010101110011011011110100110101111001   [Subkey: 16]
          - Input Half:       01000011110000111100001000011010
          - S-Box Result:     01110001010100010101111010100100   [per every group of 4-bits]
          - Split Into Two:   0111000101010001 [L] 0101111010100100 [R]
          - Swap Halves:      01011110101001000111000101010001
          - Bit Inversion:    10100001010110111000111010101110
          - Compressed Key:   00001110110010110111111001010110   [done by compression P-Box]
          - XOR with Key:     10101111100100001111000011111000

          - FUNCTION OUTPUT:  10101111100100001111000011111000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001001010111011101100101111100

       - FUNCTION OUTPUT:          10101111100100001111000011111000

       - Left XOR FUNCTION OUTPUT: 10100110110011010010100110000100

       - Next Round Left 32 Bits:  01000011110000111100001000011010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10100110110011010010100110000100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01000011110000111100001000011010

       - Right 32 Bits:            10100110110011010010100110000100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011111010001000100110101000110010010000101100101000011   [Subkey: 15]
          - Input Half:       10100110110011010010100110000100
          - S-Box Result:     01000000010101101110001100100111   [per every group of 4-bits]
          - Split Into Two:   0100000001010110 [L] 1110001100100111 [R]
          - Swap Halves:      11100011001001110100000001010110
          - Bit Inversion:    00011100110110001011111110101001
          - Compressed Key:   11110010011010000001001000010011   [done by compression P-Box]
          - XOR with Key:     11101110101100001010110110111010

          - FUNCTION OUTPUT:  11101110101100001010110110111010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01000011110000111100001000011010

       - FUNCTION OUTPUT:          11101110101100001010110110111010

       - Left XOR FUNCTION OUTPUT: 10101101011100110110111110100000

       - Next Round Left 32 Bits:  10100110110011010010100110000100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10101101011100110110111110100000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10100110110011010010100110000100

       - Right 32 Bits:            10101101011100110110111110100000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010000010111011101100101011100110110111101001101011110   [Subkey: 14]
          - Input Half:       10101101011100110110111110100000
          - S-Box Result:     01000110110100010000101101001111   [per every group of 4-bits]
          - Split Into Two:   0100011011010001 [L] 0000101101001111 [R]
          - Swap Halves:      00001011010011110100011011010001
          - Bit Inversion:    11110100101100001011100100101110
          - Compressed Key:   01001011011110101001111110011101   [done by compression P-Box]
          - XOR with Key:     10111111110010100010011010110011

          - FUNCTION OUTPUT:  10111111110010100010011010110011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10100110110011010010100110000100

       - FUNCTION OUTPUT:          10111111110010100010011010110011

       - Left XOR FUNCTION OUTPUT: 00011001000001110000111100110111

       - Next Round Left 32 Bits:  10101101011100110110111110100000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011001000001110000111100110111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10101101011100110110111110100000

       - Right 32 Bits:            00011001000001110000111100110111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010111110100010001001101010001100100100001011001010000   [Subkey: 13]
          - Input Half:       00011001000001110000111100110111
          - S-Box Result:     10100011111111011111101100011101   [per every group of 4-bits]
          - Split Into Two:   1010001111111101 [L] 1111101100011101 [R]
          - Swap Halves:      11111011000111011010001111111101
          - Bit Inversion:    00000100111000100101110000000010
          - Compressed Key:   01111000000110101100010011000000   [done by compression P-Box]
          - XOR with Key:     01111100111110001001100011000010

          - FUNCTION OUTPUT:  01111100111110001001100011000010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10101101011100110110111110100000

       - FUNCTION OUTPUT:          01111100111110001001100011000010

       - Left XOR FUNCTION OUTPUT: 11010001100010111111011101100010

       - Next Round Left 32 Bits:  00011001000001110000111100110111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010001100010111111011101100010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00011001000001110000111100110111

       - Right 32 Bits:            11010001100010111111011101100010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100000101110111011001010111001101101111010011010111   [Subkey: 12]
          - Input Half:       11010001100010111111011101100010
          - S-Box Result:     01101010001010001011110100001110   [per every group of 4-bits]
          - Split Into Two:   0110101000101000 [L] 1011110100001110 [R]
          - Swap Halves:      10111101000011100110101000101000
          - Bit Inversion:    01000010111100011001010111010111
          - Compressed Key:   01011010110110100110011101101011   [done by compression P-Box]
          - XOR with Key:     00011000001010111111001010111100

          - FUNCTION OUTPUT:  00011000001010111111001010111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00011001000001110000111100110111

       - FUNCTION OUTPUT:          00011000001010111111001010111100

       - Left XOR FUNCTION OUTPUT: 00000001001011001111110110001011

       - Next Round Left 32 Bits:  11010001100010111111011101100010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00000001001011001111110110001011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010001100010111111011101100010

       - Right 32 Bits:            00000001001011001111110110001011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101111101000100010011010100011001001000010110010100   [Subkey: 11]
          - Input Half:       00000001001011001111110110001011
          - S-Box Result:     11111010111001011011011000101000   [per every group of 4-bits]
          - Split Into Two:   1111101011100101 [L] 1011011000101000 [R]
          - Swap Halves:      10110110001010001111101011100101
          - Bit Inversion:    01001001110101110000010100011010
          - Compressed Key:   01011110010011100011000101111000   [done by compression P-Box]
          - XOR with Key:     00010111100110010011010001100010

          - FUNCTION OUTPUT:  00010111100110010011010001100010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010001100010111111011101100010

       - FUNCTION OUTPUT:          00010111100110010011010001100010

       - Left XOR FUNCTION OUTPUT: 11000110000100101100001100000000

       - Next Round Left 32 Bits:  00000001001011001111110110001011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000110000100101100001100000000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00000001001011001111110110001011

       - Right 32 Bits:            11000110000100101100001100000000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11100101000001011101110110010101110011011011110100110101   [Subkey: 10]
          - Input Half:       11000110000100101100001100000000
          - S-Box Result:     01010000101011100101000111111111   [per every group of 4-bits]
          - Split Into Two:   0101000010101110 [L] 0101000111111111 [R]
          - Swap Halves:      01010001111111110101000010101110
          - Bit Inversion:    10101110000000001010111101010001
          - Compressed Key:   00010010011101101101100101011010   [done by compression P-Box]
          - XOR with Key:     10111100011101100111011000001011

          - FUNCTION OUTPUT:  10111100011101100111011000001011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00000001001011001111110110001011

       - FUNCTION OUTPUT:          10111100011101100111011000001011

       - Left XOR FUNCTION OUTPUT: 10111101010110101000101110000000

       - Next Round Left 32 Bits:  11000110000100101100001100000000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10111101010110101000101110000000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000110000100101100001100000000

       - Right 32 Bits:            10111101010110101000101110000000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00001101011111010001000100110101000110010010000101100101   [Subkey: 9]
          - Input Half:       10111101010110101000101110000000
          - S-Box Result:     10000110100101000010100000101111   [per every group of 4-bits]
          - Split Into Two:   1000011010010100 [L] 0010100000101111 [R]
          - Swap Halves:      00101000001011111000011010010100
          - Bit Inversion:    11010111110100000111100101101011
          - Compressed Key:   10011111000100110100100000011010   [done by compression P-Box]
          - XOR with Key:     01001000110000110011000101110001

          - FUNCTION OUTPUT:  01001000110000110011000101110001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000110000100101100001100000000

       - FUNCTION OUTPUT:          01001000110000110011000101110001

       - Left XOR FUNCTION OUTPUT: 10001110110100011111001001110001

       - Next Round Left 32 Bits:  10111101010110101000101110000000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001110110100011111001001110001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10111101010110101000101110000000

       - Right 32 Bits:            10001110110100011111001001110001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111001010000010111011101100101011100110110111101001101   [Subkey: 8]
          - Input Half:       10001110110100011111001001110001
          - S-Box Result:     00101100011010101011111011011010   [per every group of 4-bits]
          - Split Into Two:   0010110001101010 [L] 1011111011011010 [R]
          - Swap Halves:      10111110110110100010110001101010
          - Bit Inversion:    01000001001001011101001110010101
          - Compressed Key:   11000000110110010111111011011110   [done by compression P-Box]
          - XOR with Key:     10000001111111001010110101001011

          - FUNCTION OUTPUT:  10000001111111001010110101001011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10111101010110101000101110000000

       - FUNCTION OUTPUT:          10000001111111001010110101001011

       - Left XOR FUNCTION OUTPUT: 00111100101001100010011011001011

       - Next Round Left 32 Bits:  10001110110100011111001001110001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111100101001100010011011001011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001110110100011111001001110001

       - Right 32 Bits:            00111100101001100010011011001011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000011010111110100010001001101010001100100100001011001   [Subkey: 7]
          - Input Half:       00111100101001100010011011001011
          - S-Box Result:     00010101010000001110000001011000   [per every group of 4-bits]
          - Split Into Two:   0001010101000000 [L] 1110000001011000 [R]
          - Swap Halves:      11100000010110000001010101000000
          - Bit Inversion:    00011111101001111110101010111111
          - Compressed Key:   00101011010010000101011000000110   [done by compression P-Box]
          - XOR with Key:     00110100111011111011110010111001

          - FUNCTION OUTPUT:  00110100111011111011110010111001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001110110100011111001001110001

       - FUNCTION OUTPUT:          00110100111011111011110010111001

       - Left XOR FUNCTION OUTPUT: 10111010001111100100111011001000

       - Next Round Left 32 Bits:  00111100101001100010011011001011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10111010001111100100111011001000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111100101001100010011011001011

       - Right 32 Bits:            10111010001111100100111011001000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011110010100000101110111011001010111001101101111010011   [Subkey: 6]
          - Input Half:       10111010001111100100111011001000
          - S-Box Result:     10000100000111000111110001010010   [per every group of 4-bits]
          - Split Into Two:   1000010000011100 [L] 0111110001010010 [R]
          - Swap Halves:      01111100010100101000010000011100
          - Bit Inversion:    10000011101011010111101111100011
          - Compressed Key:   11111000011111100101001110110011   [done by compression P-Box]
          - XOR with Key:     01111011110100110010100001010000

          - FUNCTION OUTPUT:  01111011110100110010100001010000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111100101001100010011011001011

       - FUNCTION OUTPUT:          01111011110100110010100001010000

       - Left XOR FUNCTION OUTPUT: 01000111011101010000111010011011

       - Next Round Left 32 Bits:  10111010001111100100111011001000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000111011101010000111010011011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10111010001111100100111011001000

       - Right 32 Bits:            01000111011101010000111010011011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010000110101111101000100010011010100011001001000010110   [Subkey: 5]
          - Input Half:       01000111011101010000111010011011
          - S-Box Result:     01111101110110011111110000111000   [per every group of 4-bits]
          - Split Into Two:   0111110111011001 [L] 1111110000111000 [R]
          - Swap Halves:      11111100001110000111110111011001
          - Bit Inversion:    00000011110001111000001000100110
          - Compressed Key:   01001010010100100101100110001001   [done by compression P-Box]
          - XOR with Key:     01001001100101011101101110101111

          - FUNCTION OUTPUT:  01001001100101011101101110101111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10111010001111100100111011001000

       - FUNCTION OUTPUT:          01001001100101011101101110101111

       - Left XOR FUNCTION OUTPUT: 11110011101010111001010101100111

       - Next Round Left 32 Bits:  01000111011101010000111010011011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110011101010111001010101100111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01000111011101010000111010011011

       - Right 32 Bits:            11110011101010111001010101100111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010111100101000001011101110110010101110011011011110100   [Subkey: 4]
          - Input Half:       11110011101010111001010101100111
          - S-Box Result:     10110001010010000011100100001101   [per every group of 4-bits]
          - Split Into Two:   1011000101001000 [L] 0011100100001101 [R]
          - Swap Halves:      00111001000011011011000101001000
          - Bit Inversion:    11000110111100100100111010110111
          - Compressed Key:   01111010000110110001110011101000   [done by compression P-Box]
          - XOR with Key:     10111100111010010101001001011111

          - FUNCTION OUTPUT:  10111100111010010101001001011111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01000111011101010000111010011011

       - FUNCTION OUTPUT:          10111100111010010101001001011111

       - Left XOR FUNCTION OUTPUT: 11111011100111000101110011000100

       - Next Round Left 32 Bits:  11110011101010111001010101100111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111011100111000101110011000100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110011101010111001010101100111

       - Right 32 Bits:            11111011100111000101110011000100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100001101011111010001000100110101000110010010000101   [Subkey: 3]
          - Input Half:       11111011100111000101110011000100
          - S-Box Result:     10111000001101011001010101010111   [per every group of 4-bits]
          - Split Into Two:   1011100000110101 [L] 1001010101010111 [R]
          - Swap Halves:      10010101010101111011100000110101
          - Bit Inversion:    01101010101010000100011111001010
          - Compressed Key:   01011110110110001001001001101010   [done by compression P-Box]
          - XOR with Key:     00110100011100001101010110100000

          - FUNCTION OUTPUT:  00110100011100001101010110100000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110011101010111001010101100111

       - FUNCTION OUTPUT:          00110100011100001101010110100000

       - Left XOR FUNCTION OUTPUT: 11000111110110110100000011000111

       - Next Round Left 32 Bits:  11111011100111000101110011000100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000111110110110100000011000111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111011100111000101110011000100

       - Right 32 Bits:            11000111110110110100000011000111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101111001010000010111011101100101011100110110111101   [Subkey: 2]
          - Input Half:       11000111110110110100000011000111
          - S-Box Result:     01011101011010000111111101011101   [per every group of 4-bits]
          - Split Into Two:   0101110101101000 [L] 0111111101011101 [R]
          - Swap Halves:      01111111010111010101110101101000
          - Bit Inversion:    10000000101000101010001010010111
          - Compressed Key:   01010110000011101100101101111110   [done by compression P-Box]
          - XOR with Key:     11010110101011000110100111101001

          - FUNCTION OUTPUT:  11010110101011000110100111101001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111011100111000101110011000100

       - FUNCTION OUTPUT:          11010110101011000110100111101001

       - Left XOR FUNCTION OUTPUT: 00101101001100000011010100101101

       - Next Round Left 32 Bits:  11000111110110110100000011000111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101101001100000011010100101101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000111110110110100000011000111

       - Right 32 Bits:            00101101001100000011010100101101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100101000011010111110100010001001101010001100100100001   [Subkey: 1]
          - Input Half:       00101101001100000011010100101101
          - S-Box Result:     11100110000111110001100111100110   [per every group of 4-bits]
          - Split Into Two:   1110011000011111 [L] 0001100111100110 [R]
          - Swap Halves:      00011001111001101110011000011111
          - Bit Inversion:    11100110000110010001100111100000
          - Compressed Key:   00010011111100100110100000010010   [done by compression P-Box]
          - XOR with Key:     11110101111010110111000111110010

          - FUNCTION OUTPUT:  11110101111010110111000111110010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000111110110110100000011000111

       - FUNCTION OUTPUT:          11110101111010110111000111110010

       - Left XOR FUNCTION OUTPUT: 00110010001100000011000100110101

       - Next Round Left 32 Bits:  00101101001100000011010100101101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00110010001100000011000100110101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0011001000110000001100010011010100101101001100000011010100101101

 > Processed Block:     0011001000110000001100010011010100101101001100000011010100101101


Ciphertext Block 2: 1101001001011111110101001111010101001000110010010110000000010001

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010010010111111101010011110101

       - Right 32 Bits:            01001000110010010110000000010001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000001011101110110010101110011011011110100110101111001   [Subkey: 16]
          - Input Half:       01001000110010010110000000010001
          - S-Box Result:     01110010010100110000111110101010   [per every group of 4-bits]
          - Split Into Two:   0111001001010011 [L] 0000111110101010 [R]
          - Swap Halves:      00001111101010100111001001010011
          - Bit Inversion:    11110000010101011000110110101100
          - Compressed Key:   00001110110010110111111001010110   [done by compression P-Box]
          - XOR with Key:     11111110100111101111001111111010

          - FUNCTION OUTPUT:  11111110100111101111001111111010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010010010111111101010011110101

       - FUNCTION OUTPUT:          11111110100111101111001111111010

       - Left XOR FUNCTION OUTPUT: 00101100110000010010011100001111

       - Next Round Left 32 Bits:  01001000110010010110000000010001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101100110000010010011100001111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001000110010010110000000010001

       - Right 32 Bits:            00101100110000010010011100001111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011111010001000100110101000110010010000101100101000011   [Subkey: 15]
          - Input Half:       00101100110000010010011100001111
          - S-Box Result:     11100101010110101110110111111011   [per every group of 4-bits]
          - Split Into Two:   1110010101011010 [L] 1110110111111011 [R]
          - Swap Halves:      11101101111110111110010101011010
          - Bit Inversion:    00010010000001000001101010100101
          - Compressed Key:   11110010011010000001001000010011   [done by compression P-Box]
          - XOR with Key:     11100000011011000000100010110110

          - FUNCTION OUTPUT:  11100000011011000000100010110110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001000110010010110000000010001

       - FUNCTION OUTPUT:          11100000011011000000100010110110

       - Left XOR FUNCTION OUTPUT: 10101000101001010110100010100111

       - Next Round Left 32 Bits:  00101100110000010010011100001111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10101000101001010110100010100111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101100110000010010011100001111

       - Right 32 Bits:            10101000101001010110100010100111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010000010111011101100101011100110110111101001101011110   [Subkey: 14]
          - Input Half:       10101000101001010110100010100111
          - S-Box Result:     01000010010010010000001001001101   [per every group of 4-bits]
          - Split Into Two:   0100001001001001 [L] 0000001001001101 [R]
          - Swap Halves:      00000010010011010100001001001001
          - Bit Inversion:    11111101101100101011110110110110
          - Compressed Key:   01001011011110101001111110011101   [done by compression P-Box]
          - XOR with Key:     10110110110010000010001000101011

          - FUNCTION OUTPUT:  10110110110010000010001000101011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101100110000010010011100001111

       - FUNCTION OUTPUT:          10110110110010000010001000101011

       - Left XOR FUNCTION OUTPUT: 10011010000010010000010100100100

       - Next Round Left 32 Bits:  10101000101001010110100010100111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011010000010010000010100100100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10101000101001010110100010100111

       - Right 32 Bits:            10011010000010010000010100100100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010111110100010001001101010001100100100001011001010000   [Subkey: 13]
          - Input Half:       10011010000010010000010100100100
          - S-Box Result:     00110100111100111111100111100111   [per every group of 4-bits]
          - Split Into Two:   0011010011110011 [L] 1111100111100111 [R]
          - Swap Halves:      11111001111001110011010011110011
          - Bit Inversion:    00000110000110001100101100001100
          - Compressed Key:   01111000000110101100010011000000   [done by compression P-Box]
          - XOR with Key:     01111110000000100000111111001100

          - FUNCTION OUTPUT:  01111110000000100000111111001100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10101000101001010110100010100111

       - FUNCTION OUTPUT:          01111110000000100000111111001100

       - Left XOR FUNCTION OUTPUT: 11010110101001110110011101101011

       - Next Round Left 32 Bits:  10011010000010010000010100100100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010110101001110110011101101011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011010000010010000010100100100

       - Right 32 Bits:            11010110101001110110011101101011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100000101110111011001010111001101101111010011010111   [Subkey: 12]
          - Input Half:       11010110101001110110011101101011
          - S-Box Result:     01100000010011010000110100001000   [per every group of 4-bits]
          - Split Into Two:   0110000001001101 [L] 0000110100001000 [R]
          - Swap Halves:      00001101000010000110000001001101
          - Bit Inversion:    11110010111101111001111110110010
          - Compressed Key:   01011010110110100110011101101011   [done by compression P-Box]
          - XOR with Key:     10101000001011011111100011011001

          - FUNCTION OUTPUT:  10101000001011011111100011011001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011010000010010000010100100100

       - FUNCTION OUTPUT:          10101000001011011111100011011001

       - Left XOR FUNCTION OUTPUT: 00110010001001001111110111111101

       - Next Round Left 32 Bits:  11010110101001110110011101101011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00110010001001001111110111111101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010110101001110110011101101011

       - Right 32 Bits:            00110010001001001111110111111101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101111101000100010011010100011001001000010110010100   [Subkey: 11]
          - Input Half:       00110010001001001111110111111101
          - S-Box Result:     00011110111001111011011010110110   [per every group of 4-bits]
          - Split Into Two:   0001111011100111 [L] 1011011010110110 [R]
          - Swap Halves:      10110110101101100001111011100111
          - Bit Inversion:    01001001010010011110000100011000
          - Compressed Key:   01011110010011100011000101111000   [done by compression P-Box]
          - XOR with Key:     00010111000001111101000001100000

          - FUNCTION OUTPUT:  00010111000001111101000001100000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010110101001110110011101101011

       - FUNCTION OUTPUT:          00010111000001111101000001100000

       - Left XOR FUNCTION OUTPUT: 11000001101000001011011100001011

       - Next Round Left 32 Bits:  00110010001001001111110111111101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000001101000001011011100001011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00110010001001001111110111111101

       - Right 32 Bits:            11000001101000001011011100001011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11100101000001011101110110010101110011011011110100110101   [Subkey: 10]
          - Input Half:       11000001101000001011011100001011
          - S-Box Result:     01011010010011111000110111111000   [per every group of 4-bits]
          - Split Into Two:   0101101001001111 [L] 1000110111111000 [R]
          - Swap Halves:      10001101111110000101101001001111
          - Bit Inversion:    01110010000001111010010110110000
          - Compressed Key:   00010010011101101101100101011010   [done by compression P-Box]
          - XOR with Key:     01100000011100010111110011101010

          - FUNCTION OUTPUT:  01100000011100010111110011101010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00110010001001001111110111111101

       - FUNCTION OUTPUT:          01100000011100010111110011101010

       - Left XOR FUNCTION OUTPUT: 01010010010101011000000100010111

       - Next Round Left 32 Bits:  11000001101000001011011100001011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01010010010101011000000100010111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000001101000001011011100001011

       - Right 32 Bits:            01010010010101011000000100010111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00001101011111010001000100110101000110010010000101100101   [Subkey: 9]
          - Input Half:       01010010010101011000000100010111
          - S-Box Result:     10011110100110010010101010101101   [per every group of 4-bits]
          - Split Into Two:   1001111010011001 [L] 0010101010101101 [R]
          - Swap Halves:      00101010101011011001111010011001
          - Bit Inversion:    11010101010100100110000101100110
          - Compressed Key:   10011111000100110100100000011010   [done by compression P-Box]
          - XOR with Key:     01001010010000010010100101111100

          - FUNCTION OUTPUT:  01001010010000010010100101111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000001101000001011011100001011

       - FUNCTION OUTPUT:          01001010010000010010100101111100

       - Left XOR FUNCTION OUTPUT: 10001011111000011001111001110111

       - Next Round Left 32 Bits:  01010010010101011000000100010111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001011111000011001111001110111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01010010010101011000000100010111

       - Right 32 Bits:            10001011111000011001111001110111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111001010000010111011101100101011100110110111101001101   [Subkey: 8]
          - Input Half:       10001011111000011001111001110111
          - S-Box Result:     00101000110010100011110011011101   [per every group of 4-bits]
          - Split Into Two:   0010100011001010 [L] 0011110011011101 [R]
          - Swap Halves:      00111100110111010010100011001010
          - Bit Inversion:    11000011001000101101011100110101
          - Compressed Key:   11000000110110010111111011011110   [done by compression P-Box]
          - XOR with Key:     00000011111110111010100111101011

          - FUNCTION OUTPUT:  00000011111110111010100111101011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01010010010101011000000100010111

       - FUNCTION OUTPUT:          00000011111110111010100111101011

       - Left XOR FUNCTION OUTPUT: 01010001101011100010100011111100

       - Next Round Left 32 Bits:  10001011111000011001111001110111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01010001101011100010100011111100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001011111000011001111001110111

       - Right 32 Bits:            01010001101011100010100011111100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000011010111110100010001001101010001100100100001011001   [Subkey: 7]
          - Input Half:       01010001101011100010100011111100
          - S-Box Result:     10011010010011001110001010110101   [per every group of 4-bits]
          - Split Into Two:   1001101001001100 [L] 1110001010110101 [R]
          - Swap Halves:      11100010101101011001101001001100
          - Bit Inversion:    00011101010010100110010110110011
          - Compressed Key:   00101011010010000101011000000110   [done by compression P-Box]
          - XOR with Key:     00110110000000100011001110110101

          - FUNCTION OUTPUT:  00110110000000100011001110110101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001011111000011001111001110111

       - FUNCTION OUTPUT:          00110110000000100011001110110101

       - Left XOR FUNCTION OUTPUT: 10111101111000111010110111000010

       - Next Round Left 32 Bits:  01010001101011100010100011111100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10111101111000111010110111000010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01010001101011100010100011111100

       - Right 32 Bits:            10111101111000111010110111000010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011110010100000101110111011001010111001101101111010011   [Subkey: 6]
          - Input Half:       10111101111000111010110111000010
          - S-Box Result:     10000110110000010100011001011110   [per every group of 4-bits]
          - Split Into Two:   1000011011000001 [L] 0100011001011110 [R]
          - Swap Halves:      01000110010111101000011011000001
          - Bit Inversion:    10111001101000010111100100111110
          - Compressed Key:   11111000011111100101001110110011   [done by compression P-Box]
          - XOR with Key:     01000001110111110010101010001101

          - FUNCTION OUTPUT:  01000001110111110010101010001101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01010001101011100010100011111100

       - FUNCTION OUTPUT:          01000001110111110010101010001101

       - Left XOR FUNCTION OUTPUT: 00010000011100010000001001110001

       - Next Round Left 32 Bits:  10111101111000111010110111000010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00010000011100010000001001110001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10111101111000111010110111000010

       - Right 32 Bits:            00010000011100010000001001110001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010000110101111101000100010011010100011001001000010110   [Subkey: 5]
          - Input Half:       00010000011100010000001001110001
          - S-Box Result:     10101111110110101111111011011010   [per every group of 4-bits]
          - Split Into Two:   1010111111011010 [L] 1111111011011010 [R]
          - Swap Halves:      11111110110110101010111111011010
          - Bit Inversion:    00000001001001010101000000100101
          - Compressed Key:   01001010010100100101100110001001   [done by compression P-Box]
          - XOR with Key:     01001011011101110000100110101100

          - FUNCTION OUTPUT:  01001011011101110000100110101100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10111101111000111010110111000010

       - FUNCTION OUTPUT:          01001011011101110000100110101100

       - Left XOR FUNCTION OUTPUT: 11110110100101001010010001101110

       - Next Round Left 32 Bits:  00010000011100010000001001110001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110110100101001010010001101110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00010000011100010000001001110001

       - Right 32 Bits:            11110110100101001010010001101110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010111100101000001011101110110010101110011011011110100   [Subkey: 4]
          - Input Half:       11110110100101001010010001101110
          - S-Box Result:     10110000001101110100011100001100   [per every group of 4-bits]
          - Split Into Two:   1011000000110111 [L] 0100011100001100 [R]
          - Swap Halves:      01000111000011001011000000110111
          - Bit Inversion:    10111000111100110100111111001000
          - Compressed Key:   01111010000110110001110011101000   [done by compression P-Box]
          - XOR with Key:     11000010111010000101001100100000

          - FUNCTION OUTPUT:  11000010111010000101001100100000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00010000011100010000001001110001

       - FUNCTION OUTPUT:          11000010111010000101001100100000

       - Left XOR FUNCTION OUTPUT: 11010010100110010101000101010001

       - Next Round Left 32 Bits:  11110110100101001010010001101110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010010100110010101000101010001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110110100101001010010001101110

       - Right 32 Bits:            11010010100110010101000101010001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100001101011111010001000100110101000110010010000101   [Subkey: 3]
          - Input Half:       11010010100110010101000101010001
          - S-Box Result:     01101110001100111001101010011010   [per every group of 4-bits]
          - Split Into Two:   0110111000110011 [L] 1001101010011010 [R]
          - Swap Halves:      10011010100110100110111000110011
          - Bit Inversion:    01100101011001011001000111001100
          - Compressed Key:   01011110110110001001001001101010   [done by compression P-Box]
          - XOR with Key:     00111011101111010000001110100110

          - FUNCTION OUTPUT:  00111011101111010000001110100110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110110100101001010010001101110

       - FUNCTION OUTPUT:          00111011101111010000001110100110

       - Left XOR FUNCTION OUTPUT: 11001101001010011010011111001000

       - Next Round Left 32 Bits:  11010010100110010101000101010001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001101001010011010011111001000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010010100110010101000101010001

       - Right 32 Bits:            11001101001010011010011111001000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101111001010000010111011101100101011100110110111101   [Subkey: 2]
          - Input Half:       11001101001010011010011111001000
          - S-Box Result:     01010110111000110100110101010010   [per every group of 4-bits]
          - Split Into Two:   0101011011100011 [L] 0100110101010010 [R]
          - Swap Halves:      01001101010100100101011011100011
          - Bit Inversion:    10110010101011011010100100011100
          - Compressed Key:   01010110000011101100101101111110   [done by compression P-Box]
          - XOR with Key:     11100100101000110110001001100010

          - FUNCTION OUTPUT:  11100100101000110110001001100010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010010100110010101000101010001

       - FUNCTION OUTPUT:          11100100101000110110001001100010

       - Left XOR FUNCTION OUTPUT: 00110110001110100011001100110011

       - Next Round Left 32 Bits:  11001101001010011010011111001000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00110110001110100011001100110011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11001101001010011010011111001000

       - Right 32 Bits:            00110110001110100011001100110011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100101000011010111110100010001001101010001100100100001   [Subkey: 1]
          - Input Half:       00110110001110100011001100110011
          - S-Box Result:     00010000000101000001000100010001   [per every group of 4-bits]
          - Split Into Two:   0001000000010100 [L] 0001000100010001 [R]
          - Swap Halves:      00010001000100010001000000010100
          - Bit Inversion:    11101110111011101110111111101011
          - Compressed Key:   00010011111100100110100000010010   [done by compression P-Box]
          - XOR with Key:     11111101000111001000011111111001

          - FUNCTION OUTPUT:  11111101000111001000011111111001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11001101001010011010011111001000

       - FUNCTION OUTPUT:          11111101000111001000011111111001

       - Left XOR FUNCTION OUTPUT: 00110000001101010010000000110001

       - Next Round Left 32 Bits:  00110110001110100011001100110011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00110000001101010010000000110001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0011000000110101001000000011000100110110001110100011001100110011

 > Processed Block:     0011000000110101001000000011000100110110001110100011001100110011


Ciphertext Block 3: 0010001111100000110110100111110001001010110001001101111010000110

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00100011111000001101101001111100

       - Right 32 Bits:            01001010110001001101111010000110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000001011101110110010101110011011011110100110101111001   [Subkey: 16]
          - Input Half:       01001010110001001101111010000110
          - S-Box Result:     01110100010101110110110000100000   [per every group of 4-bits]
          - Split Into Two:   0111010001010111 [L] 0110110000100000 [R]
          - Swap Halves:      01101100001000000111010001010111
          - Bit Inversion:    10010011110111111000101110101000
          - Compressed Key:   00001110110010110111111001010110   [done by compression P-Box]
          - XOR with Key:     10011101000101001111010111111110

          - FUNCTION OUTPUT:  10011101000101001111010111111110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00100011111000001101101001111100

       - FUNCTION OUTPUT:          10011101000101001111010111111110

       - Left XOR FUNCTION OUTPUT: 10111110111101000010111110000010

       - Next Round Left 32 Bits:  01001010110001001101111010000110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10111110111101000010111110000010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001010110001001101111010000110

       - Right 32 Bits:            10111110111101000010111110000010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011111010001000100110101000110010010000101100101000011   [Subkey: 15]
          - Input Half:       10111110111101000010111110000010
          - S-Box Result:     10001100101101111110101100101110   [per every group of 4-bits]
          - Split Into Two:   1000110010110111 [L] 1110101100101110 [R]
          - Swap Halves:      11101011001011101000110010110111
          - Bit Inversion:    00010100110100010111001101001000
          - Compressed Key:   11110010011010000001001000010011   [done by compression P-Box]
          - XOR with Key:     11100110101110010110000101011011

          - FUNCTION OUTPUT:  11100110101110010110000101011011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001010110001001101111010000110

       - FUNCTION OUTPUT:          11100110101110010110000101011011

       - Left XOR FUNCTION OUTPUT: 10101100011111011011111111011101

       - Next Round Left 32 Bits:  10111110111101000010111110000010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10101100011111011011111111011101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10111110111101000010111110000010

       - Right 32 Bits:            10101100011111011011111111011101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010000010111011101100101011100110110111101001101011110   [Subkey: 14]
          - Input Half:       10101100011111011011111111011101
          - S-Box Result:     01000101110101101000101101100110   [per every group of 4-bits]
          - Split Into Two:   0100010111010110 [L] 1000101101100110 [R]
          - Swap Halves:      10001011011001100100010111010110
          - Bit Inversion:    01110100100110011011101000101001
          - Compressed Key:   01001011011110101001111110011101   [done by compression P-Box]
          - XOR with Key:     00111111111000110010010110110100

          - FUNCTION OUTPUT:  00111111111000110010010110110100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10111110111101000010111110000010

       - FUNCTION OUTPUT:          00111111111000110010010110110100

       - Left XOR FUNCTION OUTPUT: 10000001000101110000101000110110

       - Next Round Left 32 Bits:  10101100011111011011111111011101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10000001000101110000101000110110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10101100011111011011111111011101

       - Right 32 Bits:            10000001000101110000101000110110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010111110100010001001101010001100100100001011001010000   [Subkey: 13]
          - Input Half:       10000001000101110000101000110110
          - S-Box Result:     00101010101011011111010000010000   [per every group of 4-bits]
          - Split Into Two:   0010101010101101 [L] 1111010000010000 [R]
          - Swap Halves:      11110100000100000010101010101101
          - Bit Inversion:    00001011111011111101010101010010
          - Compressed Key:   01111000000110101100010011000000   [done by compression P-Box]
          - XOR with Key:     01110011111101010001000110010010

          - FUNCTION OUTPUT:  01110011111101010001000110010010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10101100011111011011111111011101

       - FUNCTION OUTPUT:          01110011111101010001000110010010

       - Left XOR FUNCTION OUTPUT: 11011111100010001010111001001111

       - Next Round Left 32 Bits:  10000001000101110000101000110110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11011111100010001010111001001111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10000001000101110000101000110110

       - Right 32 Bits:            11011111100010001010111001001111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100000101110111011001010111001101101111010011010111   [Subkey: 12]
          - Input Half:       11011111100010001010111001001111
          - S-Box Result:     01101011001000100100110001111011   [per every group of 4-bits]
          - Split Into Two:   0110101100100010 [L] 0100110001111011 [R]
          - Swap Halves:      01001100011110110110101100100010
          - Bit Inversion:    10110011100001001001010011011101
          - Compressed Key:   01011010110110100110011101101011   [done by compression P-Box]
          - XOR with Key:     11101001010111101111001110110110

          - FUNCTION OUTPUT:  11101001010111101111001110110110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10000001000101110000101000110110

       - FUNCTION OUTPUT:          11101001010111101111001110110110

       - Left XOR FUNCTION OUTPUT: 01101000010010011111100110000000

       - Next Round Left 32 Bits:  11011111100010001010111001001111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101000010010011111100110000000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11011111100010001010111001001111

       - Right 32 Bits:            01101000010010011111100110000000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101111101000100010011010100011001001000010110010100   [Subkey: 11]
          - Input Half:       01101000010010011111100110000000
          - S-Box Result:     00000010011100111011001100101111   [per every group of 4-bits]
          - Split Into Two:   0000001001110011 [L] 1011001100101111 [R]
          - Swap Halves:      10110011001011110000001001110011
          - Bit Inversion:    01001100110100001111110110001100
          - Compressed Key:   01011110010011100011000101111000   [done by compression P-Box]
          - XOR with Key:     00010010100111101100110011110100

          - FUNCTION OUTPUT:  00010010100111101100110011110100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11011111100010001010111001001111

       - FUNCTION OUTPUT:          00010010100111101100110011110100

       - Left XOR FUNCTION OUTPUT: 11001101000101100110001010111011

       - Next Round Left 32 Bits:  01101000010010011111100110000000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001101000101100110001010111011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101000010010011111100110000000

       - Right 32 Bits:            11001101000101100110001010111011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11100101000001011101110110010101110011011011110100110101   [Subkey: 10]
          - Input Half:       11001101000101100110001010111011
          - S-Box Result:     01010110101000000000111010001000   [per every group of 4-bits]
          - Split Into Two:   0101011010100000 [L] 0000111010001000 [R]
          - Swap Halves:      00001110100010000101011010100000
          - Bit Inversion:    11110001011101111010100101011111
          - Compressed Key:   00010010011101101101100101011010   [done by compression P-Box]
          - XOR with Key:     11100011000000010111000000000101

          - FUNCTION OUTPUT:  11100011000000010111000000000101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101000010010011111100110000000

       - FUNCTION OUTPUT:          11100011000000010111000000000101

       - Left XOR FUNCTION OUTPUT: 10001011010010001000100110000101

       - Next Round Left 32 Bits:  11001101000101100110001010111011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001011010010001000100110000101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11001101000101100110001010111011

       - Right 32 Bits:            10001011010010001000100110000101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00001101011111010001000100110101000110010010000101100101   [Subkey: 9]
          - Input Half:       10001011010010001000100110000101
          - S-Box Result:     00101000011100100010001100101001   [per every group of 4-bits]
          - Split Into Two:   0010100001110010 [L] 0010001100101001 [R]
          - Swap Halves:      00100011001010010010100001110010
          - Bit Inversion:    11011100110101101101011110001101
          - Compressed Key:   10011111000100110100100000011010   [done by compression P-Box]
          - XOR with Key:     01000011110001011001111110010111

          - FUNCTION OUTPUT:  01000011110001011001111110010111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11001101000101100110001010111011

       - FUNCTION OUTPUT:          01000011110001011001111110010111

       - Left XOR FUNCTION OUTPUT: 10001110110100111111110100101100

       - Next Round Left 32 Bits:  10001011010010001000100110000101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001110110100111111110100101100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001011010010001000100110000101

       - Right 32 Bits:            10001110110100111111110100101100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111001010000010111011101100101011100110110111101001101   [Subkey: 8]
          - Input Half:       10001110110100111111110100101100
          - S-Box Result:     00101100011000011011011011100101   [per every group of 4-bits]
          - Split Into Two:   0010110001100001 [L] 1011011011100101 [R]
          - Swap Halves:      10110110111001010010110001100001
          - Bit Inversion:    01001001000110101101001110011110
          - Compressed Key:   11000000110110010111111011011110   [done by compression P-Box]
          - XOR with Key:     10001001110000111010110101000000

          - FUNCTION OUTPUT:  10001001110000111010110101000000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001011010010001000100110000101

       - FUNCTION OUTPUT:          10001001110000111010110101000000

       - Left XOR FUNCTION OUTPUT: 00000010100010110010010011000101

       - Next Round Left 32 Bits:  10001110110100111111110100101100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00000010100010110010010011000101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001110110100111111110100101100

       - Right 32 Bits:            00000010100010110010010011000101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000011010111110100010001001101010001100100100001011001   [Subkey: 7]
          - Input Half:       00000010100010110010010011000101
          - S-Box Result:     11111110001010001110011101011001   [per every group of 4-bits]
          - Split Into Two:   1111111000101000 [L] 1110011101011001 [R]
          - Swap Halves:      11100111010110011111111000101000
          - Bit Inversion:    00011000101001100000000111010111
          - Compressed Key:   00101011010010000101011000000110   [done by compression P-Box]
          - XOR with Key:     00110011111011100101011111010001

          - FUNCTION OUTPUT:  00110011111011100101011111010001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001110110100111111110100101100

       - FUNCTION OUTPUT:          00110011111011100101011111010001

       - Left XOR FUNCTION OUTPUT: 10111101001111011010101011111101

       - Next Round Left 32 Bits:  00000010100010110010010011000101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10111101001111011010101011111101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00000010100010110010010011000101

       - Right 32 Bits:            10111101001111011010101011111101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011110010100000101110111011001010111001101101111010011   [Subkey: 6]
          - Input Half:       10111101001111011010101011111101
          - S-Box Result:     10000110000101100100010010110110   [per every group of 4-bits]
          - Split Into Two:   1000011000010110 [L] 0100010010110110 [R]
          - Swap Halves:      01000100101101101000011000010110
          - Bit Inversion:    10111011010010010111100111101001
          - Compressed Key:   11111000011111100101001110110011   [done by compression P-Box]
          - XOR with Key:     01000011001101110010101001011010

          - FUNCTION OUTPUT:  01000011001101110010101001011010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00000010100010110010010011000101

       - FUNCTION OUTPUT:          01000011001101110010101001011010

       - Left XOR FUNCTION OUTPUT: 01000001101111000000111010011111

       - Next Round Left 32 Bits:  10111101001111011010101011111101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000001101111000000111010011111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10111101001111011010101011111101

       - Right 32 Bits:            01000001101111000000111010011111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010000110101111101000100010011010100011001001000010110   [Subkey: 5]
          - Input Half:       01000001101111000000111010011111
          - S-Box Result:     01111010100001011111110000111011   [per every group of 4-bits]
          - Split Into Two:   0111101010000101 [L] 1111110000111011 [R]
          - Swap Halves:      11111100001110110111101010000101
          - Bit Inversion:    00000011110001001000010101111010
          - Compressed Key:   01001010010100100101100110001001   [done by compression P-Box]
          - XOR with Key:     01001001100101101101110011110011

          - FUNCTION OUTPUT:  01001001100101101101110011110011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10111101001111011010101011111101

       - FUNCTION OUTPUT:          01001001100101101101110011110011

       - Left XOR FUNCTION OUTPUT: 11110100101010110111011000001110

       - Next Round Left 32 Bits:  01000001101111000000111010011111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110100101010110111011000001110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01000001101111000000111010011111

       - Right 32 Bits:            11110100101010110111011000001110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010111100101000001011101110110010101110011011011110100   [Subkey: 4]
          - Input Half:       11110100101010110111011000001110
          - S-Box Result:     10110111010010001101000011111100   [per every group of 4-bits]
          - Split Into Two:   1011011101001000 [L] 1101000011111100 [R]
          - Swap Halves:      11010000111111001011011101001000
          - Bit Inversion:    00101111000000110100100010110111
          - Compressed Key:   01111010000110110001110011101000   [done by compression P-Box]
          - XOR with Key:     01010101000110000101010001011111

          - FUNCTION OUTPUT:  01010101000110000101010001011111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01000001101111000000111010011111

       - FUNCTION OUTPUT:          01010101000110000101010001011111

       - Left XOR FUNCTION OUTPUT: 00010100101001000101101011000000

       - Next Round Left 32 Bits:  11110100101010110111011000001110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00010100101001000101101011000000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110100101010110111011000001110

       - Right 32 Bits:            00010100101001000101101011000000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100001101011111010001000100110101000110010010000101   [Subkey: 3]
          - Input Half:       00010100101001000101101011000000
          - S-Box Result:     10100111010001111001010001011111   [per every group of 4-bits]
          - Split Into Two:   1010011101000111 [L] 1001010001011111 [R]
          - Swap Halves:      10010100010111111010011101000111
          - Bit Inversion:    01101011101000000101100010111000
          - Compressed Key:   01011110110110001001001001101010   [done by compression P-Box]
          - XOR with Key:     00110101011110001100101011010010

          - FUNCTION OUTPUT:  00110101011110001100101011010010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110100101010110111011000001110

       - FUNCTION OUTPUT:          00110101011110001100101011010010

       - Left XOR FUNCTION OUTPUT: 11000001110100111011110011011100

       - Next Round Left 32 Bits:  00010100101001000101101011000000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000001110100111011110011011100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00010100101001000101101011000000

       - Right 32 Bits:            11000001110100111011110011011100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110101111001010000010111011101100101011100110110111101   [Subkey: 2]
          - Input Half:       11000001110100111011110011011100
          - S-Box Result:     01011010011000011000010101100101   [per every group of 4-bits]
          - Split Into Two:   0101101001100001 [L] 1000010101100101 [R]
          - Swap Halves:      10000101011001010101101001100001
          - Bit Inversion:    01111010100110101010010110011110
          - Compressed Key:   01010110000011101100101101111110   [done by compression P-Box]
          - XOR with Key:     00101100100101000110111011100000

          - FUNCTION OUTPUT:  00101100100101000110111011100000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00010100101001000101101011000000

       - FUNCTION OUTPUT:          00101100100101000110111011100000

       - Left XOR FUNCTION OUTPUT: 00111000001100000011010000100000

       - Next Round Left 32 Bits:  11000001110100111011110011011100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111000001100000011010000100000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000001110100111011110011011100

       - Right 32 Bits:            00111000001100000011010000100000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100101000011010111110100010001001101010001100100100001   [Subkey: 1]
          - Input Half:       00111000001100000011010000100000
          - S-Box Result:     00010010000111110001011111101111   [per every group of 4-bits]
          - Split Into Two:   0001001000011111 [L] 0001011111101111 [R]
          - Swap Halves:      00010111111011110001001000011111
          - Bit Inversion:    11101000000100001110110111100000
          - Compressed Key:   00010011111100100110100000010010   [done by compression P-Box]
          - XOR with Key:     11111011111000101000010111110010

          - FUNCTION OUTPUT:  11111011111000101000010111110010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000001110100111011110011011100

       - FUNCTION OUTPUT:          11111011111000101000010111110010

       - Left XOR FUNCTION OUTPUT: 00111010001100010011100100101110

       - Next Round Left 32 Bits:  00111000001100000011010000100000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111010001100010011100100101110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0011101000110001001110010010111000111000001100000011010000100000

 > Processed Block:     0011101000110001001110010010111000111000001100000011010000100000


FINAL PROCESSED DATA BLOCKS: 0011001000110000001100010011010100101101001100000011010100101101,0011000000110101001000000011000100110110001110100011001100110011,0011101000110001001110010010111000111000001100000011010000100000,

BLOCKS IN ASCII:             2015-05-05 16:33:19.804 

