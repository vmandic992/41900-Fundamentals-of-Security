import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.sql.Timestamp;
import java.util.Date;

public class Client 
{
	private String username;
	private String password;
		
	//These 3 elements are sent to the Client by the AS
	private String keyTGS;		//TGS key
	private String ivTGS;		//TGS IV
	private String ticket;		//Ticket from AS
	
	//These 2 elements are sent to the Client by the TGS
	private String keyClientServer;		//Session key (generated by TGS)
	private String ivClientServer;		//Session key (generated by TGS)
	
	private String blockCipherMode;		//CBC or ECB
	
	private KerberosSystem kerberos;
	
	private String destinationServerName = "RSA-KeyGen-Server";
	
	
	/*	Client constructor receives a username, password, block-cipher mode and reference to Kerberos
	 */
	public Client(String username, String password, String blockCipherMode, KerberosSystem kerberos) 
	{
		this.username = username;
		this.password = password;
		this.blockCipherMode = blockCipherMode;
		this.kerberos = kerberos;
		System.out.println(toString());
	}
	
	
	
	public String toString()
	{
		String s = "\n\n SIMULATED CLIENT ___________________________________________________________________________\n\n";
		s +=	   " - Wants to access a Resource Server." + "\n\n";
		s +=       " - Username: " + username + "\n";
		s +=       " - Password: " + password + "\n";
		return s;
	}
	
	
	/*	- Client makes a request to send to the AS
	 *  - Request contains a small message + the client's username
	 *  - Then the AS receives the request, and a reference to the Client object
	 */
	public void sendRequestToAS() throws IOException, ParseException
	{
		String request = " > REQUEST: I want to authenticate and access network resources.\n";
		request +=       "   USERNAME: " + username;
		
		System.out.println("Client sends the following message to AS: " + "\n\n" + request + "\n");
		kerberos.pauseSimulation();
		
		kerberos.AS.receiveRequest(request, this);
	}
		
	
	/*	- Client receives AS response, which is encrypted with the Client's password
	 * 	- Client decrypts the response using method 'encryptOrDecrypt()'
	 * 	- Client then sends the decrypted message to method 'dissectMessageFromAS()' to extract the elements
	 */
	public void receiveASResponse(String message) throws IOException, ParseException
	{
		kerberos.printStepFive();
		
		System.out.println("1. Client receives encrypted message from AS: " + "\n\n" + message + "\n\n");		
		
		String plaintext = encryptOrDecrypt(message, password, null, "Client_Decrypt_From_AS.txt", DES.processingMode.DECRYPT);
		
		System.out.println("2. Client decrypts response using their password: ('" + password + "') - See 'CLIENT_DECRYPT_FROM_AS.txt'"
				+ "\n\n" + plaintext + "\n\n");
		
		kerberos.pauseSimulation();
		dissectMessageFromAS(plaintext);
	}
	
	
	/*	- Method receives data to encrypt/decrypt, key, IV, capture file path and mode (encrypt or decrypt)
	 *  - Method then makes a new TripleDES object to encrypt/decrypt the data
	 *  - The method takes into consideration the block-cipher mode to use (CBC or ECB)
	 */
	public String encryptOrDecrypt(String data, String key, String IV, String captureFilePath, DES.processingMode mode) throws IOException
	{
		if (blockCipherMode.equals("CBC") && (IV != null))
			return (new TripleDES(key, IV, captureFilePath).processData(data, DES.blockCipherMode.CBC, mode));
		else
			return (new TripleDES(key, null, captureFilePath).processData(data, DES.blockCipherMode.ECB, mode));
	}
	
	
	/*	- Method receives the message from the AS (decrypted with the Client's password)
	 *  - The 'extractDetails()' method is used to extract the message's elements (Ticket, and TGS Key/IV)
	 *  - The extracted elements are printed out
	 */
	private void dissectMessageFromAS(String messageFromAS) throws IOException, ParseException
	{
		kerberos.printStepSix();
		
		extractDetails(messageFromAS);

		System.out.println("Client extracts Ticket, TGS-Key & TGS-IV from the decrypted message [from Step 5]:" + "\n");
		String output = "Extracted Ticket:  -------------------------------------------- \n\n" + ticket + "\n";
		output += 	    "Extracted TGS-key: -------------------------------------------- \n" + " > " + keyTGS + "\n" + "\n";
		output += 	    "Extracted TGS-IV:  -------------------------------------------- \n" + " > " + ivTGS + "\n";
		System.out.println(output + "\n");
		
		kerberos.pauseSimulation();
		
		transmitRequestToTGS();
	}
	
	
	/*	- Method receives the message from the AS and extracts the 3 parts; Ticket, TGS Key and TGS IV
	 *  - To extract the elements it uses the 'extractBetweenTags()' method
	 *  - The 3 elements are stored as attributes in the Client class (see top of class)
	 */
	private void extractDetails(String messageFromAS)
	{
		ticket = extractBetweenTags(messageFromAS, "[START_TICKET]" + "\n", "[END_TICKET]");
		keyTGS = extractBetweenTags(messageFromAS, "[START_TGS_KEY]", "[END_TGS_KEY]");
		ivTGS =  extractBetweenTags(messageFromAS, "[START_TGS_IV]", "[END_TGS_IV]");
	}
	
	
	/*	- Method creates a message for the Client to send to the TGS
	 *  - The Client makes a timestamp using 'generateTimestamp()' and then encrypts it with the TGS Key
	 *  - A message is then created using method 'generateMessageToTGS()', passing in the encrypted timestamp
	 *  - The TGS is called to receive the message
	 *  - If the MITM attack is being simulated, get the Hacker to copy the message on transmission
	 */
	private void transmitRequestToTGS() throws IOException, ParseException
	{
		kerberos.printStepSeven();
		
		System.out.println("1. Client gets the Resource Server name and generates an encrypted Timestamp:" + "\n");

		String timestamp = generateTimeStamp();
		String encryptedTimestamp = encryptOrDecrypt(timestamp, keyTGS, ivTGS, "Client_Encrypt_To_TGS.txt", DES.processingMode.ENCRYPT);
																		 
		String output = "Server Name:                                     \n" + " > " + destinationServerName + "\n\n";
		output += 		"Timestamp:                                       \n" + " > " + timestamp + "\n\n\n";
		output +=		"Timestamp is encrypted using TGS-Key ('" + keyTGS + "') & TGS-IV ('" + ivTGS + "') - See 'CLIENT_ENCRYPT_TO_TGS.txt' \n\n";
		output +=		"Encrypted Timestamp:                             \n" + " > " + encryptedTimestamp + "\n";
		System.out.println(output + "\n");
		
		
		System.out.println("2. Client creates a message containing the Ticket, Server Name, and encrypted Timestamp:" + "\n");
		String message = generateMessageToTGS(encryptedTimestamp);				
		System.out.println(message + "\n\n");
		
		//kerberos.pauseSimulation();
		
		if (kerberos.includeAttackInSimulation)
			kerberos.hacker.copyTransmission(message);
			
		kerberos.TGS.receiveRequest(message);
	}
	
	
	/*	- Method contructs the message for the Client to send to the TGS
	 *  - Message contains the Ticket (from the AS), server name (see top of class) and the encrypted timestamp
	 */
	private String generateMessageToTGS(String encryptedTimestamp) throws IOException
	{
		String message = "";
		message += 	"[START_TICKET]" + "\n" + ticket + "[END_TICKET]" + "\n";
		message +=  "[START_SERVER_NAME]" + destinationServerName + "[END_SERVER_NAME]" + "\n";
		message +=  "[START_TIMESTAMP]" + encryptedTimestamp + "[END_TIMESTAMP]";
		
		return message;
	}
	
	
	/*	- Method takes a message and 2 tags (delimiters)
	 *  - The string-data BETWEEN these 2 tags is returned
	 *  
	 *  - E.g.
	 *  	> m 	   = [START]Hello[END]
	 *  	> startTag = [START]
	 *  	> endTag   = [END]
	 *  	> RETURN   = Hello
	 */
	private String extractBetweenTags(String m, String startTag, String endTag)
	{
		int startKeyIndex = m.indexOf(startTag) + startTag.length();
		int endKeyIndex = m.indexOf(endTag);
		if (!(startKeyIndex == -1 || endKeyIndex == -1))
			return m.substring(startKeyIndex, endKeyIndex);
		return null;
	}
	
	
	
	/*	- Method creates a timestamp (for the Client to send to the TGS)
	 * 	- To do this we create a Java 'Date' object and convert it into a 'yyyy/mm/dd hh:mm:ss' formatted string
	 */
	private String generateTimeStamp()
	{
		Date date = new Date();
		return (new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS")).format(date);
		//return new Timestamp(date.getTime()).toString();
	}
	
	
	/*	- Method receives the session key generated by the TGS (same key is sent to the Server)
	 *  - Method decrypts the session key using the TGS key
	 *  - Method then uses the 'extractSessionKeyElements()' method to extract the Key and IV from the decrypted session key message
	 *	- Client then tells KerberosSystem object that it finally has a session key
	 */
	public void receiveSessionKey(String encryptedKey) throws IOException
	{
		kerberos.printStepElevenB();
		
		System.out.println("1. Client receives encrypted Client/Server-Key and Client/Server-IV: " + "\n");
		System.out.println("   > Ciphertext:  " + encryptedKey + "\n\n");
		
		String plaintext = encryptOrDecrypt(encryptedKey, keyTGS, ivTGS, "Client_Decrypt_From_TGS.txt", DES.processingMode.DECRYPT);
		
		System.out.println("2. Client decrypts message with the TGS-Key ('" + keyTGS + "') & TGS-IV ('" + ivTGS + "'): "
			    + " - See 'CLIENT_DECRYPT_FROM_TGS.txt' \n");
		
		System.out.println("   > Plaintext:   " + plaintext + "\n\n");
		
		extractSessionKeyElements(plaintext);
		
		System.out.println("3. Client extracts the Session key & IV: " + "\n");
		System.out.println("   > Key:         " + keyClientServer + "\n");
		System.out.println("   > IV:          " + ivClientServer + "\n\n");
		
		kerberos.clientHasKey = true;
		kerberos.pauseSimulation();
	}
	
	
	/*	- Method uses 'extractBetweeTags()' to extract the Client/Server session key and IV
	 */
	private void extractSessionKeyElements(String plaintextKey)
	{
		keyClientServer = extractBetweenTags(plaintextKey, "[START_KEY]", "[END_KEY]");
		ivClientServer =  extractBetweenTags(plaintextKey, "[START_IV]", "[END_IV]");
	}
	
	
	/*	- Method sends an RSA-key request to the Server (after Client and Server receive session key from TGS)
	 *  - The correct Server is found using the Server name ('destinationServerName')
	 *  - The request message is created and encrypted with the new session key shared between Client and Server
	 *  - The Server is then called to receive the encryped request
	 */
	public void requestRSAKeys() throws IOException, ParseException
	{	
		Server server = findServer(destinationServerName);
		String message = "Hello server, I would like a new RSA key pair";
		
		System.out.println("1. Client creates a plaintext message to send to the Server: " + "\n");
		System.out.println("   > Plaintext:    " + message + "\n\n");
		
		String encryptedMessage = encryptOrDecrypt(message, keyClientServer, ivClientServer, "Client_Encrypt_To_Server.txt", DES.processingMode.ENCRYPT);
		
		System.out.println("2. Client encrypts message with the Client/Server-Key ('" + keyClientServer + "')"
				+ " & Client/Server-IV ('" + ivClientServer + "') - See 'CLIENT_ENCRYPT_TO_SERVER.txt' \n");
		System.out.println("   > Ciphertext:   " + encryptedMessage + "\n\n");
		
		kerberos.pauseSimulation();
		server.receiveClientRequest(encryptedMessage, this);
	}
	
	
	/*	- Used to find the correct Server from the list of Servers in the KerberosSystem class
	 *  - Only 1 server (RSA key generator) exists in the list, but this is just to show that the Client is actually using the
	 *    Server name to look up the correct Server
	 */
	private Server findServer(String serverName)
	{
		for (Server server: kerberos.servers)
		{
			if (server.hasName(serverName))
				return server;
		}
		return null;
	}
	
	
	/*	- Method receives the encrypted RSA key-pair from the Server
	 *  - The encrypted key-pair is decrypted with the Client/Server session key
	 */
	public void receiveRSAKeys(String message) throws IOException, ParseException
	{	
		kerberos.printStepFourteen();
		
		System.out.println("1. Client receives encrypted key-pair from Server: " + "\n\n" + message + "\n");

		String decryptedMessage = encryptOrDecrypt(message, keyClientServer, ivClientServer, "Client_Decrypt_From_Server.txt", DES.processingMode.DECRYPT);
		
		System.out.println("2. Client decrypts key pair with Client/Server-Key & Client/Server-IV: "
				+ "- See 'CLIENT_DECRYPT_FROM_SERVER.txt'" + "\n");
		
		System.out.println(decryptedMessage + "\n");
		
		kerberos.endSimulation();
	}
}
