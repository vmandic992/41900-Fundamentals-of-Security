import java.io.IOException;
import java.text.ParseException;

public class Server 
{
	private String serverName;			//Name of server
	private String service;				//Service the server provides (e.g. 'RSA key generator')
	
	private String keyServerTGS;		//Shared key between Server and TGS
	private String ivServerTGS;			//Shared IV between Servern and TGS
	
	private String keyClientServer;		//Shared key between Client and Server (generated by TGS)
	private String ivClientServer;		//Shared IV between Client and Server (generated by TGS)
	
	private String blockCipherMode;		//ECB or CBC
	private KerberosSystem kerberos;	//KerberosSystem object

	
	/*	Constructor receives values for the above elements (besides keyClientServer and ivClientServer)
	 */
	public Server(String serverName, String service, String blockCipherMode, KerberosSystem kerberos,
				  String keyServerTGS, String ivServerTGS) 
	{
		this.serverName = serverName;
		this.service = service;
		this.kerberos = kerberos;
		this.blockCipherMode = blockCipherMode;
		this.keyServerTGS = keyServerTGS;
		this.ivServerTGS = ivServerTGS;
		System.out.println(toString());
	}
	
	
	public String toString()
	{
		String s = "\n\n RESOURCE SERVER ___________________________________________________________________________\n\n";
		s +=       " - Provides a service for Clients." + "\n\n";
		s +=       " - Name:      " + serverName + "\n";
		s +=       " - Service:   " + service + "\n\n";
		s +=	   " - Configured with the TGS-Server Key and TGS-Server IV (to use with the TGS) {RANDOMLY GENERATED}" + "\n";
		s +=	   "    > Server/TGS-KEY: " + keyServerTGS + "\n";
		s +=	   "    > Server/TGS-IV:  " + ivServerTGS + "\n\n";
		return s;
	}
	
	
	/*	- Receives a name, and returns true if the Server has the same name
	 */
	public boolean hasName(String serverName)
	{
		return this.serverName.equals(serverName);
	}
	
	
	public String getName()
	{
		return serverName;
	}
	
	
	/*	- Method receives:
	 * 		1. Data
	 * 	    2. 168-bit 3DES Key
	 *      3. 64-bit IV
	 *      4. Capture file name
	 *      5. Mode (encrypt or decrypt)
	 *      
	 *  - Make a new TripleDES object and call 'processData()' to encrypt or decrypt the data
	 * 
	 *  - If the 'blockCipherMode' is CBC, then use CBC, otherwise use ECB
	 * 
	 */
	public String encryptOrDecrypt(String data, String key, String IV, String captureFilePath, DES.processingMode mode) throws IOException
	{
		if (blockCipherMode.equals("CBC"))
			return (new TripleDES(key, IV, captureFilePath).processData(data, DES.blockCipherMode.CBC, mode));
		else
			return (new TripleDES(key, null, captureFilePath).processData(data, DES.blockCipherMode.ECB, mode));
	}
	
	
	/*	- Server receives the encrypted session key from the TGS
	 * 	- Server then decrypts it with the shared key between the Server and TGS (keyServerTGS)
	 * 	
	 * 	- The Client/Server encryption key is then extracted from the decrypted session key message 
	 * 	- The Client/Server IV (for CBC) is then extracted from the decrypted session key message 
	 * 
	 * 	- Server tells KerberosSystem object that it finally has a session key
	 */
	public void receiveSessionKey(String encryptedKey) throws IOException
	{
		kerberos.printStepElevenA();
		System.out.println("1. Server receives encrypted Client/Server-Key and Client/Server-IV: " + "\n");
		System.out.println("   > Ciphertext:  " + encryptedKey + "\n\n");

		String plaintext = encryptOrDecrypt(encryptedKey, keyServerTGS, ivServerTGS, "Server_Decrypt_From_TGS.txt", DES.processingMode.DECRYPT);
		
		System.out.println("2. Server decrypts message with the Server/TGS-Key ('" + keyServerTGS + "') & Server/TGS-IV ('" + ivServerTGS + "'): "
						    + " - See 'SERVER_DECRYPT_FROM_TGS.txt' \n");
		
		System.out.println("   > Plaintext:   " + plaintext + "\n\n");
		
		extractSessionKeyElements(plaintext);
		
		System.out.println("3. Server extracts the Session key & IV: " + "\n");
		System.out.println("   > Key:         " + keyClientServer + "\n");
		System.out.println("   > IV:          " + ivClientServer + "\n\n");
		
		kerberos.serverHasKey = true;
		kerberos.pauseSimulation();
	}
	
	
	/*	- Method uses 'extractBetweeTags()' to extract the Client/Server session key and IV
	 */
	private void extractSessionKeyElements(String plaintextKey)
	{
		keyClientServer = extractBetweenTags(plaintextKey, "[START_KEY]", "[END_KEY]");
		ivClientServer =  extractBetweenTags(plaintextKey, "[START_IV]", "[END_IV]");
	}
	
	
	/*	- Method takes a message and 2 tags (delimiters)
	 *  - The string-data BETWEEN these 2 tags is returned
	 *  
	 *  - E.g.
	 *  	> m 	   = [START]Hello[END]
	 *  	> startTag = [START]
	 *  	> endTag   = [END]
	 *  	> RETURN   = Hello
	 */
	private String extractBetweenTags(String m, String startTag, String endTag)
	{
		int startKeyIndex = m.indexOf(startTag) + startTag.length();
		int endKeyIndex = m.indexOf(endTag);
		if (!(startKeyIndex == -1 || endKeyIndex == -1))
			return m.substring(startKeyIndex, endKeyIndex);
		return null;
	}
	
	
	
	/*	- Receives an encrypted request from the Client (to generate an RSA key pair), and also a reference to the requesting Client
	 * 	- Decrypts the request using the new Client/Server session key obtained from the TGS
	 * 
	 *  - Then calls the method 'transmitRSAKeys()', passing in the requesting Client object
	 */
	public void receiveClientRequest(String request, Client client) throws IOException, ParseException
	{
		System.out.println("\n3. Server receives message from Client: " + "\n");
		System.out.println("   > Ciphertext:   " + request + "\n\n");

		String plaintext = encryptOrDecrypt(request, keyClientServer, ivClientServer, "Server_Decrypt_From_Client.txt", DES.processingMode.DECRYPT);
	
		System.out.println("4. Server decrypts message with the Client/Server-Key ('" + keyClientServer + "')"
				+ " & Client/Server-IV ('" + ivClientServer + "') - See 'SERVER_DECRYPT_FROM_CLIENT.txt' \n");
		System.out.println("   > Plaintext:    " + plaintext + "\n\n");
		
		kerberos.pauseSimulation();
		
		transmitRSAKeys(client);
	}
	
	
	/*	- Generates a new RSA object which creates a new random RSA key pair
	 * 	- The Server then makes a message using the RSA 'toString()' method
	 * 	- The Server then encrypts the message with the Client/Server session key, and sends it to the Client
	 */
	private void transmitRSAKeys(Client client) throws IOException, ParseException
	{
		kerberos.printStepThirteen();
		
		RSA rsa = new RSA();
		String message = rsa.toString();
		
		System.out.println("1. Server generates a new RSA key pair: " + "\n\n" + rsa.toString() + "\n\n");
		
		System.out.println("2. Server encrypts key pair with Client/Server-Key & Client/Server-IV and sends it to Client: "
				+ "- See 'SERVER_ENCRYPT_TO_CLIENT.txt'" + "\n");
		
		String encryptedMessage = encryptOrDecrypt(message, keyClientServer, ivClientServer, "Server_Encrypt_To_Client.txt", DES.processingMode.ENCRYPT);
		
		System.out.println(encryptedMessage + "\n\n");		
		
		kerberos.pauseSimulation();
		
		client.receiveRSAKeys(encryptedMessage);
	}
}
