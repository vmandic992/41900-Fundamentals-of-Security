Triple DES Capture

168-bit key: 8js4lOx92JgmaU3ifRxQp

3 x 56-bit DES keys: 8js4lOx, 92JgmaU, 3ifRxQp

Initialization Vector: suAg0dq3

=========================================================================================================================
STAGE 1: DES [DECRYPT] ==================================================================================================
=========================================================================================================================

56-bit key: 3ifRxQp
In Binary:  00110011011010010110011001010010011110000101000101110000

Subkeys:    Key i = Key (i - 1) [Shifted left by 1 and inverted]

Subkey 1  : 11110011001001011010011001101011011000011110101110100011
Subkey 2  : 00000011001101101001011001100101001001111000010100010111
Subkey 3  : 00111111001100100101101001100110101101100001111010111010
Subkey 4  : 01110000001100110110100101100110010100100111100001010001
Subkey 5  : 10100011111100110010010110100110011010110110000111101011
Subkey 6  : 00010111000000110011011010010110011001010010011110000101
Subkey 7  : 10111010001111110011001001011010011001101011011000011110
Subkey 8  : 01010001011100000011001101101001011001100101001001111000
Subkey 9  : 11101011101000111111001100100101101001100110101101100001
Subkey 10 : 10000101000101110000001100110110100101100110010100100111
Subkey 11 : 00011110101110100011111100110010010110100110011010110110
Subkey 12 : 01111000010100010111000000110011011010010110011001010010
Subkey 13 : 01100001111010111010001111110011001001011010011001101011
Subkey 14 : 00100111100001010001011100000011001101101001011001100101
Subkey 15 : 10110110000111101011101000111111001100100101101001100110
Subkey 16 : 01010010011110000101000101110000001100110110100101100110

S-BOX (4x4):
INPUT | OUTPUT
------|-------
0000  | 1111
0001  | 1010
0010  | 1110
0011  | 0001
0100  | 0111
0101  | 1001
0110  | 0000
0111  | 1101
1000  | 0010
1001  | 0011
1010  | 0100
1011  | 1000
1100  | 0101
1101  | 0110
1110  | 1100
1111  | 1011

P-BOX (7 bits compressed to 4 bits)
Bit at Position X goes to Position Y
X: | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
Y: | 4 | 3 | 1 | 2 | 1 | 4 | 3 |


Data to decrypt         : ä^??8<¼øeqr·?ì?²??â¶f

Data padded with spaces : ä^??8<¼øeqr·?ì?²??â¶f[Padded with '0' spaces]

Data in ASCII           : 228,94,63,158,56,60,22,188,248,101,113,114,183,19,156,236,150,178,151,156,4,226,182,102,

Data in Binary          : 11100100,01011110,00111111,10011110,00111000,00111100,00010110,10111100,11111000,01100101,01110001,01110010,10110111,00010011,10011100,11101100,10010110,10110010,10010111,10011100,00000100,11100010,10110110,01100110,

Data in 64-bit Blocks   : 1110010001011110001111111001111000111000001111000001011010111100,1111100001100101011100010111001010110111000100111001110011101100,1001011010110010100101111001110000000100111000101011011001100110,

!!!!NOTE: Subkeys used in REVERSE order for DECRYPTION



<<<<<< PROCESSING IN 'CBC' MODE >>>>>>


!!!CBC: Initial Previous Ciphertext = IV:               (0111001101110101010000010110011100110000011001000111000100110011)

Ciphertext Block 1:                                      1110010001011110001111111001111000111000001111000001011010111100

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100100010111100011111110011110

       - Right 32 Bits:            00111000001111000001011010111100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010010011110000101000101110000001100110110100101100110   [Subkey: 16]
          - Input Half:       00111000001111000001011010111100
          - S-Box Result:     00010010000101011010000010000101   [per every group of 4-bits]
          - Split Into Two:   0001001000010101 [L] 1010000010000101 [R]
          - Swap Halves:      10100000100001010001001000010101
          - Bit Inversion:    01011111011110101110110111101010
          - Compressed Key:   01101101010110110010111000011001   [done by compression P-Box]
          - XOR with Key:     00110010001000011100001111110011

          - FUNCTION OUTPUT:  00110010001000011100001111110011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100100010111100011111110011110

       - FUNCTION OUTPUT:          00110010001000011100001111110011

       - Left XOR FUNCTION OUTPUT: 11010110011111111111110001101101

       - Next Round Left 32 Bits:  00111000001111000001011010111100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010110011111111111110001101101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111000001111000001011010111100

       - Right 32 Bits:            11010110011111111111110001101101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10110110000111101011101000111111001100100101101001100110   [Subkey: 15]
          - Input Half:       11010110011111111111110001101101
          - S-Box Result:     01100000110110111011010100000110   [per every group of 4-bits]
          - Split Into Two:   0110000011011011 [L] 1011010100000110 [R]
          - Swap Halves:      10110101000001100110000011011011
          - Bit Inversion:    01001010111110011001111100100100
          - Compressed Key:   01111011101100110110011010001001   [done by compression P-Box]
          - XOR with Key:     00110001010010101111100110101101

          - FUNCTION OUTPUT:  00110001010010101111100110101101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111000001111000001011010111100

       - FUNCTION OUTPUT:          00110001010010101111100110101101

       - Left XOR FUNCTION OUTPUT: 00001001011101101110111100010001

       - Next Round Left 32 Bits:  11010110011111111111110001101101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001001011101101110111100010001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010110011111111111110001101101

       - Right 32 Bits:            00001001011101101110111100010001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100111100001010001011100000011001101101001011001100101   [Subkey: 14]
          - Input Half:       00001001011101101110111100010001
          - S-Box Result:     11110011110100001100101110101010   [per every group of 4-bits]
          - Split Into Two:   1111001111010000 [L] 1100101110101010 [R]
          - Swap Halves:      11001011101010101111001111010000
          - Bit Inversion:    00110100010101010000110000101111
          - Compressed Key:   00110010000100000110010111001010   [done by compression P-Box]
          - XOR with Key:     00000110010001010110100111100101

          - FUNCTION OUTPUT:  00000110010001010110100111100101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010110011111111111110001101101

       - FUNCTION OUTPUT:          00000110010001010110100111100101

       - Left XOR FUNCTION OUTPUT: 11010000001110101001010110001000

       - Next Round Left 32 Bits:  00001001011101101110111100010001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010000001110101001010110001000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001001011101101110111100010001

       - Right 32 Bits:            11010000001110101001010110001000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100001111010111010001111110011001001011010011001101011   [Subkey: 13]
          - Input Half:       11010000001110101001010110001000
          - S-Box Result:     01101111000101000011100100100010   [per every group of 4-bits]
          - Split Into Two:   0110111100010100 [L] 0011100100100010 [R]
          - Swap Halves:      00111001001000100110111100010100
          - Bit Inversion:    11000110110111011001000011101011
          - Compressed Key:   00000101100011110110100111000111   [done by compression P-Box]
          - XOR with Key:     11000011010100101111100100101100

          - FUNCTION OUTPUT:  11000011010100101111100100101100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001001011101101110111100010001

       - FUNCTION OUTPUT:          11000011010100101111100100101100

       - Left XOR FUNCTION OUTPUT: 11001010001001000001011000111101

       - Next Round Left 32 Bits:  11010000001110101001010110001000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001010001001000001011000111101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010000001110101001010110001000

       - Right 32 Bits:            11001010001001000001011000111101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111000010100010111000000110011011010010110011001010010   [Subkey: 12]
          - Input Half:       11001010001001000001011000111101
          - S-Box Result:     01010100111001111010000000010110   [per every group of 4-bits]
          - Split Into Two:   0101010011100111 [L] 1010000000010110 [R]
          - Swap Halves:      10100000000101100101010011100111
          - Bit Inversion:    01011111111010011010101100011000
          - Compressed Key:   11001000110100110111101011000001   [done by compression P-Box]
          - XOR with Key:     10010111001110101101000111011001

          - FUNCTION OUTPUT:  10010111001110101101000111011001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010000001110101001010110001000

       - FUNCTION OUTPUT:          10010111001110101101000111011001

       - Left XOR FUNCTION OUTPUT: 01000111000000000100010001010001

       - Next Round Left 32 Bits:  11001010001001000001011000111101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000111000000000100010001010001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11001010001001000001011000111101

       - Right 32 Bits:            01000111000000000100010001010001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00011110101110100011111100110010010110100110011010110110   [Subkey: 11]
          - Input Half:       01000111000000000100010001010001
          - S-Box Result:     01111101111111110111011110011010   [per every group of 4-bits]
          - Split Into Two:   0111110111111111 [L] 0111011110011010 [R]
          - Swap Halves:      01110111100110100111110111111111
          - Bit Inversion:    10001000011001011000001000000000
          - Compressed Key:   11111101101100110001011011101001   [done by compression P-Box]
          - XOR with Key:     01110101110101101001010011101001

          - FUNCTION OUTPUT:  01110101110101101001010011101001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11001010001001000001011000111101

       - FUNCTION OUTPUT:          01110101110101101001010011101001

       - Left XOR FUNCTION OUTPUT: 10111111111100101000001011010100

       - Next Round Left 32 Bits:  01000111000000000100010001010001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10111111111100101000001011010100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01000111000000000100010001010001

       - Right 32 Bits:            10111111111100101000001011010100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10000101000101110000001100110110100101100110010100100111   [Subkey: 10]
          - Input Half:       10111111111100101000001011010100
          - S-Box Result:     10001011101111100010111001100111   [per every group of 4-bits]
          - Split Into Two:   1000101110111110 [L] 0010111001100111 [R]
          - Swap Halves:      00101110011001111000101110111110
          - Bit Inversion:    11010001100110000111010001000001
          - Compressed Key:   00011010000000111000011001011011   [done by compression P-Box]
          - XOR with Key:     11001011100110111111001000011010

          - FUNCTION OUTPUT:  11001011100110111111001000011010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01000111000000000100010001010001

       - FUNCTION OUTPUT:          11001011100110111111001000011010

       - Left XOR FUNCTION OUTPUT: 10001100100110111011011001001011

       - Next Round Left 32 Bits:  10111111111100101000001011010100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001100100110111011011001001011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10111111111100101000001011010100

       - Right 32 Bits:            10001100100110111011011001001011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11101011101000111111001100100101101001100110101101100001   [Subkey: 9]
          - Input Half:       10001100100110111011011001001011
          - S-Box Result:     00100101001110001000000001111000   [per every group of 4-bits]
          - Split Into Two:   0010010100111000 [L] 1000000001111000 [R]
          - Swap Halves:      10000000011110000010010100111000
          - Bit Inversion:    01111111100001111101101011000111
          - Compressed Key:   10100100110100011110011010010010   [done by compression P-Box]
          - XOR with Key:     11011011010101100011110001010101

          - FUNCTION OUTPUT:  11011011010101100011110001010101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10111111111100101000001011010100

       - FUNCTION OUTPUT:          11011011010101100011110001010101

       - Left XOR FUNCTION OUTPUT: 01100100101001001011111010000001

       - Next Round Left 32 Bits:  10001100100110111011011001001011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01100100101001001011111010000001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001100100110111011011001001011

       - Right 32 Bits:            01100100101001001011111010000001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010001011100000011001101101001011001100101001001111000   [Subkey: 8]
          - Input Half:       01100100101001001011111010000001
          - S-Box Result:     00000111010001111000110000101010   [per every group of 4-bits]
          - Split Into Two:   0000011101000111 [L] 1000110000101010 [R]
          - Swap Halves:      10001100001010100000011101000111
          - Bit Inversion:    01110011110101011111100010111000
          - Compressed Key:   01001100100110010111011010000100   [done by compression P-Box]
          - XOR with Key:     00111111010011001000111000111100

          - FUNCTION OUTPUT:  00111111010011001000111000111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001100100110111011011001001011

       - FUNCTION OUTPUT:          00111111010011001000111000111100

       - Left XOR FUNCTION OUTPUT: 10110011110101110011100001110111

       - Next Round Left 32 Bits:  01100100101001001011111010000001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10110011110101110011100001110111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01100100101001001011111010000001

       - Right 32 Bits:            10110011110101110011100001110111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10111010001111110011001001011010011001101011011000011110   [Subkey: 7]
          - Input Half:       10110011110101110011100001110111
          - S-Box Result:     10000001011011010001001011011101   [per every group of 4-bits]
          - Split Into Two:   1000000101101101 [L] 0001001011011101 [R]
          - Swap Halves:      00010010110111011000000101101101
          - Bit Inversion:    11101101001000100111111010010010
          - Compressed Key:   11101111100110100011010111001101   [done by compression P-Box]
          - XOR with Key:     00000010101110000100101101011111

          - FUNCTION OUTPUT:  00000010101110000100101101011111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01100100101001001011111010000001

       - FUNCTION OUTPUT:          00000010101110000100101101011111

       - Left XOR FUNCTION OUTPUT: 01100110000111001111010111011110

       - Next Round Left 32 Bits:  10110011110101110011100001110111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01100110000111001111010111011110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10110011110101110011100001110111

       - Right 32 Bits:            01100110000111001111010111011110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010111000000110011011010010110011001010010011110000101   [Subkey: 6]
          - Input Half:       01100110000111001111010111011110
          - S-Box Result:     00000000101001011011100101101100   [per every group of 4-bits]
          - Split Into Two:   0000000010100101 [L] 1011100101101100 [R]
          - Swap Halves:      10111001011011000000000010100101
          - Bit Inversion:    01000110100100111111111101011010
          - Compressed Key:   01110000100101100011100011111010   [done by compression P-Box]
          - XOR with Key:     00110110000001011100011110100000

          - FUNCTION OUTPUT:  00110110000001011100011110100000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10110011110101110011100001110111

       - FUNCTION OUTPUT:          00110110000001011100011110100000

       - Left XOR FUNCTION OUTPUT: 10000101110100101111111111010111

       - Next Round Left 32 Bits:  01100110000111001111010111011110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10000101110100101111111111010111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01100110000111001111010111011110

       - Right 32 Bits:            10000101110100101111111111010111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10100011111100110010010110100110011010110110000111101011   [Subkey: 5]
          - Input Half:       10000101110100101111111111010111
          - S-Box Result:     00101001011011101011101101101101   [per every group of 4-bits]
          - Split Into Two:   0010100101101110 [L] 1011101101101101 [R]
          - Swap Halves:      10111011011011010010100101101110
          - Bit Inversion:    01000100100100101101011010010001
          - Compressed Key:   00101100100001010011111000110111   [done by compression P-Box]
          - XOR with Key:     01101000000101111110100010100110

          - FUNCTION OUTPUT:  01101000000101111110100010100110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01100110000111001111010111011110

       - FUNCTION OUTPUT:          01101000000101111110100010100110

       - Left XOR FUNCTION OUTPUT: 00001110000010110001110101111000

       - Next Round Left 32 Bits:  10000101110100101111111111010111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001110000010110001110101111000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10000101110100101111111111010111

       - Right 32 Bits:            00001110000010110001110101111000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110000001100110110100101100110010100100111100001010001   [Subkey: 4]
          - Input Half:       00001110000010110001110101111000
          - S-Box Result:     11111100111110001010011011010010   [per every group of 4-bits]
          - Split Into Two:   1111110011111000 [L] 1010011011010010 [R]
          - Swap Halves:      10100110110100101111110011111000
          - Bit Inversion:    01011001001011010000001100000111
          - Compressed Key:   01001100111010010001011000000010   [done by compression P-Box]
          - XOR with Key:     00010101110001000001010100000101

          - FUNCTION OUTPUT:  00010101110001000001010100000101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10000101110100101111111111010111

       - FUNCTION OUTPUT:          00010101110001000001010100000101

       - Left XOR FUNCTION OUTPUT: 10010000000101101110101011010010

       - Next Round Left 32 Bits:  00001110000010110001110101111000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010000000101101110101011010010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001110000010110001110101111000

       - Right 32 Bits:            10010000000101101110101011010010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00111111001100100101101001100110101101100001111010111010   [Subkey: 3]
          - Input Half:       10010000000101101110101011010010
          - S-Box Result:     00111111101000001100010001101110   [per every group of 4-bits]
          - Split Into Two:   0011111110100000 [L] 1100010001101110 [R]
          - Swap Halves:      11000100011011100011111110100000
          - Bit Inversion:    00111011100100011100000001011111
          - Compressed Key:   11111100011110011010010011100101   [done by compression P-Box]
          - XOR with Key:     11000111111010000110010010111010

          - FUNCTION OUTPUT:  11000111111010000110010010111010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001110000010110001110101111000

       - FUNCTION OUTPUT:          11000111111010000110010010111010

       - Left XOR FUNCTION OUTPUT: 11001001111000110111100111000010

       - Next Round Left 32 Bits:  10010000000101101110101011010010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001001111000110111100111000010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010000000101101110101011010010

       - Right 32 Bits:            11001001111000110111100111000010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00000011001101101001011001100101001001111000010100010111   [Subkey: 2]
          - Input Half:       11001001111000110111100111000010
          - S-Box Result:     01010011110000011101001101011110   [per every group of 4-bits]
          - Split Into Two:   0101001111000001 [L] 1101001101011110 [R]
          - Swap Halves:      11010011010111100101001111000001
          - Bit Inversion:    00101100101000011010110000111110
          - Compressed Key:   00101110000110010110110101011011   [done by compression P-Box]
          - XOR with Key:     00000010101110001100000101100101

          - FUNCTION OUTPUT:  00000010101110001100000101100101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010000000101101110101011010010

       - FUNCTION OUTPUT:          00000010101110001100000101100101

       - Left XOR FUNCTION OUTPUT: 10010010101011100010101110110111

       - Next Round Left 32 Bits:  11001001111000110111100111000010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010010101011100010101110110111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11001001111000110111100111000010

       - Right 32 Bits:            10010010101011100010101110110111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11110011001001011010011001101011011000011110101110100011   [Subkey: 1]
          - Input Half:       10010010101011100010101110110111
          - S-Box Result:     00111110010011001110100010001101   [per every group of 4-bits]
          - Split Into Two:   0011111001001100 [L] 1110100010001101 [R]
          - Swap Halves:      11101000100011010011111001001100
          - Bit Inversion:    00010111011100101100000110110011
          - Compressed Key:   01100110100010010111101110110011   [done by compression P-Box]
          - XOR with Key:     01110001111110111011101000000000

          - FUNCTION OUTPUT:  01110001111110111011101000000000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11001001111000110111100111000010

       - FUNCTION OUTPUT:          01110001111110111011101000000000

       - Left XOR FUNCTION OUTPUT: 10111000000110001100001111000010

       - Next Round Left 32 Bits:  10010010101011100010101110110111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10111000000110001100001111000010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 1011100000011000110000111100001010010010101011100010101110110111

 > Decrypted Block:     1011100000011000110000111100001010010010101011100010101110110111


!!!CBC: Previous Ciphertext:                             0111001101110101010000010110011100110000011001000111000100110011

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    1100101101101101100000101010010110100010110010100101101010000100

 > Final Processed Block:                                1100101101101101100000101010010110100010110010100101101010000100



Ciphertext Block 2:                                      1111100001100101011100010111001010110111000100111001110011101100

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111000011001010111000101110010

       - Right 32 Bits:            10110111000100111001110011101100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010010011110000101000101110000001100110110100101100110   [Subkey: 16]
          - Input Half:       10110111000100111001110011101100
          - S-Box Result:     10001101101000010011010111000101   [per every group of 4-bits]
          - Split Into Two:   1000110110100001 [L] 0011010111000101 [R]
          - Swap Halves:      00110101110001011000110110100001
          - Bit Inversion:    11001010001110100111001001011110
          - Compressed Key:   01101101010110110010111000011001   [done by compression P-Box]
          - XOR with Key:     10100111011000010101110001000111

          - FUNCTION OUTPUT:  10100111011000010101110001000111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111000011001010111000101110010

       - FUNCTION OUTPUT:          10100111011000010101110001000111

       - Left XOR FUNCTION OUTPUT: 01011111000001000010110100110101

       - Next Round Left 32 Bits:  10110111000100111001110011101100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011111000001000010110100110101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10110111000100111001110011101100

       - Right 32 Bits:            01011111000001000010110100110101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10110110000111101011101000111111001100100101101001100110   [Subkey: 15]
          - Input Half:       01011111000001000010110100110101
          - S-Box Result:     10011011111101111110011000011001   [per every group of 4-bits]
          - Split Into Two:   1001101111110111 [L] 1110011000011001 [R]
          - Swap Halves:      11100110000110011001101111110111
          - Bit Inversion:    00011001111001100110010000001000
          - Compressed Key:   01111011101100110110011010001001   [done by compression P-Box]
          - XOR with Key:     01100010010101010000001010000001

          - FUNCTION OUTPUT:  01100010010101010000001010000001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10110111000100111001110011101100

       - FUNCTION OUTPUT:          01100010010101010000001010000001

       - Left XOR FUNCTION OUTPUT: 11010101010001101001111001101101

       - Next Round Left 32 Bits:  01011111000001000010110100110101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010101010001101001111001101101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011111000001000010110100110101

       - Right 32 Bits:            11010101010001101001111001101101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100111100001010001011100000011001101101001011001100101   [Subkey: 14]
          - Input Half:       11010101010001101001111001101101
          - S-Box Result:     01101001011100000011110000000110   [per every group of 4-bits]
          - Split Into Two:   0110100101110000 [L] 0011110000000110 [R]
          - Swap Halves:      00111100000001100110100101110000
          - Bit Inversion:    11000011111110011001011010001111
          - Compressed Key:   00110010000100000110010111001010   [done by compression P-Box]
          - XOR with Key:     11110001111010011111001101000101

          - FUNCTION OUTPUT:  11110001111010011111001101000101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011111000001000010110100110101

       - FUNCTION OUTPUT:          11110001111010011111001101000101

       - Left XOR FUNCTION OUTPUT: 10101110111011011101111001110000

       - Next Round Left 32 Bits:  11010101010001101001111001101101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10101110111011011101111001110000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010101010001101001111001101101

       - Right 32 Bits:            10101110111011011101111001110000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100001111010111010001111110011001001011010011001101011   [Subkey: 13]
          - Input Half:       10101110111011011101111001110000
          - S-Box Result:     01001100110001100110110011011111   [per every group of 4-bits]
          - Split Into Two:   0100110011000110 [L] 0110110011011111 [R]
          - Swap Halves:      01101100110111110100110011000110
          - Bit Inversion:    10010011001000001011001100111001
          - Compressed Key:   00000101100011110110100111000111   [done by compression P-Box]
          - XOR with Key:     10010110101011111101101011111110

          - FUNCTION OUTPUT:  10010110101011111101101011111110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010101010001101001111001101101

       - FUNCTION OUTPUT:          10010110101011111101101011111110

       - Left XOR FUNCTION OUTPUT: 01000011111010010100010010010011

       - Next Round Left 32 Bits:  10101110111011011101111001110000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000011111010010100010010010011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10101110111011011101111001110000

       - Right 32 Bits:            01000011111010010100010010010011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111000010100010111000000110011011010010110011001010010   [Subkey: 12]
          - Input Half:       01000011111010010100010010010011
          - S-Box Result:     01110001110000110111011100110001   [per every group of 4-bits]
          - Split Into Two:   0111000111000011 [L] 0111011100110001 [R]
          - Swap Halves:      01110111001100010111000111000011
          - Bit Inversion:    10001000110011101000111000111100
          - Compressed Key:   11001000110100110111101011000001   [done by compression P-Box]
          - XOR with Key:     01000000000111011111010011111101

          - FUNCTION OUTPUT:  01000000000111011111010011111101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10101110111011011101111001110000

       - FUNCTION OUTPUT:          01000000000111011111010011111101

       - Left XOR FUNCTION OUTPUT: 11101110111100000010101010001101

       - Next Round Left 32 Bits:  01000011111010010100010010010011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101110111100000010101010001101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01000011111010010100010010010011

       - Right 32 Bits:            11101110111100000010101010001101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00011110101110100011111100110010010110100110011010110110   [Subkey: 11]
          - Input Half:       11101110111100000010101010001101
          - S-Box Result:     11001100101111111110010000100110   [per every group of 4-bits]
          - Split Into Two:   1100110010111111 [L] 1110010000100110 [R]
          - Swap Halves:      11100100001001101100110010111111
          - Bit Inversion:    00011011110110010011001101000000
          - Compressed Key:   11111101101100110001011011101001   [done by compression P-Box]
          - XOR with Key:     11100110011010100010010110101001

          - FUNCTION OUTPUT:  11100110011010100010010110101001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01000011111010010100010010010011

       - FUNCTION OUTPUT:          11100110011010100010010110101001

       - Left XOR FUNCTION OUTPUT: 10100101100000110110000100111010

       - Next Round Left 32 Bits:  11101110111100000010101010001101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10100101100000110110000100111010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101110111100000010101010001101

       - Right 32 Bits:            10100101100000110110000100111010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10000101000101110000001100110110100101100110010100100111   [Subkey: 10]
          - Input Half:       10100101100000110110000100111010
          - S-Box Result:     01001001001000010000101000010100   [per every group of 4-bits]
          - Split Into Two:   0100100100100001 [L] 0000101000010100 [R]
          - Swap Halves:      00001010000101000100100100100001
          - Bit Inversion:    11110101111010111011011011011110
          - Compressed Key:   00011010000000111000011001011011   [done by compression P-Box]
          - XOR with Key:     11101111111010000011000010000101

          - FUNCTION OUTPUT:  11101111111010000011000010000101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101110111100000010101010001101

       - FUNCTION OUTPUT:          11101111111010000011000010000101

       - Left XOR FUNCTION OUTPUT: 00000001000110000001101000001000

       - Next Round Left 32 Bits:  10100101100000110110000100111010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00000001000110000001101000001000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10100101100000110110000100111010

       - Right 32 Bits:            00000001000110000001101000001000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11101011101000111111001100100101101001100110101101100001   [Subkey: 9]
          - Input Half:       00000001000110000001101000001000
          - S-Box Result:     11111010101000101010010011110010   [per every group of 4-bits]
          - Split Into Two:   1111101010100010 [L] 1010010011110010 [R]
          - Swap Halves:      10100100111100101111101010100010
          - Bit Inversion:    01011011000011010000010101011101
          - Compressed Key:   10100100110100011110011010010010   [done by compression P-Box]
          - XOR with Key:     11111111110111001110001111001111

          - FUNCTION OUTPUT:  11111111110111001110001111001111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10100101100000110110000100111010

       - FUNCTION OUTPUT:          11111111110111001110001111001111

       - Left XOR FUNCTION OUTPUT: 01011010010111111000001011110101

       - Next Round Left 32 Bits:  00000001000110000001101000001000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011010010111111000001011110101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00000001000110000001101000001000

       - Right 32 Bits:            01011010010111111000001011110101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010001011100000011001101101001011001100101001001111000   [Subkey: 8]
          - Input Half:       01011010010111111000001011110101
          - S-Box Result:     10010100100110110010111010111001   [per every group of 4-bits]
          - Split Into Two:   1001010010011011 [L] 0010111010111001 [R]
          - Swap Halves:      00101110101110011001010010011011
          - Bit Inversion:    11010001010001100110101101100100
          - Compressed Key:   01001100100110010111011010000100   [done by compression P-Box]
          - XOR with Key:     10011101110111110001110111100000

          - FUNCTION OUTPUT:  10011101110111110001110111100000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00000001000110000001101000001000

       - FUNCTION OUTPUT:          10011101110111110001110111100000

       - Left XOR FUNCTION OUTPUT: 10011100110001110000011111101000

       - Next Round Left 32 Bits:  01011010010111111000001011110101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011100110001110000011111101000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011010010111111000001011110101

       - Right 32 Bits:            10011100110001110000011111101000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10111010001111110011001001011010011001101011011000011110   [Subkey: 7]
          - Input Half:       10011100110001110000011111101000
          - S-Box Result:     00110101010111011111110111000010   [per every group of 4-bits]
          - Split Into Two:   0011010101011101 [L] 1111110111000010 [R]
          - Swap Halves:      11111101110000100011010101011101
          - Bit Inversion:    00000010001111011100101010100010
          - Compressed Key:   11101111100110100011010111001101   [done by compression P-Box]
          - XOR with Key:     11101101101001111111111101101111

          - FUNCTION OUTPUT:  11101101101001111111111101101111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011010010111111000001011110101

       - FUNCTION OUTPUT:          11101101101001111111111101101111

       - Left XOR FUNCTION OUTPUT: 10110111111110000111110110011010

       - Next Round Left 32 Bits:  10011100110001110000011111101000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10110111111110000111110110011010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011100110001110000011111101000

       - Right 32 Bits:            10110111111110000111110110011010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010111000000110011011010010110011001010010011110000101   [Subkey: 6]
          - Input Half:       10110111111110000111110110011010
          - S-Box Result:     10001101101100101101011000110100   [per every group of 4-bits]
          - Split Into Two:   1000110110110010 [L] 1101011000110100 [R]
          - Swap Halves:      11010110001101001000110110110010
          - Bit Inversion:    00101001110010110111001001001101
          - Compressed Key:   01110000100101100011100011111010   [done by compression P-Box]
          - XOR with Key:     01011001010111010100101010110111

          - FUNCTION OUTPUT:  01011001010111010100101010110111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011100110001110000011111101000

       - FUNCTION OUTPUT:          01011001010111010100101010110111

       - Left XOR FUNCTION OUTPUT: 11000101100110100100110101011111

       - Next Round Left 32 Bits:  10110111111110000111110110011010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000101100110100100110101011111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10110111111110000111110110011010

       - Right 32 Bits:            11000101100110100100110101011111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10100011111100110010010110100110011010110110000111101011   [Subkey: 5]
          - Input Half:       11000101100110100100110101011111
          - S-Box Result:     01011001001101000111011010011011   [per every group of 4-bits]
          - Split Into Two:   0101100100110100 [L] 0111011010011011 [R]
          - Swap Halves:      01110110100110110101100100110100
          - Bit Inversion:    10001001011001001010011011001011
          - Compressed Key:   00101100100001010011111000110111   [done by compression P-Box]
          - XOR with Key:     10100101111000011001100011111100

          - FUNCTION OUTPUT:  10100101111000011001100011111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10110111111110000111110110011010

       - FUNCTION OUTPUT:          10100101111000011001100011111100

       - Left XOR FUNCTION OUTPUT: 00010010000110011110010101100110

       - Next Round Left 32 Bits:  11000101100110100100110101011111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00010010000110011110010101100110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000101100110100100110101011111

       - Right 32 Bits:            00010010000110011110010101100110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110000001100110110100101100110010100100111100001010001   [Subkey: 4]
          - Input Half:       00010010000110011110010101100110
          - S-Box Result:     10101110101000111100100100000000   [per every group of 4-bits]
          - Split Into Two:   1010111010100011 [L] 1100100100000000 [R]
          - Swap Halves:      11001001000000001010111010100011
          - Bit Inversion:    00110110111111110101000101011100
          - Compressed Key:   01001100111010010001011000000010   [done by compression P-Box]
          - XOR with Key:     01111010000101100100011101011110

          - FUNCTION OUTPUT:  01111010000101100100011101011110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000101100110100100110101011111

       - FUNCTION OUTPUT:          01111010000101100100011101011110

       - Left XOR FUNCTION OUTPUT: 10111111100011000000101000000001

       - Next Round Left 32 Bits:  00010010000110011110010101100110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10111111100011000000101000000001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00010010000110011110010101100110

       - Right 32 Bits:            10111111100011000000101000000001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00111111001100100101101001100110101101100001111010111010   [Subkey: 3]
          - Input Half:       10111111100011000000101000000001
          - S-Box Result:     10001011001001011111010011111010   [per every group of 4-bits]
          - Split Into Two:   1000101100100101 [L] 1111010011111010 [R]
          - Swap Halves:      11110100111110101000101100100101
          - Bit Inversion:    00001011000001010111010011011010
          - Compressed Key:   11111100011110011010010011100101   [done by compression P-Box]
          - XOR with Key:     11110111011111001101000000111111

          - FUNCTION OUTPUT:  11110111011111001101000000111111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00010010000110011110010101100110

       - FUNCTION OUTPUT:          11110111011111001101000000111111

       - Left XOR FUNCTION OUTPUT: 11100101011001010011010101011001

       - Next Round Left 32 Bits:  10111111100011000000101000000001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100101011001010011010101011001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10111111100011000000101000000001

       - Right 32 Bits:            11100101011001010011010101011001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00000011001101101001011001100101001001111000010100010111   [Subkey: 2]
          - Input Half:       11100101011001010011010101011001
          - S-Box Result:     11001001000010010001100110010011   [per every group of 4-bits]
          - Split Into Two:   1100100100001001 [L] 0001100110010011 [R]
          - Swap Halves:      00011001100100111100100100001001
          - Bit Inversion:    11100110011011000011011011110110
          - Compressed Key:   00101110000110010110110101011011   [done by compression P-Box]
          - XOR with Key:     11001000011101010101101110101101

          - FUNCTION OUTPUT:  11001000011101010101101110101101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10111111100011000000101000000001

       - FUNCTION OUTPUT:          11001000011101010101101110101101

       - Left XOR FUNCTION OUTPUT: 01110111111110010101000110101100

       - Next Round Left 32 Bits:  11100101011001010011010101011001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110111111110010101000110101100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100101011001010011010101011001

       - Right 32 Bits:            01110111111110010101000110101100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11110011001001011010011001101011011000011110101110100011   [Subkey: 1]
          - Input Half:       01110111111110010101000110101100
          - S-Box Result:     11011101101100111001101001000101   [per every group of 4-bits]
          - Split Into Two:   1101110110110011 [L] 1001101001000101 [R]
          - Swap Halves:      10011010010001011101110110110011
          - Bit Inversion:    01100101101110100010001001001100
          - Compressed Key:   01100110100010010111101110110011   [done by compression P-Box]
          - XOR with Key:     00000011001100110101100111111111

          - FUNCTION OUTPUT:  00000011001100110101100111111111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100101011001010011010101011001

       - FUNCTION OUTPUT:          00000011001100110101100111111111

       - Left XOR FUNCTION OUTPUT: 11100110010101100110110010100110

       - Next Round Left 32 Bits:  01110111111110010101000110101100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100110010101100110110010100110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 1110011001010110011011001010011001110111111110010101000110101100

 > Decrypted Block:     1110011001010110011011001010011001110111111110010101000110101100


!!!CBC: Previous Ciphertext:                             1110010001011110001111111001111000111000001111000001011010111100

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    0000001000001000010100110011100001001111110001010100011100010000

 > Final Processed Block:                                0000001000001000010100110011100001001111110001010100011100010000



Ciphertext Block 3:                                      1001011010110010100101111001110000000100111000101011011001100110

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010110101100101001011110011100

       - Right 32 Bits:            00000100111000101011011001100110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010010011110000101000101110000001100110110100101100110   [Subkey: 16]
          - Input Half:       00000100111000101011011001100110
          - S-Box Result:     11110111110011101000000000000000   [per every group of 4-bits]
          - Split Into Two:   1111011111001110 [L] 1000000000000000 [R]
          - Swap Halves:      10000000000000001111011111001110
          - Bit Inversion:    01111111111111110000100000110001
          - Compressed Key:   01101101010110110010111000011001   [done by compression P-Box]
          - XOR with Key:     00010010101001000010011000101000

          - FUNCTION OUTPUT:  00010010101001000010011000101000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010110101100101001011110011100

       - FUNCTION OUTPUT:          00010010101001000010011000101000

       - Left XOR FUNCTION OUTPUT: 10000100000101101011000110110100

       - Next Round Left 32 Bits:  00000100111000101011011001100110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10000100000101101011000110110100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00000100111000101011011001100110

       - Right 32 Bits:            10000100000101101011000110110100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10110110000111101011101000111111001100100101101001100110   [Subkey: 15]
          - Input Half:       10000100000101101011000110110100
          - S-Box Result:     00100111101000001000101010000111   [per every group of 4-bits]
          - Split Into Two:   0010011110100000 [L] 1000101010000111 [R]
          - Swap Halves:      10001010100001110010011110100000
          - Bit Inversion:    01110101011110001101100001011111
          - Compressed Key:   01111011101100110110011010001001   [done by compression P-Box]
          - XOR with Key:     00001110110010111011111011010110

          - FUNCTION OUTPUT:  00001110110010111011111011010110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00000100111000101011011001100110

       - FUNCTION OUTPUT:          00001110110010111011111011010110

       - Left XOR FUNCTION OUTPUT: 00001010001010010000100010110000

       - Next Round Left 32 Bits:  10000100000101101011000110110100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001010001010010000100010110000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10000100000101101011000110110100

       - Right 32 Bits:            00001010001010010000100010110000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100111100001010001011100000011001101101001011001100101   [Subkey: 14]
          - Input Half:       00001010001010010000100010110000
          - S-Box Result:     11110100111000111111001010001111   [per every group of 4-bits]
          - Split Into Two:   1111010011100011 [L] 1111001010001111 [R]
          - Swap Halves:      11110010100011111111010011100011
          - Bit Inversion:    00001101011100000000101100011100
          - Compressed Key:   00110010000100000110010111001010   [done by compression P-Box]
          - XOR with Key:     00111111011000000110111011010110

          - FUNCTION OUTPUT:  00111111011000000110111011010110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10000100000101101011000110110100

       - FUNCTION OUTPUT:          00111111011000000110111011010110

       - Left XOR FUNCTION OUTPUT: 10111011011101101101111101100010

       - Next Round Left 32 Bits:  00001010001010010000100010110000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10111011011101101101111101100010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001010001010010000100010110000

       - Right 32 Bits:            10111011011101101101111101100010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100001111010111010001111110011001001011010011001101011   [Subkey: 13]
          - Input Half:       10111011011101101101111101100010
          - S-Box Result:     10001000110100000110101100001110   [per every group of 4-bits]
          - Split Into Two:   1000100011010000 [L] 0110101100001110 [R]
          - Swap Halves:      01101011000011101000100011010000
          - Bit Inversion:    10010100111100010111011100101111
          - Compressed Key:   00000101100011110110100111000111   [done by compression P-Box]
          - XOR with Key:     10010001011111100001111011101000

          - FUNCTION OUTPUT:  10010001011111100001111011101000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001010001010010000100010110000

       - FUNCTION OUTPUT:          10010001011111100001111011101000

       - Left XOR FUNCTION OUTPUT: 10011011010101110001011001011000

       - Next Round Left 32 Bits:  10111011011101101101111101100010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011011010101110001011001011000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10111011011101101101111101100010

       - Right 32 Bits:            10011011010101110001011001011000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111000010100010111000000110011011010010110011001010010   [Subkey: 12]
          - Input Half:       10011011010101110001011001011000
          - S-Box Result:     00111000100111011010000010010010   [per every group of 4-bits]
          - Split Into Two:   0011100010011101 [L] 1010000010010010 [R]
          - Swap Halves:      10100000100100100011100010011101
          - Bit Inversion:    01011111011011011100011101100010
          - Compressed Key:   11001000110100110111101011000001   [done by compression P-Box]
          - XOR with Key:     10010111101111101011110110100011

          - FUNCTION OUTPUT:  10010111101111101011110110100011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10111011011101101101111101100010

       - FUNCTION OUTPUT:          10010111101111101011110110100011

       - Left XOR FUNCTION OUTPUT: 00101100110010000110001011000001

       - Next Round Left 32 Bits:  10011011010101110001011001011000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101100110010000110001011000001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011011010101110001011001011000

       - Right 32 Bits:            00101100110010000110001011000001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00011110101110100011111100110010010110100110011010110110   [Subkey: 11]
          - Input Half:       00101100110010000110001011000001
          - S-Box Result:     11100101010100100000111001011010   [per every group of 4-bits]
          - Split Into Two:   1110010101010010 [L] 0000111001011010 [R]
          - Swap Halves:      00001110010110101110010101010010
          - Bit Inversion:    11110001101001010001101010101101
          - Compressed Key:   11111101101100110001011011101001   [done by compression P-Box]
          - XOR with Key:     00001100000101100000110001000100

          - FUNCTION OUTPUT:  00001100000101100000110001000100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011011010101110001011001011000

       - FUNCTION OUTPUT:          00001100000101100000110001000100

       - Left XOR FUNCTION OUTPUT: 10010111010000010001101000011100

       - Next Round Left 32 Bits:  00101100110010000110001011000001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010111010000010001101000011100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101100110010000110001011000001

       - Right 32 Bits:            10010111010000010001101000011100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10000101000101110000001100110110100101100110010100100111   [Subkey: 10]
          - Input Half:       10010111010000010001101000011100
          - S-Box Result:     00111101011110101010010010100101   [per every group of 4-bits]
          - Split Into Two:   0011110101111010 [L] 1010010010100101 [R]
          - Swap Halves:      10100100101001010011110101111010
          - Bit Inversion:    01011011010110101100001010000101
          - Compressed Key:   00011010000000111000011001011011   [done by compression P-Box]
          - XOR with Key:     01000001010110010100010011011110

          - FUNCTION OUTPUT:  01000001010110010100010011011110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101100110010000110001011000001

       - FUNCTION OUTPUT:          01000001010110010100010011011110

       - Left XOR FUNCTION OUTPUT: 01101101100100010010011000011111

       - Next Round Left 32 Bits:  10010111010000010001101000011100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101101100100010010011000011111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010111010000010001101000011100

       - Right 32 Bits:            01101101100100010010011000011111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11101011101000111111001100100101101001100110101101100001   [Subkey: 9]
          - Input Half:       01101101100100010010011000011111
          - S-Box Result:     00000110001110101110000010101011   [per every group of 4-bits]
          - Split Into Two:   0000011000111010 [L] 1110000010101011 [R]
          - Swap Halves:      11100000101010110000011000111010
          - Bit Inversion:    00011111010101001111100111000101
          - Compressed Key:   10100100110100011110011010010010   [done by compression P-Box]
          - XOR with Key:     10111011100001010001111101010111

          - FUNCTION OUTPUT:  10111011100001010001111101010111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010111010000010001101000011100

       - FUNCTION OUTPUT:          10111011100001010001111101010111

       - Left XOR FUNCTION OUTPUT: 00101100110001000000010101001011

       - Next Round Left 32 Bits:  01101101100100010010011000011111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101100110001000000010101001011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101101100100010010011000011111

       - Right 32 Bits:            00101100110001000000010101001011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010001011100000011001101101001011001100101001001111000   [Subkey: 8]
          - Input Half:       00101100110001000000010101001011
          - S-Box Result:     11100101010101111111100101111000   [per every group of 4-bits]
          - Split Into Two:   1110010101010111 [L] 1111100101111000 [R]
          - Swap Halves:      11111001011110001110010101010111
          - Bit Inversion:    00000110100001110001101010101000
          - Compressed Key:   01001100100110010111011010000100   [done by compression P-Box]
          - XOR with Key:     01001010000111100110110000101100

          - FUNCTION OUTPUT:  01001010000111100110110000101100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101101100100010010011000011111

       - FUNCTION OUTPUT:          01001010000111100110110000101100

       - Left XOR FUNCTION OUTPUT: 00100111100011110100101000110011

       - Next Round Left 32 Bits:  00101100110001000000010101001011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00100111100011110100101000110011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101100110001000000010101001011

       - Right 32 Bits:            00100111100011110100101000110011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10111010001111110011001001011010011001101011011000011110   [Subkey: 7]
          - Input Half:       00100111100011110100101000110011
          - S-Box Result:     11101101001010110111010000010001   [per every group of 4-bits]
          - Split Into Two:   1110110100101011 [L] 0111010000010001 [R]
          - Swap Halves:      01110100000100011110110100101011
          - Bit Inversion:    10001011111011100001001011010100
          - Compressed Key:   11101111100110100011010111001101   [done by compression P-Box]
          - XOR with Key:     01100100011101000010011100011001

          - FUNCTION OUTPUT:  01100100011101000010011100011001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101100110001000000010101001011

       - FUNCTION OUTPUT:          01100100011101000010011100011001

       - Left XOR FUNCTION OUTPUT: 01001000101100000010001001010010

       - Next Round Left 32 Bits:  00100111100011110100101000110011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001000101100000010001001010010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00100111100011110100101000110011

       - Right 32 Bits:            01001000101100000010001001010010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010111000000110011011010010110011001010010011110000101   [Subkey: 6]
          - Input Half:       01001000101100000010001001010010
          - S-Box Result:     01110010100011111110111010011110   [per every group of 4-bits]
          - Split Into Two:   0111001010001111 [L] 1110111010011110 [R]
          - Swap Halves:      11101110100111100111001010001111
          - Bit Inversion:    00010001011000011000110101110000
          - Compressed Key:   01110000100101100011100011111010   [done by compression P-Box]
          - XOR with Key:     01100001111101111011010110001010

          - FUNCTION OUTPUT:  01100001111101111011010110001010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00100111100011110100101000110011

       - FUNCTION OUTPUT:          01100001111101111011010110001010

       - Left XOR FUNCTION OUTPUT: 01000110011110001111111110111001

       - Next Round Left 32 Bits:  01001000101100000010001001010010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000110011110001111111110111001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001000101100000010001001010010

       - Right 32 Bits:            01000110011110001111111110111001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10100011111100110010010110100110011010110110000111101011   [Subkey: 5]
          - Input Half:       01000110011110001111111110111001
          - S-Box Result:     01110000110100101011101110000011   [per every group of 4-bits]
          - Split Into Two:   0111000011010010 [L] 1011101110000011 [R]
          - Swap Halves:      10111011100000110111000011010010
          - Bit Inversion:    01000100011111001000111100101101
          - Compressed Key:   00101100100001010011111000110111   [done by compression P-Box]
          - XOR with Key:     01101000111110011011000100011010

          - FUNCTION OUTPUT:  01101000111110011011000100011010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001000101100000010001001010010

       - FUNCTION OUTPUT:          01101000111110011011000100011010

       - Left XOR FUNCTION OUTPUT: 00100000010010011001001101001000

       - Next Round Left 32 Bits:  01000110011110001111111110111001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00100000010010011001001101001000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01000110011110001111111110111001

       - Right 32 Bits:            00100000010010011001001101001000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110000001100110110100101100110010100100111100001010001   [Subkey: 4]
          - Input Half:       00100000010010011001001101001000
          - S-Box Result:     11101111011100110011000101110010   [per every group of 4-bits]
          - Split Into Two:   1110111101110011 [L] 0011000101110010 [R]
          - Swap Halves:      00110001011100101110111101110011
          - Bit Inversion:    11001110100011010001000010001100
          - Compressed Key:   01001100111010010001011000000010   [done by compression P-Box]
          - XOR with Key:     10000010011001000000011010001110

          - FUNCTION OUTPUT:  10000010011001000000011010001110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01000110011110001111111110111001

       - FUNCTION OUTPUT:          10000010011001000000011010001110

       - Left XOR FUNCTION OUTPUT: 11000100000111001111100100110111

       - Next Round Left 32 Bits:  00100000010010011001001101001000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000100000111001111100100110111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00100000010010011001001101001000

       - Right 32 Bits:            11000100000111001111100100110111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00111111001100100101101001100110101101100001111010111010   [Subkey: 3]
          - Input Half:       11000100000111001111100100110111
          - S-Box Result:     01010111101001011011001100011101   [per every group of 4-bits]
          - Split Into Two:   0101011110100101 [L] 1011001100011101 [R]
          - Swap Halves:      10110011000111010101011110100101
          - Bit Inversion:    01001100111000101010100001011010
          - Compressed Key:   11111100011110011010010011100101   [done by compression P-Box]
          - XOR with Key:     10110000100110110000110010111111

          - FUNCTION OUTPUT:  10110000100110110000110010111111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00100000010010011001001101001000

       - FUNCTION OUTPUT:          10110000100110110000110010111111

       - Left XOR FUNCTION OUTPUT: 10010000110100101001111111110111

       - Next Round Left 32 Bits:  11000100000111001111100100110111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010000110100101001111111110111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000100000111001111100100110111

       - Right 32 Bits:            10010000110100101001111111110111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00000011001101101001011001100101001001111000010100010111   [Subkey: 2]
          - Input Half:       10010000110100101001111111110111
          - S-Box Result:     00111111011011100011101110111101   [per every group of 4-bits]
          - Split Into Two:   0011111101101110 [L] 0011101110111101 [R]
          - Swap Halves:      00111011101111010011111101101110
          - Bit Inversion:    11000100010000101100000010010001
          - Compressed Key:   00101110000110010110110101011011   [done by compression P-Box]
          - XOR with Key:     11101010010110111010110111001010

          - FUNCTION OUTPUT:  11101010010110111010110111001010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000100000111001111100100110111

       - FUNCTION OUTPUT:          11101010010110111010110111001010

       - Left XOR FUNCTION OUTPUT: 00101110010001110101010011111101

       - Next Round Left 32 Bits:  10010000110100101001111111110111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101110010001110101010011111101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010000110100101001111111110111

       - Right 32 Bits:            00101110010001110101010011111101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11110011001001011010011001101011011000011110101110100011   [Subkey: 1]
          - Input Half:       00101110010001110101010011111101
          - S-Box Result:     11101100011111011001011110110110   [per every group of 4-bits]
          - Split Into Two:   1110110001111101 [L] 1001011110110110 [R]
          - Swap Halves:      10010111101101101110110001111101
          - Bit Inversion:    01101000010010010001001110000010
          - Compressed Key:   01100110100010010111101110110011   [done by compression P-Box]
          - XOR with Key:     00001110110000000110100000110001

          - FUNCTION OUTPUT:  00001110110000000110100000110001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010000110100101001111111110111

       - FUNCTION OUTPUT:          00001110110000000110100000110001

       - Left XOR FUNCTION OUTPUT: 10011110000100101111011111000110

       - Next Round Left 32 Bits:  00101110010001110101010011111101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011110000100101111011111000110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 1001111000010010111101111100011000101110010001110101010011111101

 > Decrypted Block:     1001111000010010111101111100011000101110010001110101010011111101


!!!CBC: Previous Ciphertext:                             1111100001100101011100010111001010110111000100111001110011101100

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    0110011001110111100001101011010010011001010101001100100000010001

 > Final Processed Block:                                0110011001110111100001101011010010011001010101001100100000010001


FINAL PROCESSED DATA BLOCKS: 1100101101101101100000101010010110100010110010100101101010000100,0000001000001000010100110011100001001111110001010100011100010000,0110011001110111100001101011010010011001010101001100100000010001,

BLOCKS IN ASCII:             Ëm?¥¢ÊZ?S8OÅGfw?´?TÈ

=========================================================================================================================
STAGE 2: DES [ENCRYPT] ==================================================================================================
=========================================================================================================================

56-bit key: 92JgmaU
In Binary:  00111001001100100100101001100111011011010110000101010101

Subkeys:    Key i = Key (i - 1) [Shifted left by 1 and inverted]

Subkey 1  : 10110001101100110110110101100110001001001010011110101010
Subkey 2  : 01010011100100110010010010100110011101101101011000010101
Subkey 3  : 10101011000110110011011011010110011000100100101001111010
Subkey 4  : 01010101001110010011001001001010011001110110110101100001
Subkey 5  : 10101010101100011011001101101101011001100010010010100111
Subkey 6  : 00010101010100111001001100100100101001100111011011010110
Subkey 7  : 01111010101010110001101100110110110101100110001001001010
Subkey 8  : 01100001010101010011100100110010010010100110011101101101
Subkey 9  : 10100111101010101011000110110011011011010110011000100100
Subkey 10 : 11010110000101010101001110010011001001001010011001110110
Subkey 11 : 01001010011110101010101100011011001101101101011001100010
Subkey 12 : 01101101011000010101010100111001001100100100101001100111
Subkey 13 : 00100100101001111010101010110001101100110110110101100110
Subkey 14 : 01110110110101100001010101010011100100110010010010100110
Subkey 15 : 01100010010010100111101010101011000110110011011011010110
Subkey 16 : 01100111011011010110000101010101001110010011001001001010

S-BOX (4x4):
INPUT | OUTPUT
------|-------
0000  | 1111
0001  | 1010
0010  | 1110
0011  | 0001
0100  | 0111
0101  | 1001
0110  | 0000
0111  | 1101
1000  | 0010
1001  | 0011
1010  | 0100
1011  | 1000
1100  | 0101
1101  | 0110
1110  | 1100
1111  | 1011

P-BOX (7 bits compressed to 4 bits)
Bit at Position X goes to Position Y
X: | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
Y: | 4 | 3 | 1 | 2 | 1 | 4 | 3 |


Data to encrypt         : Ëm?¥¢ÊZ?S8OÅGfw?´?TÈ

Data padded with spaces : Ëm?¥¢ÊZ?S8OÅGfw?´?TÈ[Padded with '0' spaces]

Data in ASCII           : 203,109,130,165,162,202,90,132,2,8,83,56,79,197,71,16,102,119,134,180,153,84,200,17,

Data in Binary          : 11001011,01101101,10000010,10100101,10100010,11001010,01011010,10000100,00000010,00001000,01010011,00111000,01001111,11000101,01000111,00010000,01100110,01110111,10000110,10110100,10011001,01010100,11001000,00010001,

Data in 64-bit Blocks   : 1100101101101101100000101010010110100010110010100101101010000100,0000001000001000010100110011100001001111110001010100011100010000,0110011001110111100001101011010010011001010101001100100000010001,



<<<<<< PROCESSING IN 'CBC' MODE >>>>>>


!!!CBC: Initial Previous Ciphertext = IV:               (0111001101110101010000010110011100110000011001000111000100110011)

Plaintext Block: 1:                                      1100101101101101100000101010010110100010110010100101101010000100

!!!CBC: Previous Ciphertext:                             0111001101110101010000010110011100110000011001000111000100110011

!!!CBC: Current Block XOR with Previous Ciphertext:      1011100000011000110000111100001010010010101011100010101110110111

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10111000000110001100001111000010

       - Right 32 Bits:            10010010101011100010101110110111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10110001101100110110110101100110001001001010011110101010   [Subkey: 1]
          - Input Half:       10010010101011100010101110110111
          - S-Box Result:     00111110010011001110100010001101   [per every group of 4-bits]
          - Split Into Two:   0011111001001100 [L] 1110100010001101 [R]
          - Swap Halves:      11101000100011010011111001001100
          - Bit Inversion:    00010111011100101100000110110011
          - Compressed Key:   01001100111010010010000111110101   [done by compression P-Box]
          - XOR with Key:     01011011100110111110000001000110

          - FUNCTION OUTPUT:  01011011100110111110000001000110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10111000000110001100001111000010

       - FUNCTION OUTPUT:          01011011100110111110000001000110

       - Left XOR FUNCTION OUTPUT: 11100011100000110010001110000100

       - Next Round Left 32 Bits:  10010010101011100010101110110111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100011100000110010001110000100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010010101011100010101110110111

       - Right 32 Bits:            11100011100000110010001110000100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010011100100110010010010100110011101101101011000010101   [Subkey: 2]
          - Input Half:       11100011100000110010001110000100
          - S-Box Result:     11000001001000011110000100100111   [per every group of 4-bits]
          - Split Into Two:   1100000100100001 [L] 1110000100100111 [R]
          - Swap Halves:      11100001001001111100000100100001
          - Bit Inversion:    00011110110110000011111011011110
          - Compressed Key:   01101000100001010011011111001010   [done by compression P-Box]
          - XOR with Key:     01110110010111010000100100010100

          - FUNCTION OUTPUT:  01110110010111010000100100010100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010010101011100010101110110111

       - FUNCTION OUTPUT:          01110110010111010000100100010100

       - Left XOR FUNCTION OUTPUT: 11100100111100110010001010100011

       - Next Round Left 32 Bits:  11100011100000110010001110000100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100100111100110010001010100011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100011100000110010001110000100

       - Right 32 Bits:            11100100111100110010001010100011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10101011000110110011011011010110011000100100101001111010   [Subkey: 3]
          - Input Half:       11100100111100110010001010100011
          - S-Box Result:     11000111101100011110111001000001   [per every group of 4-bits]
          - Split Into Two:   1100011110110001 [L] 1110111001000001 [R]
          - Swap Halves:      11101110010000011100011110110001
          - Bit Inversion:    00010001101111100011100001001110
          - Compressed Key:   10101001100111100011011010000101   [done by compression P-Box]
          - XOR with Key:     10111000001000000000111011001011

          - FUNCTION OUTPUT:  10111000001000000000111011001011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100011100000110010001110000100

       - FUNCTION OUTPUT:          10111000001000000000111011001011

       - Left XOR FUNCTION OUTPUT: 01011011101000110010110101001111

       - Next Round Left 32 Bits:  11100100111100110010001010100011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011011101000110010110101001111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100100111100110010001010100011

       - Right 32 Bits:            01011011101000110010110101001111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101001110010011001001001010011001110110110101100001   [Subkey: 4]
          - Input Half:       01011011101000110010110101001111
          - S-Box Result:     10011000010000011110011001111011   [per every group of 4-bits]
          - Split Into Two:   1001100001000001 [L] 1110011001111011 [R]
          - Swap Halves:      11100110011110111001100001000001
          - Bit Inversion:    00011001100001000110011110111110
          - Compressed Key:   01011101100110000011111001010010   [done by compression P-Box]
          - XOR with Key:     01000100000111000101100111101100

          - FUNCTION OUTPUT:  01000100000111000101100111101100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100100111100110010001010100011

       - FUNCTION OUTPUT:          01000100000111000101100111101100

       - Left XOR FUNCTION OUTPUT: 10100000111011110111101101001111

       - Next Round Left 32 Bits:  01011011101000110010110101001111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10100000111011110111101101001111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011011101000110010110101001111

       - Right 32 Bits:            10100000111011110111101101001111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10101010101100011011001101101101011001100010010010100111   [Subkey: 5]
          - Input Half:       10100000111011110111101101001111
          - S-Box Result:     01001111110010111101100001111011   [per every group of 4-bits]
          - Split Into Two:   0100111111001011 [L] 1101100001111011 [R]
          - Swap Halves:      11011000011110110100111111001011
          - Bit Inversion:    00100111100001001011000000110100
          - Compressed Key:   10101100100110010111010001101011   [done by compression P-Box]
          - XOR with Key:     10001011000111011100010001011111

          - FUNCTION OUTPUT:  10001011000111011100010001011111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011011101000110010110101001111

       - FUNCTION OUTPUT:          10001011000111011100010001011111

       - Left XOR FUNCTION OUTPUT: 11010000101111101110100100010000

       - Next Round Left 32 Bits:  10100000111011110111101101001111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010000101111101110100100010000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10100000111011110111101101001111

       - Right 32 Bits:            11010000101111101110100100010000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010101010100111001001100100100101001100111011011010110   [Subkey: 6]
          - Input Half:       11010000101111101110100100010000
          - S-Box Result:     01101111100011001100001110101111   [per every group of 4-bits]
          - Split Into Two:   0110111110001100 [L] 1100001110101111 [R]
          - Swap Halves:      11000011101011110110111110001100
          - Bit Inversion:    00111100010100001001000001110011
          - Compressed Key:   01011000000100011010011011101001   [done by compression P-Box]
          - XOR with Key:     01100100010000010011011010011010

          - FUNCTION OUTPUT:  01100100010000010011011010011010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10100000111011110111101101001111

       - FUNCTION OUTPUT:          01100100010000010011011010011010

       - Left XOR FUNCTION OUTPUT: 11000100101011100100110111010101

       - Next Round Left 32 Bits:  11010000101111101110100100010000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000100101011100100110111010101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010000101111101110100100010000

       - Right 32 Bits:            11000100101011100100110111010101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111010101010110001101100110110110101100110001001001010   [Subkey: 7]
          - Input Half:       11000100101011100100110111010101
          - S-Box Result:     01010111010011000111011001101001   [per every group of 4-bits]
          - Split Into Two:   0101011101001100 [L] 0111011001101001 [R]
          - Swap Halves:      01110110011010010101011101001100
          - Bit Inversion:    10001001100101101010100010110011
          - Compressed Key:   11100101001100111001011010000101   [done by compression P-Box]
          - XOR with Key:     01101100101001010011111000110110

          - FUNCTION OUTPUT:  01101100101001010011111000110110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010000101111101110100100010000

       - FUNCTION OUTPUT:          01101100101001010011111000110110

       - Left XOR FUNCTION OUTPUT: 10111100000110111101011100100110

       - Next Round Left 32 Bits:  11000100101011100100110111010101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10111100000110111101011100100110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000100101011100100110111010101

       - Right 32 Bits:            10111100000110111101011100100110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100001010101010011100100110010010010100110011101101101   [Subkey: 8]
          - Input Half:       10111100000110111101011100100110
          - S-Box Result:     10000101101010000110110111100000   [per every group of 4-bits]
          - Split Into Two:   1000010110101000 [L] 0110110111100000 [R]
          - Swap Halves:      01101101111000001000010110101000
          - Bit Inversion:    10010010000111110111101001010111
          - Compressed Key:   00001010101100110001011011011110   [done by compression P-Box]
          - XOR with Key:     10011000101011000110110010001001

          - FUNCTION OUTPUT:  10011000101011000110110010001001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000100101011100100110111010101

       - FUNCTION OUTPUT:          10011000101011000110110010001001

       - Left XOR FUNCTION OUTPUT: 01011100000000100010000101011100

       - Next Round Left 32 Bits:  10111100000110111101011100100110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011100000000100010000101011100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10111100000110111101011100100110

       - Right 32 Bits:            01011100000000100010000101011100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10100111101010101011000110110011011011010110011000100100   [Subkey: 9]
          - Input Half:       01011100000000100010000101011100
          - S-Box Result:     10010101111111101110101010010101   [per every group of 4-bits]
          - Split Into Two:   1001010111111110 [L] 1110101010010101 [R]
          - Swap Halves:      11101010100101011001010111111110
          - Bit Inversion:    00010101011010100110101000000001
          - Compressed Key:   00110101100101110111101011001000   [done by compression P-Box]
          - XOR with Key:     00100000111111010001000011001001

          - FUNCTION OUTPUT:  00100000111111010001000011001001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10111100000110111101011100100110

       - FUNCTION OUTPUT:          00100000111111010001000011001001

       - Left XOR FUNCTION OUTPUT: 10011100111001101100011111101111

       - Next Round Left 32 Bits:  01011100000000100010000101011100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011100111001101100011111101111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011100000000100010000101011100

       - Right 32 Bits:            10011100111001101100011111101111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010110000101010101001110010011001001001010011001110110   [Subkey: 10]
          - Input Half:       10011100111001101100011111101111
          - S-Box Result:     00110101110000000101110111001011   [per every group of 4-bits]
          - Split Into Two:   0011010111000000 [L] 0101110111001011 [R]
          - Swap Halves:      01011101110010110011010111000000
          - Bit Inversion:    10100010001101001100101000111111
          - Compressed Key:   01111010010101100110000111001001   [done by compression P-Box]
          - XOR with Key:     11011000011000101010101111110110

          - FUNCTION OUTPUT:  11011000011000101010101111110110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011100000000100010000101011100

       - FUNCTION OUTPUT:          11011000011000101010101111110110

       - Left XOR FUNCTION OUTPUT: 10000100011000001000101010101010

       - Next Round Left 32 Bits:  10011100111001101100011111101111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10000100011000001000101010101010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011100111001101100011111101111

       - Right 32 Bits:            10000100011000001000101010101010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001010011110101010101100011011001101101101011001100010   [Subkey: 11]
          - Input Half:       10000100011000001000101010101010
          - S-Box Result:     00100111000011110010010001000100   [per every group of 4-bits]
          - Split Into Two:   0010011100001111 [L] 0010010001000100 [R]
          - Swap Halves:      00100100010001000010011100001111
          - Bit Inversion:    11011011101110111101100011110000
          - Compressed Key:   10101101101000100110011111000001   [done by compression P-Box]
          - XOR with Key:     01110110000110011011111100110001

          - FUNCTION OUTPUT:  01110110000110011011111100110001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011100111001101100011111101111

       - FUNCTION OUTPUT:          01110110000110011011111100110001

       - Left XOR FUNCTION OUTPUT: 11101010111111110111100011011110

       - Next Round Left 32 Bits:  10000100011000001000101010101010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101010111111110111100011011110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10000100011000001000101010101010

       - Right 32 Bits:            11101010111111110111100011011110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01101101011000010101010100111001001100100100101001100111   [Subkey: 12]
          - Input Half:       11101010111111110111100011011110
          - S-Box Result:     11000100101110111101001001101100   [per every group of 4-bits]
          - Split Into Two:   1100010010111011 [L] 1101001001101100 [R]
          - Swap Halves:      11010010011011001100010010111011
          - Bit Inversion:    00101101100100110011101101000100
          - Compressed Key:   10010100010100110110011010001011   [done by compression P-Box]
          - XOR with Key:     10111001110000000101110111001111

          - FUNCTION OUTPUT:  10111001110000000101110111001111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10000100011000001000101010101010

       - FUNCTION OUTPUT:          10111001110000000101110111001111

       - Left XOR FUNCTION OUTPUT: 00111101101000001101011101100101

       - Next Round Left 32 Bits:  11101010111111110111100011011110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111101101000001101011101100101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101010111111110111100011011110

       - Right 32 Bits:            00111101101000001101011101100101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100100101001111010101010110001101100110110110101100110   [Subkey: 13]
          - Input Half:       00111101101000001101011101100101
          - S-Box Result:     00010110010011110110110100001001   [per every group of 4-bits]
          - Split Into Two:   0001011001001111 [L] 0110110100001001 [R]
          - Swap Halves:      01101101000010010001011001001111
          - Bit Inversion:    10010010111101101110100110110000
          - Compressed Key:   00010110101001111110111001011001   [done by compression P-Box]
          - XOR with Key:     10000100010100010000011111101001

          - FUNCTION OUTPUT:  10000100010100010000011111101001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101010111111110111100011011110

       - FUNCTION OUTPUT:          10000100010100010000011111101001

       - Left XOR FUNCTION OUTPUT: 01101110101011100111111100110111

       - Next Round Left 32 Bits:  00111101101000001101011101100101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101110101011100111111100110111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111101101000001101011101100101

       - Right 32 Bits:            01101110101011100111111100110111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110110110101100001010101010011100100110010010010100110   [Subkey: 14]
          - Input Half:       01101110101011100111111100110111
          - S-Box Result:     00001100010011001101101100011101   [per every group of 4-bits]
          - Split Into Two:   0000110001001100 [L] 1101101100011101 [R]
          - Swap Halves:      11011011000111010000110001001100
          - Bit Inversion:    00100100111000101111001110110011
          - Compressed Key:   01111010000110101100110001101001   [done by compression P-Box]
          - XOR with Key:     01011110111110000011111111011010

          - FUNCTION OUTPUT:  01011110111110000011111111011010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111101101000001101011101100101

       - FUNCTION OUTPUT:          01011110111110000011111111011010

       - Left XOR FUNCTION OUTPUT: 01100011010110001110100010111111

       - Next Round Left 32 Bits:  01101110101011100111111100110111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01100011010110001110100010111111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101110101011100111111100110111

       - Right 32 Bits:            01100011010110001110100010111111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100010010010100111101010101011000110110011011011010110   [Subkey: 15]
          - Input Half:       01100011010110001110100010111111
          - S-Box Result:     00000001100100101100001010001011   [per every group of 4-bits]
          - Split Into Two:   0000000110010010 [L] 1100001010001011 [R]
          - Swap Halves:      11000010100010110000000110010010
          - Bit Inversion:    00111101011101001111111001101101
          - Compressed Key:   00100001111101010100110011101001   [done by compression P-Box]
          - XOR with Key:     00011100100000011011001010000100

          - FUNCTION OUTPUT:  00011100100000011011001010000100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101110101011100111111100110111

       - FUNCTION OUTPUT:          00011100100000011011001010000100

       - Left XOR FUNCTION OUTPUT: 01110010001011111100110110110011

       - Next Round Left 32 Bits:  01100011010110001110100010111111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110010001011111100110110110011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01100011010110001110100010111111

       - Right 32 Bits:            01110010001011111100110110110011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100111011011010110000101010101001110010011001001001010   [Subkey: 16]
          - Input Half:       01110010001011111100110110110011
          - S-Box Result:     11011110111010110101011010000001   [per every group of 4-bits]
          - Split Into Two:   1101111011101011 [L] 0101011010000001 [R]
          - Swap Halves:      01010110100000011101111011101011
          - Bit Inversion:    10101001011111100010000100010100
          - Compressed Key:   00110111110010100110100010000101   [done by compression P-Box]
          - XOR with Key:     10011110101101000100100110010001

          - FUNCTION OUTPUT:  10011110101101000100100110010001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01100011010110001110100010111111

       - FUNCTION OUTPUT:          10011110101101000100100110010001

       - Left XOR FUNCTION OUTPUT: 11111101111011001010000100101110

       - Next Round Left 32 Bits:  01110010001011111100110110110011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111101111011001010000100101110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 1111110111101100101000010010111001110010001011111100110110110011

 > Processed Block:     1111110111101100101000010010111001110010001011111100110110110011



Plaintext Block: 2:                                      0000001000001000010100110011100001001111110001010100011100010000

!!!CBC: Previous Ciphertext:                             1111110111101100101000010010111001110010001011111100110110110011

!!!CBC: Current Block XOR with Previous Ciphertext:      1111111111100100111100100001011000111101111010101000101010100011

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111111111001001111001000010110

       - Right 32 Bits:            00111101111010101000101010100011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10110001101100110110110101100110001001001010011110101010   [Subkey: 1]
          - Input Half:       00111101111010101000101010100011
          - S-Box Result:     00010110110001000010010001000001   [per every group of 4-bits]
          - Split Into Two:   0001011011000100 [L] 0010010001000001 [R]
          - Swap Halves:      00100100010000010001011011000100
          - Bit Inversion:    11011011101111101110100100111011
          - Compressed Key:   01001100111010010010000111110101   [done by compression P-Box]
          - XOR with Key:     10010111010101111100100011001110

          - FUNCTION OUTPUT:  10010111010101111100100011001110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111111111001001111001000010110

       - FUNCTION OUTPUT:          10010111010101111100100011001110

       - Left XOR FUNCTION OUTPUT: 01101000101100110011101011011000

       - Next Round Left 32 Bits:  00111101111010101000101010100011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101000101100110011101011011000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111101111010101000101010100011

       - Right 32 Bits:            01101000101100110011101011011000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010011100100110010010010100110011101101101011000010101   [Subkey: 2]
          - Input Half:       01101000101100110011101011011000
          - S-Box Result:     00000010100000010001010001100010   [per every group of 4-bits]
          - Split Into Two:   0000001010000001 [L] 0001010001100010 [R]
          - Swap Halves:      00010100011000100000001010000001
          - Bit Inversion:    11101011100111011111110101111110
          - Compressed Key:   01101000100001010011011111001010   [done by compression P-Box]
          - XOR with Key:     10000011000110001100101010110100

          - FUNCTION OUTPUT:  10000011000110001100101010110100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111101111010101000101010100011

       - FUNCTION OUTPUT:          10000011000110001100101010110100

       - Left XOR FUNCTION OUTPUT: 10111110111100100100000000010111

       - Next Round Left 32 Bits:  01101000101100110011101011011000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10111110111100100100000000010111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101000101100110011101011011000

       - Right 32 Bits:            10111110111100100100000000010111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10101011000110110011011011010110011000100100101001111010   [Subkey: 3]
          - Input Half:       10111110111100100100000000010111
          - S-Box Result:     10001100101111100111111110101101   [per every group of 4-bits]
          - Split Into Two:   1000110010111110 [L] 0111111110101101 [R]
          - Swap Halves:      01111111101011011000110010111110
          - Bit Inversion:    10000000010100100111001101000001
          - Compressed Key:   10101001100111100011011010000101   [done by compression P-Box]
          - XOR with Key:     00101001110011000100010111000100

          - FUNCTION OUTPUT:  00101001110011000100010111000100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101000101100110011101011011000

       - FUNCTION OUTPUT:          00101001110011000100010111000100

       - Left XOR FUNCTION OUTPUT: 01000001011111110111111100011100

       - Next Round Left 32 Bits:  10111110111100100100000000010111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000001011111110111111100011100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10111110111100100100000000010111

       - Right 32 Bits:            01000001011111110111111100011100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101001110010011001001001010011001110110110101100001   [Subkey: 4]
          - Input Half:       01000001011111110111111100011100
          - S-Box Result:     01111010110110111101101110100101   [per every group of 4-bits]
          - Split Into Two:   0111101011011011 [L] 1101101110100101 [R]
          - Swap Halves:      11011011101001010111101011011011
          - Bit Inversion:    00100100010110101000010100100100
          - Compressed Key:   01011101100110000011111001010010   [done by compression P-Box]
          - XOR with Key:     01111001110000101011101101110110

          - FUNCTION OUTPUT:  01111001110000101011101101110110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10111110111100100100000000010111

       - FUNCTION OUTPUT:          01111001110000101011101101110110

       - Left XOR FUNCTION OUTPUT: 11000111001100001111101101100001

       - Next Round Left 32 Bits:  01000001011111110111111100011100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000111001100001111101101100001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01000001011111110111111100011100

       - Right 32 Bits:            11000111001100001111101101100001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10101010101100011011001101101101011001100010010010100111   [Subkey: 5]
          - Input Half:       11000111001100001111101101100001
          - S-Box Result:     01011101000111111011100000001010   [per every group of 4-bits]
          - Split Into Two:   0101110100011111 [L] 1011100000001010 [R]
          - Swap Halves:      10111000000010100101110100011111
          - Bit Inversion:    01000111111101011010001011100000
          - Compressed Key:   10101100100110010111010001101011   [done by compression P-Box]
          - XOR with Key:     11101011011011001101011010001011

          - FUNCTION OUTPUT:  11101011011011001101011010001011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01000001011111110111111100011100

       - FUNCTION OUTPUT:          11101011011011001101011010001011

       - Left XOR FUNCTION OUTPUT: 10101010000100111010100110010111

       - Next Round Left 32 Bits:  11000111001100001111101101100001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10101010000100111010100110010111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000111001100001111101101100001

       - Right 32 Bits:            10101010000100111010100110010111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010101010100111001001100100100101001100111011011010110   [Subkey: 6]
          - Input Half:       10101010000100111010100110010111
          - S-Box Result:     01000100101000010100001100111101   [per every group of 4-bits]
          - Split Into Two:   0100010010100001 [L] 0100001100111101 [R]
          - Swap Halves:      01000011001111010100010010100001
          - Bit Inversion:    10111100110000101011101101011110
          - Compressed Key:   01011000000100011010011011101001   [done by compression P-Box]
          - XOR with Key:     11100100110100110001110110110111

          - FUNCTION OUTPUT:  11100100110100110001110110110111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000111001100001111101101100001

       - FUNCTION OUTPUT:          11100100110100110001110110110111

       - Left XOR FUNCTION OUTPUT: 00100011111000111110011011010110

       - Next Round Left 32 Bits:  10101010000100111010100110010111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00100011111000111110011011010110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10101010000100111010100110010111

       - Right 32 Bits:            00100011111000111110011011010110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111010101010110001101100110110110101100110001001001010   [Subkey: 7]
          - Input Half:       00100011111000111110011011010110
          - S-Box Result:     11100001110000011100000001100000   [per every group of 4-bits]
          - Split Into Two:   1110000111000001 [L] 1100000001100000 [R]
          - Swap Halves:      11000000011000001110000111000001
          - Bit Inversion:    00111111100111110001111000111110
          - Compressed Key:   11100101001100111001011010000101   [done by compression P-Box]
          - XOR with Key:     11011010101011001000100010111011

          - FUNCTION OUTPUT:  11011010101011001000100010111011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10101010000100111010100110010111

       - FUNCTION OUTPUT:          11011010101011001000100010111011

       - Left XOR FUNCTION OUTPUT: 01110000101111110010000100101100

       - Next Round Left 32 Bits:  00100011111000111110011011010110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110000101111110010000100101100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00100011111000111110011011010110

       - Right 32 Bits:            01110000101111110010000100101100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100001010101010011100100110010010010100110011101101101   [Subkey: 8]
          - Input Half:       01110000101111110010000100101100
          - S-Box Result:     11011111100010111110101011100101   [per every group of 4-bits]
          - Split Into Two:   1101111110001011 [L] 1110101011100101 [R]
          - Swap Halves:      11101010111001011101111110001011
          - Bit Inversion:    00010101000110100010000001110100
          - Compressed Key:   00001010101100110001011011011110   [done by compression P-Box]
          - XOR with Key:     00011111101010010011011010101010

          - FUNCTION OUTPUT:  00011111101010010011011010101010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00100011111000111110011011010110

       - FUNCTION OUTPUT:          00011111101010010011011010101010

       - Left XOR FUNCTION OUTPUT: 00111100010010101101000001111100

       - Next Round Left 32 Bits:  01110000101111110010000100101100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111100010010101101000001111100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110000101111110010000100101100

       - Right 32 Bits:            00111100010010101101000001111100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10100111101010101011000110110011011011010110011000100100   [Subkey: 9]
          - Input Half:       00111100010010101101000001111100
          - S-Box Result:     00010101011101000110111111010101   [per every group of 4-bits]
          - Split Into Two:   0001010101110100 [L] 0110111111010101 [R]
          - Swap Halves:      01101111110101010001010101110100
          - Bit Inversion:    10010000001010101110101010001011
          - Compressed Key:   00110101100101110111101011001000   [done by compression P-Box]
          - XOR with Key:     10100101101111011001000001000011

          - FUNCTION OUTPUT:  10100101101111011001000001000011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110000101111110010000100101100

       - FUNCTION OUTPUT:          10100101101111011001000001000011

       - Left XOR FUNCTION OUTPUT: 11010101000000101011000101101111

       - Next Round Left 32 Bits:  00111100010010101101000001111100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010101000000101011000101101111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111100010010101101000001111100

       - Right 32 Bits:            11010101000000101011000101101111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010110000101010101001110010011001001001010011001110110   [Subkey: 10]
          - Input Half:       11010101000000101011000101101111
          - S-Box Result:     01101001111111101000101000001011   [per every group of 4-bits]
          - Split Into Two:   0110100111111110 [L] 1000101000001011 [R]
          - Swap Halves:      10001010000010110110100111111110
          - Bit Inversion:    01110101111101001001011000000001
          - Compressed Key:   01111010010101100110000111001001   [done by compression P-Box]
          - XOR with Key:     00001111101000101111011111001000

          - FUNCTION OUTPUT:  00001111101000101111011111001000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111100010010101101000001111100

       - FUNCTION OUTPUT:          00001111101000101111011111001000

       - Left XOR FUNCTION OUTPUT: 00110011111010000010011110110100

       - Next Round Left 32 Bits:  11010101000000101011000101101111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00110011111010000010011110110100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010101000000101011000101101111

       - Right 32 Bits:            00110011111010000010011110110100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001010011110101010101100011011001101101101011001100010   [Subkey: 11]
          - Input Half:       00110011111010000010011110110100
          - S-Box Result:     00010001110000101110110110000111   [per every group of 4-bits]
          - Split Into Two:   0001000111000010 [L] 1110110110000111 [R]
          - Swap Halves:      11101101100001110001000111000010
          - Bit Inversion:    00010010011110001110111000111101
          - Compressed Key:   10101101101000100110011111000001   [done by compression P-Box]
          - XOR with Key:     10111111110110101000100111111100

          - FUNCTION OUTPUT:  10111111110110101000100111111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010101000000101011000101101111

       - FUNCTION OUTPUT:          10111111110110101000100111111100

       - Left XOR FUNCTION OUTPUT: 01101010110110000011100010010011

       - Next Round Left 32 Bits:  00110011111010000010011110110100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101010110110000011100010010011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00110011111010000010011110110100

       - Right 32 Bits:            01101010110110000011100010010011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01101101011000010101010100111001001100100100101001100111   [Subkey: 12]
          - Input Half:       01101010110110000011100010010011
          - S-Box Result:     00000100011000100001001000110001   [per every group of 4-bits]
          - Split Into Two:   0000010001100010 [L] 0001001000110001 [R]
          - Swap Halves:      00010010001100010000010001100010
          - Bit Inversion:    11101101110011101111101110011101
          - Compressed Key:   10010100010100110110011010001011   [done by compression P-Box]
          - XOR with Key:     01111001100111011001110100010110

          - FUNCTION OUTPUT:  01111001100111011001110100010110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00110011111010000010011110110100

       - FUNCTION OUTPUT:          01111001100111011001110100010110

       - Left XOR FUNCTION OUTPUT: 01001010011101011011101010100010

       - Next Round Left 32 Bits:  01101010110110000011100010010011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001010011101011011101010100010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101010110110000011100010010011

       - Right 32 Bits:            01001010011101011011101010100010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100100101001111010101010110001101100110110110101100110   [Subkey: 13]
          - Input Half:       01001010011101011011101010100010
          - S-Box Result:     01110100110110011000010001001110   [per every group of 4-bits]
          - Split Into Two:   0111010011011001 [L] 1000010001001110 [R]
          - Swap Halves:      10000100010011100111010011011001
          - Bit Inversion:    01111011101100011000101100100110
          - Compressed Key:   00010110101001111110111001011001   [done by compression P-Box]
          - XOR with Key:     01101101000101100110010101111111

          - FUNCTION OUTPUT:  01101101000101100110010101111111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101010110110000011100010010011

       - FUNCTION OUTPUT:          01101101000101100110010101111111

       - Left XOR FUNCTION OUTPUT: 00000111110011100101110111101100

       - Next Round Left 32 Bits:  01001010011101011011101010100010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00000111110011100101110111101100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001010011101011011101010100010

       - Right 32 Bits:            00000111110011100101110111101100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110110110101100001010101010011100100110010010010100110   [Subkey: 14]
          - Input Half:       00000111110011100101110111101100
          - S-Box Result:     11111101010111001001011011000101   [per every group of 4-bits]
          - Split Into Two:   1111110101011100 [L] 1001011011000101 [R]
          - Swap Halves:      10010110110001011111110101011100
          - Bit Inversion:    01101001001110100000001010100011
          - Compressed Key:   01111010000110101100110001101001   [done by compression P-Box]
          - XOR with Key:     00010011001000001100111011001010

          - FUNCTION OUTPUT:  00010011001000001100111011001010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001010011101011011101010100010

       - FUNCTION OUTPUT:          00010011001000001100111011001010

       - Left XOR FUNCTION OUTPUT: 01011001010101010111010001101000

       - Next Round Left 32 Bits:  00000111110011100101110111101100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011001010101010111010001101000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00000111110011100101110111101100

       - Right 32 Bits:            01011001010101010111010001101000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100010010010100111101010101011000110110011011011010110   [Subkey: 15]
          - Input Half:       01011001010101010111010001101000
          - S-Box Result:     10010011100110011101011100000010   [per every group of 4-bits]
          - Split Into Two:   1001001110011001 [L] 1101011100000010 [R]
          - Swap Halves:      11010111000000101001001110011001
          - Bit Inversion:    00101000111111010110110001100110
          - Compressed Key:   00100001111101010100110011101001   [done by compression P-Box]
          - XOR with Key:     00001001000010000010000010001111

          - FUNCTION OUTPUT:  00001001000010000010000010001111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00000111110011100101110111101100

       - FUNCTION OUTPUT:          00001001000010000010000010001111

       - Left XOR FUNCTION OUTPUT: 00001110110001100111110101100011

       - Next Round Left 32 Bits:  01011001010101010111010001101000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001110110001100111110101100011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011001010101010111010001101000

       - Right 32 Bits:            00001110110001100111110101100011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100111011011010110000101010101001110010011001001001010   [Subkey: 16]
          - Input Half:       00001110110001100111110101100011
          - S-Box Result:     11111100010100001101011000000001   [per every group of 4-bits]
          - Split Into Two:   1111110001010000 [L] 1101011000000001 [R]
          - Swap Halves:      11010110000000011111110001010000
          - Bit Inversion:    00101001111111100000001110101111
          - Compressed Key:   00110111110010100110100010000101   [done by compression P-Box]
          - XOR with Key:     00011110001101000110101100101010

          - FUNCTION OUTPUT:  00011110001101000110101100101010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011001010101010111010001101000

       - FUNCTION OUTPUT:          00011110001101000110101100101010

       - Left XOR FUNCTION OUTPUT: 01000111011000010001111101000010

       - Next Round Left 32 Bits:  00001110110001100111110101100011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000111011000010001111101000010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0100011101100001000111110100001000001110110001100111110101100011

 > Processed Block:     0100011101100001000111110100001000001110110001100111110101100011



Plaintext Block: 3:                                      0110011001110111100001101011010010011001010101001100100000010001

!!!CBC: Previous Ciphertext:                             0100011101100001000111110100001000001110110001100111110101100011

!!!CBC: Current Block XOR with Previous Ciphertext:      0010000100010110100110011111011010010111100100101011010101110010

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00100001000101101001100111110110

       - Right 32 Bits:            10010111100100101011010101110010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10110001101100110110110101100110001001001010011110101010   [Subkey: 1]
          - Input Half:       10010111100100101011010101110010
          - S-Box Result:     00111101001111101000100111011110   [per every group of 4-bits]
          - Split Into Two:   0011110100111110 [L] 1000100111011110 [R]
          - Swap Halves:      10001001110111100011110100111110
          - Bit Inversion:    01110110001000011100001011000001
          - Compressed Key:   01001100111010010010000111110101   [done by compression P-Box]
          - XOR with Key:     00111010110010001110001100110100

          - FUNCTION OUTPUT:  00111010110010001110001100110100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00100001000101101001100111110110

       - FUNCTION OUTPUT:          00111010110010001110001100110100

       - Left XOR FUNCTION OUTPUT: 00011011110111100111101011000010

       - Next Round Left 32 Bits:  10010111100100101011010101110010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011011110111100111101011000010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010111100100101011010101110010

       - Right 32 Bits:            00011011110111100111101011000010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010011100100110010010010100110011101101101011000010101   [Subkey: 2]
          - Input Half:       00011011110111100111101011000010
          - S-Box Result:     10101000011011001101010001011110   [per every group of 4-bits]
          - Split Into Two:   1010100001101100 [L] 1101010001011110 [R]
          - Swap Halves:      11010100010111101010100001101100
          - Bit Inversion:    00101011101000010101011110010011
          - Compressed Key:   01101000100001010011011111001010   [done by compression P-Box]
          - XOR with Key:     01000011001001000110000001011001

          - FUNCTION OUTPUT:  01000011001001000110000001011001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010111100100101011010101110010

       - FUNCTION OUTPUT:          01000011001001000110000001011001

       - Left XOR FUNCTION OUTPUT: 11010100101101101101010100101011

       - Next Round Left 32 Bits:  00011011110111100111101011000010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010100101101101101010100101011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00011011110111100111101011000010

       - Right 32 Bits:            11010100101101101101010100101011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10101011000110110011011011010110011000100100101001111010   [Subkey: 3]
          - Input Half:       11010100101101101101010100101011
          - S-Box Result:     01100111100000000110100111101000   [per every group of 4-bits]
          - Split Into Two:   0110011110000000 [L] 0110100111101000 [R]
          - Swap Halves:      01101001111010000110011110000000
          - Bit Inversion:    10010110000101111001100001111111
          - Compressed Key:   10101001100111100011011010000101   [done by compression P-Box]
          - XOR with Key:     00111111100010011010111011111010

          - FUNCTION OUTPUT:  00111111100010011010111011111010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00011011110111100111101011000010

       - FUNCTION OUTPUT:          00111111100010011010111011111010

       - Left XOR FUNCTION OUTPUT: 00100100010101111101010000111000

       - Next Round Left 32 Bits:  11010100101101101101010100101011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00100100010101111101010000111000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010100101101101101010100101011

       - Right 32 Bits:            00100100010101111101010000111000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101001110010011001001001010011001110110110101100001   [Subkey: 4]
          - Input Half:       00100100010101111101010000111000
          - S-Box Result:     11100111100111010110011100010010   [per every group of 4-bits]
          - Split Into Two:   1110011110011101 [L] 0110011100010010 [R]
          - Swap Halves:      01100111000100101110011110011101
          - Bit Inversion:    10011000111011010001100001100010
          - Compressed Key:   01011101100110000011111001010010   [done by compression P-Box]
          - XOR with Key:     11000101011101010010011000110000

          - FUNCTION OUTPUT:  11000101011101010010011000110000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010100101101101101010100101011

       - FUNCTION OUTPUT:          11000101011101010010011000110000

       - Left XOR FUNCTION OUTPUT: 00010001110000111111001100011011

       - Next Round Left 32 Bits:  00100100010101111101010000111000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00010001110000111111001100011011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00100100010101111101010000111000

       - Right 32 Bits:            00010001110000111111001100011011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10101010101100011011001101101101011001100010010010100111   [Subkey: 5]
          - Input Half:       00010001110000111111001100011011
          - S-Box Result:     10101010010100011011000110101000   [per every group of 4-bits]
          - Split Into Two:   1010101001010001 [L] 1011000110101000 [R]
          - Swap Halves:      10110001101010001010101001010001
          - Bit Inversion:    01001110010101110101010110101110
          - Compressed Key:   10101100100110010111010001101011   [done by compression P-Box]
          - XOR with Key:     11100010110011100010000111000101

          - FUNCTION OUTPUT:  11100010110011100010000111000101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00100100010101111101010000111000

       - FUNCTION OUTPUT:          11100010110011100010000111000101

       - Left XOR FUNCTION OUTPUT: 11000110100110011111010111111101

       - Next Round Left 32 Bits:  00010001110000111111001100011011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000110100110011111010111111101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00010001110000111111001100011011

       - Right 32 Bits:            11000110100110011111010111111101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010101010100111001001100100100101001100111011011010110   [Subkey: 6]
          - Input Half:       11000110100110011111010111111101
          - S-Box Result:     01010000001100111011100110110110   [per every group of 4-bits]
          - Split Into Two:   0101000000110011 [L] 1011100110110110 [R]
          - Swap Halves:      10111001101101100101000000110011
          - Bit Inversion:    01000110010010011010111111001100
          - Compressed Key:   01011000000100011010011011101001   [done by compression P-Box]
          - XOR with Key:     00011110010110000000100100100101

          - FUNCTION OUTPUT:  00011110010110000000100100100101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00010001110000111111001100011011

       - FUNCTION OUTPUT:          00011110010110000000100100100101

       - Left XOR FUNCTION OUTPUT: 00001111100110111111101000111110

       - Next Round Left 32 Bits:  11000110100110011111010111111101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001111100110111111101000111110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000110100110011111010111111101

       - Right 32 Bits:            00001111100110111111101000111110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111010101010110001101100110110110101100110001001001010   [Subkey: 7]
          - Input Half:       00001111100110111111101000111110
          - S-Box Result:     11111011001110001011010000011100   [per every group of 4-bits]
          - Split Into Two:   1111101100111000 [L] 1011010000011100 [R]
          - Swap Halves:      10110100000111001111101100111000
          - Bit Inversion:    01001011111000110000010011000111
          - Compressed Key:   11100101001100111001011010000101   [done by compression P-Box]
          - XOR with Key:     10101110110100001001001001000010

          - FUNCTION OUTPUT:  10101110110100001001001001000010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000110100110011111010111111101

       - FUNCTION OUTPUT:          10101110110100001001001001000010

       - Left XOR FUNCTION OUTPUT: 01101000010010010110011110111111

       - Next Round Left 32 Bits:  00001111100110111111101000111110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101000010010010110011110111111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001111100110111111101000111110

       - Right 32 Bits:            01101000010010010110011110111111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100001010101010011100100110010010010100110011101101101   [Subkey: 8]
          - Input Half:       01101000010010010110011110111111
          - S-Box Result:     00000010011100110000110110001011   [per every group of 4-bits]
          - Split Into Two:   0000001001110011 [L] 0000110110001011 [R]
          - Swap Halves:      00001101100010110000001001110011
          - Bit Inversion:    11110010011101001111110110001100
          - Compressed Key:   00001010101100110001011011011110   [done by compression P-Box]
          - XOR with Key:     11111000110001111110101101010010

          - FUNCTION OUTPUT:  11111000110001111110101101010010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001111100110111111101000111110

       - FUNCTION OUTPUT:          11111000110001111110101101010010

       - Left XOR FUNCTION OUTPUT: 11110111010111000001000101101100

       - Next Round Left 32 Bits:  01101000010010010110011110111111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110111010111000001000101101100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101000010010010110011110111111

       - Right 32 Bits:            11110111010111000001000101101100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10100111101010101011000110110011011011010110011000100100   [Subkey: 9]
          - Input Half:       11110111010111000001000101101100
          - S-Box Result:     10111101100101011010101000000101   [per every group of 4-bits]
          - Split Into Two:   1011110110010101 [L] 1010101000000101 [R]
          - Swap Halves:      10101010000001011011110110010101
          - Bit Inversion:    01010101111110100100001001101010
          - Compressed Key:   00110101100101110111101011001000   [done by compression P-Box]
          - XOR with Key:     01100000011011010011100010100010

          - FUNCTION OUTPUT:  01100000011011010011100010100010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101000010010010110011110111111

       - FUNCTION OUTPUT:          01100000011011010011100010100010

       - Left XOR FUNCTION OUTPUT: 00001000001001000101111100011101

       - Next Round Left 32 Bits:  11110111010111000001000101101100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001000001001000101111100011101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110111010111000001000101101100

       - Right 32 Bits:            00001000001001000101111100011101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010110000101010101001110010011001001001010011001110110   [Subkey: 10]
          - Input Half:       00001000001001000101111100011101
          - S-Box Result:     11110010111001111001101110100110   [per every group of 4-bits]
          - Split Into Two:   1111001011100111 [L] 1001101110100110 [R]
          - Swap Halves:      10011011101001101111001011100111
          - Bit Inversion:    01100100010110010000110100011000
          - Compressed Key:   01111010010101100110000111001001   [done by compression P-Box]
          - XOR with Key:     00011110000011110110110011010001

          - FUNCTION OUTPUT:  00011110000011110110110011010001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110111010111000001000101101100

       - FUNCTION OUTPUT:          00011110000011110110110011010001

       - Left XOR FUNCTION OUTPUT: 11101001010100110111110110111101

       - Next Round Left 32 Bits:  00001000001001000101111100011101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101001010100110111110110111101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001000001001000101111100011101

       - Right 32 Bits:            11101001010100110111110110111101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001010011110101010101100011011001101101101011001100010   [Subkey: 11]
          - Input Half:       11101001010100110111110110111101
          - S-Box Result:     11000011100100011101011010000110   [per every group of 4-bits]
          - Split Into Two:   1100001110010001 [L] 1101011010000110 [R]
          - Swap Halves:      11010110100001101100001110010001
          - Bit Inversion:    00101001011110010011110001101110
          - Compressed Key:   10101101101000100110011111000001   [done by compression P-Box]
          - XOR with Key:     10000100110110110101101110101111

          - FUNCTION OUTPUT:  10000100110110110101101110101111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001000001001000101111100011101

       - FUNCTION OUTPUT:          10000100110110110101101110101111

       - Left XOR FUNCTION OUTPUT: 10001100111111110000010010110010

       - Next Round Left 32 Bits:  11101001010100110111110110111101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001100111111110000010010110010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101001010100110111110110111101

       - Right 32 Bits:            10001100111111110000010010110010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01101101011000010101010100111001001100100100101001100111   [Subkey: 12]
          - Input Half:       10001100111111110000010010110010
          - S-Box Result:     00100101101110111111011110001110   [per every group of 4-bits]
          - Split Into Two:   0010010110111011 [L] 1111011110001110 [R]
          - Swap Halves:      11110111100011100010010110111011
          - Bit Inversion:    00001000011100011101101001000100
          - Compressed Key:   10010100010100110110011010001011   [done by compression P-Box]
          - XOR with Key:     10011100001000101011110011001111

          - FUNCTION OUTPUT:  10011100001000101011110011001111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101001010100110111110110111101

       - FUNCTION OUTPUT:          10011100001000101011110011001111

       - Left XOR FUNCTION OUTPUT: 01110101011100011100000101110010

       - Next Round Left 32 Bits:  10001100111111110000010010110010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110101011100011100000101110010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001100111111110000010010110010

       - Right 32 Bits:            01110101011100011100000101110010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100100101001111010101010110001101100110110110101100110   [Subkey: 13]
          - Input Half:       01110101011100011100000101110010
          - S-Box Result:     11011001110110100101101011011110   [per every group of 4-bits]
          - Split Into Two:   1101100111011010 [L] 0101101011011110 [R]
          - Swap Halves:      01011010110111101101100111011010
          - Bit Inversion:    10100101001000010010011000100101
          - Compressed Key:   00010110101001111110111001011001   [done by compression P-Box]
          - XOR with Key:     10110011100001101100100001111100

          - FUNCTION OUTPUT:  10110011100001101100100001111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001100111111110000010010110010

       - FUNCTION OUTPUT:          10110011100001101100100001111100

       - Left XOR FUNCTION OUTPUT: 00111111011110011100110011001110

       - Next Round Left 32 Bits:  01110101011100011100000101110010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111111011110011100110011001110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110101011100011100000101110010

       - Right 32 Bits:            00111111011110011100110011001110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110110110101100001010101010011100100110010010010100110   [Subkey: 14]
          - Input Half:       00111111011110011100110011001110
          - S-Box Result:     00011011110100110101010101011100   [per every group of 4-bits]
          - Split Into Two:   0001101111010011 [L] 0101010101011100 [R]
          - Swap Halves:      01010101010111000001101111010011
          - Bit Inversion:    10101010101000111110010000101100
          - Compressed Key:   01111010000110101100110001101001   [done by compression P-Box]
          - XOR with Key:     11010000101110010010100001000101

          - FUNCTION OUTPUT:  11010000101110010010100001000101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110101011100011100000101110010

       - FUNCTION OUTPUT:          11010000101110010010100001000101

       - Left XOR FUNCTION OUTPUT: 10100101110010001110100100110111

       - Next Round Left 32 Bits:  00111111011110011100110011001110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10100101110010001110100100110111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111111011110011100110011001110

       - Right 32 Bits:            10100101110010001110100100110111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100010010010100111101010101011000110110011011011010110   [Subkey: 15]
          - Input Half:       10100101110010001110100100110111
          - S-Box Result:     01001001010100101100001100011101   [per every group of 4-bits]
          - Split Into Two:   0100100101010010 [L] 1100001100011101 [R]
          - Swap Halves:      11000011000111010100100101010010
          - Bit Inversion:    00111100111000101011011010101101
          - Compressed Key:   00100001111101010100110011101001   [done by compression P-Box]
          - XOR with Key:     00011101000101111111101001000100

          - FUNCTION OUTPUT:  00011101000101111111101001000100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111111011110011100110011001110

       - FUNCTION OUTPUT:          00011101000101111111101001000100

       - Left XOR FUNCTION OUTPUT: 00100010011011100011011010001010

       - Next Round Left 32 Bits:  10100101110010001110100100110111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00100010011011100011011010001010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10100101110010001110100100110111

       - Right 32 Bits:            00100010011011100011011010001010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100111011011010110000101010101001110010011001001001010   [Subkey: 16]
          - Input Half:       00100010011011100011011010001010
          - S-Box Result:     11101110000011000001000000100100   [per every group of 4-bits]
          - Split Into Two:   1110111000001100 [L] 0001000000100100 [R]
          - Swap Halves:      00010000001001001110111000001100
          - Bit Inversion:    11101111110110110001000111110011
          - Compressed Key:   00110111110010100110100010000101   [done by compression P-Box]
          - XOR with Key:     11011000000100010111100101110110

          - FUNCTION OUTPUT:  11011000000100010111100101110110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10100101110010001110100100110111

       - FUNCTION OUTPUT:          11011000000100010111100101110110

       - Left XOR FUNCTION OUTPUT: 01111101110110011001000001000001

       - Next Round Left 32 Bits:  00100010011011100011011010001010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01111101110110011001000001000001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0111110111011001100100000100000100100010011011100011011010001010

 > Processed Block:     0111110111011001100100000100000100100010011011100011011010001010


FINAL PROCESSED DATA BLOCKS: 1111110111101100101000010010111001110010001011111100110110110011,0100011101100001000111110100001000001110110001100111110101100011,0111110111011001100100000100000100100010011011100011011010001010,

BLOCKS IN ASCII:             ýì¡.r/Í³GaBÆ}c}Ù?A"n6?

=========================================================================================================================
STAGE 3: DES [DECRYPT] ==================================================================================================
=========================================================================================================================

56-bit key: 8js4lOx
In Binary:  00111000011010100111001100110100011011000100111101111000

Subkeys:    Key i = Key (i - 1) [Shifted left by 1 and inverted]

Subkey 1  : 11110001111001010110001100110010111001001110110000100001
Subkey 2  : 10000011100001101010011100110011010001101100010011110111
Subkey 3  : 00011111000111100101011000110011001011100100111011000010
Subkey 4  : 01111000001110000110101001110011001101000110110001001111
Subkey 5  : 00100001111100011110010101100011001100101110010011101100
Subkey 6  : 11110111100000111000011010100111001100110100011011000100
Subkey 7  : 11000010000111110001111001010110001100110010111001001110
Subkey 8  : 01001111011110000011100001101010011100110011010001101100
Subkey 9  : 11101100001000011111000111100101011000110011001011100100
Subkey 10 : 11000100111101111000001110000110101001110011001101000110
Subkey 11 : 01001110110000100001111100011110010101100011001100101110
Subkey 12 : 01101100010011110111100000111000011010100111001100110100
Subkey 13 : 11100100111011000010000111110001111001010110001100110010
Subkey 14 : 01000110110001001111011110000011100001101010011100110011
Subkey 15 : 00101110010011101100001000011111000111100101011000110011
Subkey 16 : 00110100011011000100111101111000001110000110101001110011

S-BOX (4x4):
INPUT | OUTPUT
------|-------
0000  | 1111
0001  | 1010
0010  | 1110
0011  | 0001
0100  | 0111
0101  | 1001
0110  | 0000
0111  | 1101
1000  | 0010
1001  | 0011
1010  | 0100
1011  | 1000
1100  | 0101
1101  | 0110
1110  | 1100
1111  | 1011

P-BOX (7 bits compressed to 4 bits)
Bit at Position X goes to Position Y
X: | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
Y: | 4 | 3 | 1 | 2 | 1 | 4 | 3 |


Data to decrypt         : ýì¡.r/Í³GaBÆ}c}Ù?A"n6?

Data padded with spaces : ýì¡.r/Í³GaBÆ}c}Ù?A"n6?[Padded with '0' spaces]

Data in ASCII           : 253,236,161,46,114,47,205,179,71,97,31,66,14,198,125,99,125,217,144,65,34,110,54,138,

Data in Binary          : 11111101,11101100,10100001,00101110,01110010,00101111,11001101,10110011,01000111,01100001,00011111,01000010,00001110,11000110,01111101,01100011,01111101,11011001,10010000,01000001,00100010,01101110,00110110,10001010,

Data in 64-bit Blocks   : 1111110111101100101000010010111001110010001011111100110110110011,0100011101100001000111110100001000001110110001100111110101100011,0111110111011001100100000100000100100010011011100011011010001010,

!!!!NOTE: Subkeys used in REVERSE order for DECRYPTION



<<<<<< PROCESSING IN 'CBC' MODE >>>>>>


!!!CBC: Initial Previous Ciphertext = IV:               (0111001101110101010000010110011100110000011001000111000100110011)

Ciphertext Block 1:                                      1111110111101100101000010010111001110010001011111100110110110011

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111101111011001010000100101110

       - Right 32 Bits:            01110010001011111100110110110011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110100011011000100111101111000001110000110101001110011   [Subkey: 16]
          - Input Half:       01110010001011111100110110110011
          - S-Box Result:     11011110111010110101011010000001   [per every group of 4-bits]
          - Split Into Two:   1101111011101011 [L] 0101011010000001 [R]
          - Swap Halves:      01010110100000011101111011101011
          - Bit Inversion:    10101001011111100010000100010100
          - Compressed Key:   01010111011010110010001010000011   [done by compression P-Box]
          - XOR with Key:     11111110000101010000001110010111

          - FUNCTION OUTPUT:  11111110000101010000001110010111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111101111011001010000100101110

       - FUNCTION OUTPUT:          11111110000101010000001110010111

       - Left XOR FUNCTION OUTPUT: 00000011111110011010001010111001

       - Next Round Left 32 Bits:  01110010001011111100110110110011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00000011111110011010001010111001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110010001011111100110110110011

       - Right 32 Bits:            00000011111110011010001010111001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00101110010011101100001000011111000111100101011000110011   [Subkey: 15]
          - Input Half:       00000011111110011010001010111001
          - S-Box Result:     11110001101100110100111010000011   [per every group of 4-bits]
          - Split Into Two:   1111000110110011 [L] 0100111010000011 [R]
          - Swap Halves:      01001110100000111111000110110011
          - Bit Inversion:    10110001011111000000111001001100
          - Compressed Key:   10110011010000100100011011000011   [done by compression P-Box]
          - XOR with Key:     00000010001111100100100010001111

          - FUNCTION OUTPUT:  00000010001111100100100010001111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110010001011111100110110110011

       - FUNCTION OUTPUT:          00000010001111100100100010001111

       - Left XOR FUNCTION OUTPUT: 01110000000100011000010100111100

       - Next Round Left 32 Bits:  00000011111110011010001010111001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110000000100011000010100111100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00000011111110011010001010111001

       - Right 32 Bits:            01110000000100011000010100111100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000110110001001111011110000011100001101010011100110011   [Subkey: 14]
          - Input Half:       01110000000100011000010100111100
          - S-Box Result:     11011111101010100010100100010101   [per every group of 4-bits]
          - Split Into Two:   1101111110101010 [L] 0010100100010101 [R]
          - Swap Halves:      00101001000101011101111110101010
          - Bit Inversion:    11010110111010100010000001010101
          - Compressed Key:   00110010110101001100010111010011   [done by compression P-Box]
          - XOR with Key:     11100100001111101110010110000110

          - FUNCTION OUTPUT:  11100100001111101110010110000110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00000011111110011010001010111001

       - FUNCTION OUTPUT:          11100100001111101110010110000110

       - Left XOR FUNCTION OUTPUT: 11100111110001110100011100111111

       - Next Round Left 32 Bits:  01110000000100011000010100111100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100111110001110100011100111111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110000000100011000010100111100

       - Right 32 Bits:            11100111110001110100011100111111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11100100111011000010000111110001111001010110001100110010   [Subkey: 13]
          - Input Half:       11100111110001110100011100111111
          - S-Box Result:     11001101010111010111110100011011   [per every group of 4-bits]
          - Split Into Two:   1100110101011101 [L] 0111110100011011 [R]
          - Swap Halves:      01111101000110111100110101011101
          - Bit Inversion:    10000010111001000011001010100010
          - Compressed Key:   00010111100011111111101010010001   [done by compression P-Box]
          - XOR with Key:     10010101011010111100100000110011

          - FUNCTION OUTPUT:  10010101011010111100100000110011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110000000100011000010100111100

       - FUNCTION OUTPUT:          10010101011010111100100000110011

       - Left XOR FUNCTION OUTPUT: 11100101011110100100110100001111

       - Next Round Left 32 Bits:  11100111110001110100011100111111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100101011110100100110100001111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100111110001110100011100111111

       - Right 32 Bits:            11100101011110100100110100001111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01101100010011110111100000111000011010100111001100110100   [Subkey: 12]
          - Input Half:       11100101011110100100110100001111
          - S-Box Result:     11001001110101000111011011111011   [per every group of 4-bits]
          - Split Into Two:   1100100111010100 [L] 0111011011111011 [R]
          - Swap Halves:      01110110111110111100100111010100
          - Bit Inversion:    10001001000001000011011000101011
          - Compressed Key:   10010011111100110011011010011000   [done by compression P-Box]
          - XOR with Key:     00011010111101110000000010110011

          - FUNCTION OUTPUT:  00011010111101110000000010110011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100111110001110100011100111111

       - FUNCTION OUTPUT:          00011010111101110000000010110011

       - Left XOR FUNCTION OUTPUT: 11111101001100000100011110001100

       - Next Round Left 32 Bits:  11100101011110100100110100001111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111101001100000100011110001100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100101011110100100110100001111

       - Right 32 Bits:            11111101001100000100011110001100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001110110000100001111100011110010101100011001100101110   [Subkey: 11]
          - Input Half:       11111101001100000100011110001100
          - S-Box Result:     10110110000111110111110100100101   [per every group of 4-bits]
          - Split Into Two:   1011011000011111 [L] 0111110100100101 [R]
          - Swap Halves:      01111101001001011011011000011111
          - Bit Inversion:    10000010110110100100100111100000
          - Compressed Key:   10110000001100100001010010011101   [done by compression P-Box]
          - XOR with Key:     00110010111010000101110101111101

          - FUNCTION OUTPUT:  00110010111010000101110101111101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100101011110100100110100001111

       - FUNCTION OUTPUT:          00110010111010000101110101111101

       - Left XOR FUNCTION OUTPUT: 11010111100100100001000001110010

       - Next Round Left 32 Bits:  11111101001100000100011110001100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010111100100100001000001110010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111101001100000100011110001100

       - Right 32 Bits:            11010111100100100001000001110010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11000100111101111000001110000110101001110011001101000110   [Subkey: 10]
          - Input Half:       11010111100100100001000001110010
          - S-Box Result:     01101101001111101010111111011110   [per every group of 4-bits]
          - Split Into Two:   0110110100111110 [L] 1010111111011110 [R]
          - Swap Halves:      10101111110111100110110100111110
          - Bit Inversion:    01010000001000011001001011000001
          - Compressed Key:   00011110000001001010110010011001   [done by compression P-Box]
          - XOR with Key:     01001110001001010011111001011000

          - FUNCTION OUTPUT:  01001110001001010011111001011000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111101001100000100011110001100

       - FUNCTION OUTPUT:          01001110001001010011111001011000

       - Left XOR FUNCTION OUTPUT: 10110011000101010111100111010100

       - Next Round Left 32 Bits:  11010111100100100001000001110010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10110011000101010111100111010100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010111100100100001000001110010

       - Right 32 Bits:            10110011000101010111100111010100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11101100001000011111000111100101011000110011001011100100   [Subkey: 9]
          - Input Half:       10110011000101010111100111010100
          - S-Box Result:     10000001101010011101001101100111   [per every group of 4-bits]
          - Split Into Two:   1000000110101001 [L] 1101001101100111 [R]
          - Swap Halves:      11010011011001111000000110101001
          - Bit Inversion:    00101100100110000111111001010110
          - Compressed Key:   10010100110111010111110010101000   [done by compression P-Box]
          - XOR with Key:     10111000010001010000001011111110

          - FUNCTION OUTPUT:  10111000010001010000001011111110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010111100100100001000001110010

       - FUNCTION OUTPUT:          10111000010001010000001011111110

       - Left XOR FUNCTION OUTPUT: 01101111110101110001001010001100

       - Next Round Left 32 Bits:  10110011000101010111100111010100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101111110101110001001010001100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10110011000101010111100111010100

       - Right 32 Bits:            01101111110101110001001010001100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001111011110000011100001101010011100110011010001101100   [Subkey: 8]
          - Input Half:       01101111110101110001001010001100
          - S-Box Result:     00001011011011011010111000100101   [per every group of 4-bits]
          - Split Into Two:   0000101101101101 [L] 1010111000100101 [R]
          - Swap Halves:      10101110001001010000101101101101
          - Bit Inversion:    01010001110110101111010010010010
          - Compressed Key:   10111101101110010011110001001100   [done by compression P-Box]
          - XOR with Key:     11101100011000111100100011011110

          - FUNCTION OUTPUT:  11101100011000111100100011011110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10110011000101010111100111010100

       - FUNCTION OUTPUT:          11101100011000111100100011011110

       - Left XOR FUNCTION OUTPUT: 01011111011101101011000100001010

       - Next Round Left 32 Bits:  01101111110101110001001010001100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011111011101101011000100001010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101111110101110001001010001100

       - Right 32 Bits:            01011111011101101011000100001010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11000010000111110001111001010110001100110010111001001110   [Subkey: 7]
          - Input Half:       01011111011101101011000100001010
          - S-Box Result:     10011011110100001000101011110100   [per every group of 4-bits]
          - Split Into Two:   1001101111010000 [L] 1000101011110100 [R]
          - Swap Halves:      10001010111101001001101111010000
          - Bit Inversion:    01110101000010110110010000101111
          - Compressed Key:   00101011001110100010110011001101   [done by compression P-Box]
          - XOR with Key:     01011110001100010100100011100010

          - FUNCTION OUTPUT:  01011110001100010100100011100010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101111110101110001001010001100

       - FUNCTION OUTPUT:          01011110001100010100100011100010

       - Left XOR FUNCTION OUTPUT: 00110001111001100101101001101110

       - Next Round Left 32 Bits:  01011111011101101011000100001010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00110001111001100101101001101110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011111011101101011000100001010

       - Right 32 Bits:            00110001111001100101101001101110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11110111100000111000011010100111001100110100011011000100   [Subkey: 6]
          - Input Half:       00110001111001100101101001101110
          - S-Box Result:     00011010110000001001010000001100   [per every group of 4-bits]
          - Split Into Two:   0001101011000000 [L] 1001010000001100 [R]
          - Swap Halves:      10010100000011000001101011000000
          - Bit Inversion:    01101011111100111110010100111111
          - Compressed Key:   01110000000001010110111011101000   [done by compression P-Box]
          - XOR with Key:     00011011111101101000101111010111

          - FUNCTION OUTPUT:  00011011111101101000101111010111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011111011101101011000100001010

       - FUNCTION OUTPUT:          00011011111101101000101111010111

       - Left XOR FUNCTION OUTPUT: 01000100100000000011101011011101

       - Next Round Left 32 Bits:  00110001111001100101101001101110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000100100000000011101011011101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00110001111001100101101001101110

       - Right 32 Bits:            01000100100000000011101011011101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100001111100011110010101100011001100101110010011101100   [Subkey: 5]
          - Input Half:       01000100100000000011101011011101
          - S-Box Result:     01110111001011110001010001100110   [per every group of 4-bits]
          - Split Into Two:   0111011100101111 [L] 0001010001100110 [R]
          - Swap Halves:      00010100011001100111011100101111
          - Bit Inversion:    11101011100110011000100011010000
          - Compressed Key:   00001100110010010110011101101100   [done by compression P-Box]
          - XOR with Key:     11100111010100001110111110111100

          - FUNCTION OUTPUT:  11100111010100001110111110111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00110001111001100101101001101110

       - FUNCTION OUTPUT:          11100111010100001110111110111100

       - Left XOR FUNCTION OUTPUT: 11010110101101101011010111010010

       - Next Round Left 32 Bits:  01000100100000000011101011011101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010110101101101011010111010010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01000100100000000011101011011101

       - Right 32 Bits:            11010110101101101011010111010010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111000001110000110101001110011001101000110110001001111   [Subkey: 4]
          - Input Half:       11010110101101101011010111010010
          - S-Box Result:     01100000100000001000100101101110   [per every group of 4-bits]
          - Split Into Two:   0110000010000000 [L] 1000100101101110 [R]
          - Swap Halves:      10001001011011100110000010000000
          - Bit Inversion:    01110110100100011001111101111111
          - Compressed Key:   11001101111010110110001001001111   [done by compression P-Box]
          - XOR with Key:     10111011011110101111110100110000

          - FUNCTION OUTPUT:  10111011011110101111110100110000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01000100100000000011101011011101

       - FUNCTION OUTPUT:          10111011011110101111110100110000

       - Left XOR FUNCTION OUTPUT: 11111111111110101100011111101101

       - Next Round Left 32 Bits:  11010110101101101011010111010010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111111111110101100011111101101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010110101101101011010111010010

       - Right 32 Bits:            11111111111110101100011111101101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00011111000111100101011000110011001011100100111011000010   [Subkey: 3]
          - Input Half:       11111111111110101100011111101101
          - S-Box Result:     10111011101101000101110111000110   [per every group of 4-bits]
          - Split Into Two:   1011101110110100 [L] 0101110111000110 [R]
          - Swap Halves:      01011101110001101011101110110100
          - Bit Inversion:    10100010001110010100010001001011
          - Compressed Key:   11111011010100110110011011100001   [done by compression P-Box]
          - XOR with Key:     01011001011010100010001010101010

          - FUNCTION OUTPUT:  01011001011010100010001010101010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010110101101101011010111010010

       - FUNCTION OUTPUT:          01011001011010100010001010101010

       - Left XOR FUNCTION OUTPUT: 10001111110111001001011101111000

       - Next Round Left 32 Bits:  11111111111110101100011111101101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001111110111001001011101111000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111111111110101100011111101101

       - Right 32 Bits:            10001111110111001001011101111000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10000011100001101010011100110011010001101100010011110111   [Subkey: 2]
          - Input Half:       10001111110111001001011101111000
          - S-Box Result:     00101011011001010011110111010010   [per every group of 4-bits]
          - Split Into Two:   0010101101100101 [L] 0011110111010010 [R]
          - Swap Halves:      00111101110100100010101101100101
          - Bit Inversion:    11000010001011011101010010011010
          - Compressed Key:   00100010100000110101011101101011   [done by compression P-Box]
          - XOR with Key:     11100000101011101000001111110001

          - FUNCTION OUTPUT:  11100000101011101000001111110001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111111111110101100011111101101

       - FUNCTION OUTPUT:          11100000101011101000001111110001

       - Left XOR FUNCTION OUTPUT: 00011111010101000100010000011100

       - Next Round Left 32 Bits:  10001111110111001001011101111000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011111010101000100010000011100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001111110111001001011101111000

       - Right 32 Bits:            00011111010101000100010000011100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11110001111001010110001100110010111001001110110000100001   [Subkey: 1]
          - Input Half:       00011111010101000100010000011100
          - S-Box Result:     10101011100101110111011110100101   [per every group of 4-bits]
          - Split Into Two:   1010101110010111 [L] 0111011110100101 [R]
          - Swap Halves:      01110111101001011010101110010111
          - Bit Inversion:    10001000010110100101010001101000
          - Compressed Key:   01000110110000111011001101000010   [done by compression P-Box]
          - XOR with Key:     11001110100110011110011100101010

          - FUNCTION OUTPUT:  11001110100110011110011100101010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001111110111001001011101111000

       - FUNCTION OUTPUT:          11001110100110011110011100101010

       - Left XOR FUNCTION OUTPUT: 01000001010001010111000001010010

       - Next Round Left 32 Bits:  00011111010101000100010000011100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000001010001010111000001010010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0100000101000101011100000101001000011111010101000100010000011100

 > Decrypted Block:     0100000101000101011100000101001000011111010101000100010000011100


!!!CBC: Previous Ciphertext:                             0111001101110101010000010110011100110000011001000111000100110011

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    0011001000110000001100010011010100101111001100000011010100101111

 > Final Processed Block:                                0011001000110000001100010011010100101111001100000011010100101111



Ciphertext Block 2:                                      0100011101100001000111110100001000001110110001100111110101100011

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01000111011000010001111101000010

       - Right 32 Bits:            00001110110001100111110101100011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110100011011000100111101111000001110000110101001110011   [Subkey: 16]
          - Input Half:       00001110110001100111110101100011
          - S-Box Result:     11111100010100001101011000000001   [per every group of 4-bits]
          - Split Into Two:   1111110001010000 [L] 1101011000000001 [R]
          - Swap Halves:      11010110000000011111110001010000
          - Bit Inversion:    00101001111111100000001110101111
          - Compressed Key:   01010111011010110010001010000011   [done by compression P-Box]
          - XOR with Key:     01111110100101010010000100101100

          - FUNCTION OUTPUT:  01111110100101010010000100101100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01000111011000010001111101000010

       - FUNCTION OUTPUT:          01111110100101010010000100101100

       - Left XOR FUNCTION OUTPUT: 00111001111101000011111001101110

       - Next Round Left 32 Bits:  00001110110001100111110101100011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111001111101000011111001101110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001110110001100111110101100011

       - Right 32 Bits:            00111001111101000011111001101110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00101110010011101100001000011111000111100101011000110011   [Subkey: 15]
          - Input Half:       00111001111101000011111001101110
          - S-Box Result:     00010011101101110001110000001100   [per every group of 4-bits]
          - Split Into Two:   0001001110110111 [L] 0001110000001100 [R]
          - Swap Halves:      00011100000011000001001110110111
          - Bit Inversion:    11100011111100111110110001001000
          - Compressed Key:   10110011010000100100011011000011   [done by compression P-Box]
          - XOR with Key:     01010000101100011010101010001011

          - FUNCTION OUTPUT:  01010000101100011010101010001011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001110110001100111110101100011

       - FUNCTION OUTPUT:          01010000101100011010101010001011

       - Left XOR FUNCTION OUTPUT: 01011110011101111101011111101000

       - Next Round Left 32 Bits:  00111001111101000011111001101110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011110011101111101011111101000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111001111101000011111001101110

       - Right 32 Bits:            01011110011101111101011111101000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000110110001001111011110000011100001101010011100110011   [Subkey: 14]
          - Input Half:       01011110011101111101011111101000
          - S-Box Result:     10011100110111010110110111000010   [per every group of 4-bits]
          - Split Into Two:   1001110011011101 [L] 0110110111000010 [R]
          - Swap Halves:      01101101110000101001110011011101
          - Bit Inversion:    10010010001111010110001100100010
          - Compressed Key:   00110010110101001100010111010011   [done by compression P-Box]
          - XOR with Key:     10100000111010011010011011110001

          - FUNCTION OUTPUT:  10100000111010011010011011110001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111001111101000011111001101110

       - FUNCTION OUTPUT:          10100000111010011010011011110001

       - Left XOR FUNCTION OUTPUT: 10011001000111011001100010011111

       - Next Round Left 32 Bits:  01011110011101111101011111101000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011001000111011001100010011111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011110011101111101011111101000

       - Right 32 Bits:            10011001000111011001100010011111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11100100111011000010000111110001111001010110001100110010   [Subkey: 13]
          - Input Half:       10011001000111011001100010011111
          - S-Box Result:     00110011101001100011001000111011   [per every group of 4-bits]
          - Split Into Two:   0011001110100110 [L] 0011001000111011 [R]
          - Swap Halves:      00110010001110110011001110100110
          - Bit Inversion:    11001101110001001100110001011001
          - Compressed Key:   00010111100011111111101010010001   [done by compression P-Box]
          - XOR with Key:     11011010010010110011011011001000

          - FUNCTION OUTPUT:  11011010010010110011011011001000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011110011101111101011111101000

       - FUNCTION OUTPUT:          11011010010010110011011011001000

       - Left XOR FUNCTION OUTPUT: 10000100001111001110000100100000

       - Next Round Left 32 Bits:  10011001000111011001100010011111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10000100001111001110000100100000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011001000111011001100010011111

       - Right 32 Bits:            10000100001111001110000100100000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01101100010011110111100000111000011010100111001100110100   [Subkey: 12]
          - Input Half:       10000100001111001110000100100000
          - S-Box Result:     00100111000101011100101011101111   [per every group of 4-bits]
          - Split Into Two:   0010011100010101 [L] 1100101011101111 [R]
          - Swap Halves:      11001010111011110010011100010101
          - Bit Inversion:    00110101000100001101100011101010
          - Compressed Key:   10010011111100110011011010011000   [done by compression P-Box]
          - XOR with Key:     10100110111000111110111001110010

          - FUNCTION OUTPUT:  10100110111000111110111001110010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011001000111011001100010011111

       - FUNCTION OUTPUT:          10100110111000111110111001110010

       - Left XOR FUNCTION OUTPUT: 00111111111111100111011011101101

       - Next Round Left 32 Bits:  10000100001111001110000100100000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111111111111100111011011101101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10000100001111001110000100100000

       - Right 32 Bits:            00111111111111100111011011101101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001110110000100001111100011110010101100011001100101110   [Subkey: 11]
          - Input Half:       00111111111111100111011011101101
          - S-Box Result:     00011011101111001101000011000110   [per every group of 4-bits]
          - Split Into Two:   0001101110111100 [L] 1101000011000110 [R]
          - Swap Halves:      11010000110001100001101110111100
          - Bit Inversion:    00101111001110011110010001000011
          - Compressed Key:   10110000001100100001010010011101   [done by compression P-Box]
          - XOR with Key:     10011111000010111111000011011110

          - FUNCTION OUTPUT:  10011111000010111111000011011110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10000100001111001110000100100000

       - FUNCTION OUTPUT:          10011111000010111111000011011110

       - Left XOR FUNCTION OUTPUT: 00011011001101110001000111111110

       - Next Round Left 32 Bits:  00111111111111100111011011101101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011011001101110001000111111110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111111111111100111011011101101

       - Right 32 Bits:            00011011001101110001000111111110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11000100111101111000001110000110101001110011001101000110   [Subkey: 10]
          - Input Half:       00011011001101110001000111111110
          - S-Box Result:     10101000000111011010101010111100   [per every group of 4-bits]
          - Split Into Two:   1010100000011101 [L] 1010101010111100 [R]
          - Swap Halves:      10101010101111001010100000011101
          - Bit Inversion:    01010101010000110101011111100010
          - Compressed Key:   00011110000001001010110010011001   [done by compression P-Box]
          - XOR with Key:     01001011010001111111101101111011

          - FUNCTION OUTPUT:  01001011010001111111101101111011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111111111111100111011011101101

       - FUNCTION OUTPUT:          01001011010001111111101101111011

       - Left XOR FUNCTION OUTPUT: 01110100101110011000110110010110

       - Next Round Left 32 Bits:  00011011001101110001000111111110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110100101110011000110110010110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00011011001101110001000111111110

       - Right 32 Bits:            01110100101110011000110110010110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11101100001000011111000111100101011000110011001011100100   [Subkey: 9]
          - Input Half:       01110100101110011000110110010110
          - S-Box Result:     11010111100000110010011000110000   [per every group of 4-bits]
          - Split Into Two:   1101011110000011 [L] 0010011000110000 [R]
          - Swap Halves:      00100110001100001101011110000011
          - Bit Inversion:    11011001110011110010100001111100
          - Compressed Key:   10010100110111010111110010101000   [done by compression P-Box]
          - XOR with Key:     01001101000100100101010011010100

          - FUNCTION OUTPUT:  01001101000100100101010011010100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00011011001101110001000111111110

       - FUNCTION OUTPUT:          01001101000100100101010011010100

       - Left XOR FUNCTION OUTPUT: 01010110001001010100010100101010

       - Next Round Left 32 Bits:  01110100101110011000110110010110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01010110001001010100010100101010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110100101110011000110110010110

       - Right 32 Bits:            01010110001001010100010100101010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001111011110000011100001101010011100110011010001101100   [Subkey: 8]
          - Input Half:       01010110001001010100010100101010
          - S-Box Result:     10010000111010010111100111100100   [per every group of 4-bits]
          - Split Into Two:   1001000011101001 [L] 0111100111100100 [R]
          - Swap Halves:      01111001111001001001000011101001
          - Bit Inversion:    10000110000110110110111100010110
          - Compressed Key:   10111101101110010011110001001100   [done by compression P-Box]
          - XOR with Key:     00111011101000100101001101011010

          - FUNCTION OUTPUT:  00111011101000100101001101011010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110100101110011000110110010110

       - FUNCTION OUTPUT:          00111011101000100101001101011010

       - Left XOR FUNCTION OUTPUT: 01001111000110111101111011001100

       - Next Round Left 32 Bits:  01010110001001010100010100101010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001111000110111101111011001100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01010110001001010100010100101010

       - Right 32 Bits:            01001111000110111101111011001100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11000010000111110001111001010110001100110010111001001110   [Subkey: 7]
          - Input Half:       01001111000110111101111011001100
          - S-Box Result:     01111011101010000110110001010101   [per every group of 4-bits]
          - Split Into Two:   0111101110101000 [L] 0110110001010101 [R]
          - Swap Halves:      01101100010101010111101110101000
          - Bit Inversion:    10010011101010101000010001010111
          - Compressed Key:   00101011001110100010110011001101   [done by compression P-Box]
          - XOR with Key:     10111000100100001010100010011010

          - FUNCTION OUTPUT:  10111000100100001010100010011010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01010110001001010100010100101010

       - FUNCTION OUTPUT:          10111000100100001010100010011010

       - Left XOR FUNCTION OUTPUT: 11101110101101011110110110110000

       - Next Round Left 32 Bits:  01001111000110111101111011001100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101110101101011110110110110000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001111000110111101111011001100

       - Right 32 Bits:            11101110101101011110110110110000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11110111100000111000011010100111001100110100011011000100   [Subkey: 6]
          - Input Half:       11101110101101011110110110110000
          - S-Box Result:     11001100100010011100011010001111   [per every group of 4-bits]
          - Split Into Two:   1100110010001001 [L] 1100011010001111 [R]
          - Swap Halves:      11000110100011111100110010001001
          - Bit Inversion:    00111001011100000011001101110110
          - Compressed Key:   01110000000001010110111011101000   [done by compression P-Box]
          - XOR with Key:     01001001011101010101110110011110

          - FUNCTION OUTPUT:  01001001011101010101110110011110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001111000110111101111011001100

       - FUNCTION OUTPUT:          01001001011101010101110110011110

       - Left XOR FUNCTION OUTPUT: 00000110011011101000001101010010

       - Next Round Left 32 Bits:  11101110101101011110110110110000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00000110011011101000001101010010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101110101101011110110110110000

       - Right 32 Bits:            00000110011011101000001101010010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100001111100011110010101100011001100101110010011101100   [Subkey: 5]
          - Input Half:       00000110011011101000001101010010
          - S-Box Result:     11110000000011000010000110011110   [per every group of 4-bits]
          - Split Into Two:   1111000000001100 [L] 0010000110011110 [R]
          - Swap Halves:      00100001100111101111000000001100
          - Bit Inversion:    11011110011000010000111111110011
          - Compressed Key:   00001100110010010110011101101100   [done by compression P-Box]
          - XOR with Key:     11010010101010000110100010011111

          - FUNCTION OUTPUT:  11010010101010000110100010011111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101110101101011110110110110000

       - FUNCTION OUTPUT:          11010010101010000110100010011111

       - Left XOR FUNCTION OUTPUT: 00111100000111011000010100101111

       - Next Round Left 32 Bits:  00000110011011101000001101010010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111100000111011000010100101111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00000110011011101000001101010010

       - Right 32 Bits:            00111100000111011000010100101111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111000001110000110101001110011001101000110110001001111   [Subkey: 4]
          - Input Half:       00111100000111011000010100101111
          - S-Box Result:     00010101101001100010100111101011   [per every group of 4-bits]
          - Split Into Two:   0001010110100110 [L] 0010100111101011 [R]
          - Swap Halves:      00101001111010110001010110100110
          - Bit Inversion:    11010110000101001110101001011001
          - Compressed Key:   11001101111010110110001001001111   [done by compression P-Box]
          - XOR with Key:     00011011111111111000100000010110

          - FUNCTION OUTPUT:  00011011111111111000100000010110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00000110011011101000001101010010

       - FUNCTION OUTPUT:          00011011111111111000100000010110

       - Left XOR FUNCTION OUTPUT: 00011101100100010000101101000100

       - Next Round Left 32 Bits:  00111100000111011000010100101111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011101100100010000101101000100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111100000111011000010100101111

       - Right 32 Bits:            00011101100100010000101101000100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00011111000111100101011000110011001011100100111011000010   [Subkey: 3]
          - Input Half:       00011101100100010000101101000100
          - S-Box Result:     10100110001110101111100001110111   [per every group of 4-bits]
          - Split Into Two:   1010011000111010 [L] 1111100001110111 [R]
          - Swap Halves:      11111000011101111010011000111010
          - Bit Inversion:    00000111100010000101100111000101
          - Compressed Key:   11111011010100110110011011100001   [done by compression P-Box]
          - XOR with Key:     11111100110110110011111100100100

          - FUNCTION OUTPUT:  11111100110110110011111100100100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111100000111011000010100101111

       - FUNCTION OUTPUT:          11111100110110110011111100100100

       - Left XOR FUNCTION OUTPUT: 11000000110001101011101000001011

       - Next Round Left 32 Bits:  00011101100100010000101101000100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000000110001101011101000001011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00011101100100010000101101000100

       - Right 32 Bits:            11000000110001101011101000001011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10000011100001101010011100110011010001101100010011110111   [Subkey: 2]
          - Input Half:       11000000110001101011101000001011
          - S-Box Result:     01011111010100001000010011111000   [per every group of 4-bits]
          - Split Into Two:   0101111101010000 [L] 1000010011111000 [R]
          - Swap Halves:      10000100111110000101111101010000
          - Bit Inversion:    01111011000001111010000010101111
          - Compressed Key:   00100010100000110101011101101011   [done by compression P-Box]
          - XOR with Key:     01011001100001001111011111000100

          - FUNCTION OUTPUT:  01011001100001001111011111000100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00011101100100010000101101000100

       - FUNCTION OUTPUT:          01011001100001001111011111000100

       - Left XOR FUNCTION OUTPUT: 01000100000101011111110010000000

       - Next Round Left 32 Bits:  11000000110001101011101000001011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000100000101011111110010000000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000000110001101011101000001011

       - Right 32 Bits:            01000100000101011111110010000000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11110001111001010110001100110010111001001110110000100001   [Subkey: 1]
          - Input Half:       01000100000101011111110010000000
          - S-Box Result:     01110111101010011011010100101111   [per every group of 4-bits]
          - Split Into Two:   0111011110101001 [L] 1011010100101111 [R]
          - Swap Halves:      10110101001011110111011110101001
          - Bit Inversion:    01001010110100001000100001010110
          - Compressed Key:   01000110110000111011001101000010   [done by compression P-Box]
          - XOR with Key:     00001100000100110011101100010100

          - FUNCTION OUTPUT:  00001100000100110011101100010100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000000110001101011101000001011

       - FUNCTION OUTPUT:          00001100000100110011101100010100

       - Left XOR FUNCTION OUTPUT: 11001100110101011000000100011111

       - Next Round Left 32 Bits:  01000100000101011111110010000000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001100110101011000000100011111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 1100110011010101100000010001111101000100000101011111110010000000

 > Decrypted Block:     1100110011010101100000010001111101000100000101011111110010000000


!!!CBC: Previous Ciphertext:                             1111110111101100101000010010111001110010001011111100110110110011

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    0011000100111001001000000011000100110110001110100011000100110011

 > Final Processed Block:                                0011000100111001001000000011000100110110001110100011000100110011



Ciphertext Block 3:                                      0111110111011001100100000100000100100010011011100011011010001010

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01111101110110011001000001000001

       - Right 32 Bits:            00100010011011100011011010001010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110100011011000100111101111000001110000110101001110011   [Subkey: 16]
          - Input Half:       00100010011011100011011010001010
          - S-Box Result:     11101110000011000001000000100100   [per every group of 4-bits]
          - Split Into Two:   1110111000001100 [L] 0001000000100100 [R]
          - Swap Halves:      00010000001001001110111000001100
          - Bit Inversion:    11101111110110110001000111110011
          - Compressed Key:   01010111011010110010001010000011   [done by compression P-Box]
          - XOR with Key:     10111000101100000011001101110000

          - FUNCTION OUTPUT:  10111000101100000011001101110000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01111101110110011001000001000001

       - FUNCTION OUTPUT:          10111000101100000011001101110000

       - Left XOR FUNCTION OUTPUT: 11000101011010011010001100110001

       - Next Round Left 32 Bits:  00100010011011100011011010001010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000101011010011010001100110001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00100010011011100011011010001010

       - Right 32 Bits:            11000101011010011010001100110001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00101110010011101100001000011111000111100101011000110011   [Subkey: 15]
          - Input Half:       11000101011010011010001100110001
          - S-Box Result:     01011001000000110100000100011010   [per every group of 4-bits]
          - Split Into Two:   0101100100000011 [L] 0100000100011010 [R]
          - Swap Halves:      01000001000110100101100100000011
          - Bit Inversion:    10111110111001011010011011111100
          - Compressed Key:   10110011010000100100011011000011   [done by compression P-Box]
          - XOR with Key:     00001101101001111110000000111111

          - FUNCTION OUTPUT:  00001101101001111110000000111111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00100010011011100011011010001010

       - FUNCTION OUTPUT:          00001101101001111110000000111111

       - Left XOR FUNCTION OUTPUT: 00101111110010011101011010110101

       - Next Round Left 32 Bits:  11000101011010011010001100110001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101111110010011101011010110101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000101011010011010001100110001

       - Right 32 Bits:            00101111110010011101011010110101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01000110110001001111011110000011100001101010011100110011   [Subkey: 14]
          - Input Half:       00101111110010011101011010110101
          - S-Box Result:     11101011010100110110000010001001   [per every group of 4-bits]
          - Split Into Two:   1110101101010011 [L] 0110000010001001 [R]
          - Swap Halves:      01100000100010011110101101010011
          - Bit Inversion:    10011111011101100001010010101100
          - Compressed Key:   00110010110101001100010111010011   [done by compression P-Box]
          - XOR with Key:     10101101101000101101000101111111

          - FUNCTION OUTPUT:  10101101101000101101000101111111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000101011010011010001100110001

       - FUNCTION OUTPUT:          10101101101000101101000101111111

       - Left XOR FUNCTION OUTPUT: 01101000110010110111001001001110

       - Next Round Left 32 Bits:  00101111110010011101011010110101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101000110010110111001001001110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101111110010011101011010110101

       - Right 32 Bits:            01101000110010110111001001001110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11100100111011000010000111110001111001010110001100110010   [Subkey: 13]
          - Input Half:       01101000110010110111001001001110
          - S-Box Result:     00000010010110001101111001111100   [per every group of 4-bits]
          - Split Into Two:   0000001001011000 [L] 1101111001111100 [R]
          - Swap Halves:      11011110011111000000001001011000
          - Bit Inversion:    00100001100000111111110110100111
          - Compressed Key:   00010111100011111111101010010001   [done by compression P-Box]
          - XOR with Key:     00110110000011000000011100110110

          - FUNCTION OUTPUT:  00110110000011000000011100110110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101111110010011101011010110101

       - FUNCTION OUTPUT:          00110110000011000000011100110110

       - Left XOR FUNCTION OUTPUT: 00011001110001011101000110000011

       - Next Round Left 32 Bits:  01101000110010110111001001001110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011001110001011101000110000011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101000110010110111001001001110

       - Right 32 Bits:            00011001110001011101000110000011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01101100010011110111100000111000011010100111001100110100   [Subkey: 12]
          - Input Half:       00011001110001011101000110000011
          - S-Box Result:     10100011010110010110101000100001   [per every group of 4-bits]
          - Split Into Two:   1010001101011001 [L] 0110101000100001 [R]
          - Swap Halves:      01101010001000011010001101011001
          - Bit Inversion:    10010101110111100101110010100110
          - Compressed Key:   10010011111100110011011010011000   [done by compression P-Box]
          - XOR with Key:     00000110001011010110101000111110

          - FUNCTION OUTPUT:  00000110001011010110101000111110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101000110010110111001001001110

       - FUNCTION OUTPUT:          00000110001011010110101000111110

       - Left XOR FUNCTION OUTPUT: 01101110111001100001100001110000

       - Next Round Left 32 Bits:  00011001110001011101000110000011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101110111001100001100001110000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00011001110001011101000110000011

       - Right 32 Bits:            01101110111001100001100001110000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001110110000100001111100011110010101100011001100101110   [Subkey: 11]
          - Input Half:       01101110111001100001100001110000
          - S-Box Result:     00001100110000001010001011011111   [per every group of 4-bits]
          - Split Into Two:   0000110011000000 [L] 1010001011011111 [R]
          - Swap Halves:      10100010110111110000110011000000
          - Bit Inversion:    01011101001000001111001100111111
          - Compressed Key:   10110000001100100001010010011101   [done by compression P-Box]
          - XOR with Key:     11101101000100101110011110100010

          - FUNCTION OUTPUT:  11101101000100101110011110100010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00011001110001011101000110000011

       - FUNCTION OUTPUT:          11101101000100101110011110100010

       - Left XOR FUNCTION OUTPUT: 11110100110101110011011000100001

       - Next Round Left 32 Bits:  01101110111001100001100001110000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110100110101110011011000100001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101110111001100001100001110000

       - Right 32 Bits:            11110100110101110011011000100001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11000100111101111000001110000110101001110011001101000110   [Subkey: 10]
          - Input Half:       11110100110101110011011000100001
          - S-Box Result:     10110111011011010001000011101010   [per every group of 4-bits]
          - Split Into Two:   1011011101101101 [L] 0001000011101010 [R]
          - Swap Halves:      00010000111010101011011101101101
          - Bit Inversion:    11101111000101010100100010010010
          - Compressed Key:   00011110000001001010110010011001   [done by compression P-Box]
          - XOR with Key:     11110001000100011110010000001011

          - FUNCTION OUTPUT:  11110001000100011110010000001011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101110111001100001100001110000

       - FUNCTION OUTPUT:          11110001000100011110010000001011

       - Left XOR FUNCTION OUTPUT: 10011111111101111111110001111011

       - Next Round Left 32 Bits:  11110100110101110011011000100001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011111111101111111110001111011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110100110101110011011000100001

       - Right 32 Bits:            10011111111101111111110001111011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11101100001000011111000111100101011000110011001011100100   [Subkey: 9]
          - Input Half:       10011111111101111111110001111011
          - S-Box Result:     00111011101111011011010111011000   [per every group of 4-bits]
          - Split Into Two:   0011101110111101 [L] 1011010111011000 [R]
          - Swap Halves:      10110101110110000011101110111101
          - Bit Inversion:    01001010001001111100010001000010
          - Compressed Key:   10010100110111010111110010101000   [done by compression P-Box]
          - XOR with Key:     11011110111110101011100011101010

          - FUNCTION OUTPUT:  11011110111110101011100011101010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110100110101110011011000100001

       - FUNCTION OUTPUT:          11011110111110101011100011101010

       - Left XOR FUNCTION OUTPUT: 00101010001011011000111011001011

       - Next Round Left 32 Bits:  10011111111101111111110001111011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101010001011011000111011001011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011111111101111111110001111011

       - Right 32 Bits:            00101010001011011000111011001011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001111011110000011100001101010011100110011010001101100   [Subkey: 8]
          - Input Half:       00101010001011011000111011001011
          - S-Box Result:     11100100111001100010110001011000   [per every group of 4-bits]
          - Split Into Two:   1110010011100110 [L] 0010110001011000 [R]
          - Swap Halves:      00101100010110001110010011100110
          - Bit Inversion:    11010011101001110001101100011001
          - Compressed Key:   10111101101110010011110001001100   [done by compression P-Box]
          - XOR with Key:     01101110000111100010011101010101

          - FUNCTION OUTPUT:  01101110000111100010011101010101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011111111101111111110001111011

       - FUNCTION OUTPUT:          01101110000111100010011101010101

       - Left XOR FUNCTION OUTPUT: 11110001111010011101101100101110

       - Next Round Left 32 Bits:  00101010001011011000111011001011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110001111010011101101100101110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101010001011011000111011001011

       - Right 32 Bits:            11110001111010011101101100101110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11000010000111110001111001010110001100110010111001001110   [Subkey: 7]
          - Input Half:       11110001111010011101101100101110
          - S-Box Result:     10111010110000110110100011101100   [per every group of 4-bits]
          - Split Into Two:   1011101011000011 [L] 0110100011101100 [R]
          - Swap Halves:      01101000111011001011101011000011
          - Bit Inversion:    10010111000100110100010100111100
          - Compressed Key:   00101011001110100010110011001101   [done by compression P-Box]
          - XOR with Key:     10111100001010010110100111110001

          - FUNCTION OUTPUT:  10111100001010010110100111110001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101010001011011000111011001011

       - FUNCTION OUTPUT:          10111100001010010110100111110001

       - Left XOR FUNCTION OUTPUT: 10010110000001001110011100111010

       - Next Round Left 32 Bits:  11110001111010011101101100101110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010110000001001110011100111010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110001111010011101101100101110

       - Right 32 Bits:            10010110000001001110011100111010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11110111100000111000011010100111001100110100011011000100   [Subkey: 6]
          - Input Half:       10010110000001001110011100111010
          - S-Box Result:     00110000111101111100110100010100   [per every group of 4-bits]
          - Split Into Two:   0011000011110111 [L] 1100110100010100 [R]
          - Swap Halves:      11001101000101000011000011110111
          - Bit Inversion:    00110010111010111100111100001000
          - Compressed Key:   01110000000001010110111011101000   [done by compression P-Box]
          - XOR with Key:     01000010111011101010000111100000

          - FUNCTION OUTPUT:  01000010111011101010000111100000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110001111010011101101100101110

       - FUNCTION OUTPUT:          01000010111011101010000111100000

       - Left XOR FUNCTION OUTPUT: 10110011000001110111101011001110

       - Next Round Left 32 Bits:  10010110000001001110011100111010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10110011000001110111101011001110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010110000001001110011100111010

       - Right 32 Bits:            10110011000001110111101011001110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100001111100011110010101100011001100101110010011101100   [Subkey: 5]
          - Input Half:       10110011000001110111101011001110
          - S-Box Result:     10000001111111011101010001011100   [per every group of 4-bits]
          - Split Into Two:   1000000111111101 [L] 1101010001011100 [R]
          - Swap Halves:      11010100010111001000000111111101
          - Bit Inversion:    00101011101000110111111000000010
          - Compressed Key:   00001100110010010110011101101100   [done by compression P-Box]
          - XOR with Key:     00100111011010100001100101101110

          - FUNCTION OUTPUT:  00100111011010100001100101101110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010110000001001110011100111010

       - FUNCTION OUTPUT:          00100111011010100001100101101110

       - Left XOR FUNCTION OUTPUT: 10110001011011101111111001010100

       - Next Round Left 32 Bits:  10110011000001110111101011001110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10110001011011101111111001010100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10110011000001110111101011001110

       - Right 32 Bits:            10110001011011101111111001010100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111000001110000110101001110011001101000110110001001111   [Subkey: 4]
          - Input Half:       10110001011011101111111001010100
          - S-Box Result:     10001010000011001011110010010111   [per every group of 4-bits]
          - Split Into Two:   1000101000001100 [L] 1011110010010111 [R]
          - Swap Halves:      10111100100101111000101000001100
          - Bit Inversion:    01000011011010000111010111110011
          - Compressed Key:   11001101111010110110001001001111   [done by compression P-Box]
          - XOR with Key:     10001110100000110001011110111100

          - FUNCTION OUTPUT:  10001110100000110001011110111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10110011000001110111101011001110

       - FUNCTION OUTPUT:          10001110100000110001011110111100

       - Left XOR FUNCTION OUTPUT: 00111101100001000110110101110010

       - Next Round Left 32 Bits:  10110001011011101111111001010100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111101100001000110110101110010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10110001011011101111111001010100

       - Right 32 Bits:            00111101100001000110110101110010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00011111000111100101011000110011001011100100111011000010   [Subkey: 3]
          - Input Half:       00111101100001000110110101110010
          - S-Box Result:     00010110001001110000011011011110   [per every group of 4-bits]
          - Split Into Two:   0001011000100111 [L] 0000011011011110 [R]
          - Swap Halves:      00000110110111100001011000100111
          - Bit Inversion:    11111001001000011110100111011000
          - Compressed Key:   11111011010100110110011011100001   [done by compression P-Box]
          - XOR with Key:     00000010011100101000111100111001

          - FUNCTION OUTPUT:  00000010011100101000111100111001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10110001011011101111111001010100

       - FUNCTION OUTPUT:          00000010011100101000111100111001

       - Left XOR FUNCTION OUTPUT: 10110011000111000111000101101101

       - Next Round Left 32 Bits:  00111101100001000110110101110010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10110011000111000111000101101101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111101100001000110110101110010

       - Right 32 Bits:            10110011000111000111000101101101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10000011100001101010011100110011010001101100010011110111   [Subkey: 2]
          - Input Half:       10110011000111000111000101101101
          - S-Box Result:     10000001101001011101101000000110   [per every group of 4-bits]
          - Split Into Two:   1000000110100101 [L] 1101101000000110 [R]
          - Swap Halves:      11011010000001101000000110100101
          - Bit Inversion:    00100101111110010111111001011010
          - Compressed Key:   00100010100000110101011101101011   [done by compression P-Box]
          - XOR with Key:     00000111011110100010100100110001

          - FUNCTION OUTPUT:  00000111011110100010100100110001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111101100001000110110101110010

       - FUNCTION OUTPUT:          00000111011110100010100100110001

       - Left XOR FUNCTION OUTPUT: 00111010111111100100010001000011

       - Next Round Left 32 Bits:  10110011000111000111000101101101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111010111111100100010001000011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10110011000111000111000101101101

       - Right 32 Bits:            00111010111111100100010001000011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11110001111001010110001100110010111001001110110000100001   [Subkey: 1]
          - Input Half:       00111010111111100100010001000011
          - S-Box Result:     00010100101111000111011101110001   [per every group of 4-bits]
          - Split Into Two:   0001010010111100 [L] 0111011101110001 [R]
          - Swap Halves:      01110111011100010001010010111100
          - Bit Inversion:    10001000100011101110101101000011
          - Compressed Key:   01000110110000111011001101000010   [done by compression P-Box]
          - XOR with Key:     11001110010011010101100000000001

          - FUNCTION OUTPUT:  11001110010011010101100000000001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10110011000111000111000101101101

       - FUNCTION OUTPUT:          11001110010011010101100000000001

       - Left XOR FUNCTION OUTPUT: 01111101010100010010100101101100

       - Next Round Left 32 Bits:  00111010111111100100010001000011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01111101010100010010100101101100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0111110101010001001010010110110000111010111111100100010001000011

 > Decrypted Block:     0111110101010001001010010110110000111010111111100100010001000011


!!!CBC: Previous Ciphertext:                             0100011101100001000111110100001000001110110001100111110101100011

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    0011101000110000001101100010111000110100001110000011100100100000

 > Final Processed Block:                                0011101000110000001101100010111000110100001110000011100100100000


FINAL PROCESSED DATA BLOCKS: 0011001000110000001100010011010100101111001100000011010100101111,0011000100111001001000000011000100110110001110100011000100110011,0011101000110000001101100010111000110100001110000011100100100000,

BLOCKS IN ASCII:             2015/05/19 16:13:06.489 

