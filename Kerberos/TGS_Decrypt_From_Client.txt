Triple DES Capture

168-bit key: kyElQnieniLUdzDyGXOZc

3 x 56-bit DES keys: kyElQni, eniLUdz, DyGXOZc

Initialization Vector: TteHJeTI

=========================================================================================================================
STAGE 1: DES [DECRYPT] ==================================================================================================
=========================================================================================================================

56-bit key: DyGXOZc
In Binary:  01000100011110010100011101011000010011110101101001100011

Subkeys:    Key i = Key (i - 1) [Shifted left by 3 and then inverted]

Subkey 1  : 11011100001101011100010100111101100001010010110011100101
Subkey 2  : 00011110010100011101011000010011110101101001100011010001
Subkey 3  : 00001101011100010100111101100001010010110011100101110111
Subkey 4  : 10010100011101011000010011110101101001100011010001000111
Subkey 5  : 01011100010100111101100001010010110011100101110111000011
Subkey 6  : 00011101011000010011110101101001100011010001000111100101
Subkey 7  : 00010100111101100001010010110011100101110111000011010111
Subkey 8  : 01011000010011110101101001100011010001000111100101000111
Subkey 9  : 00111101100001010010110011100101110111000011010111000101
Subkey 10 : 00010011110101101001100011010001000111100101000111010110
Subkey 11 : 01100001010010110011100101110111000011010111000101001111
Subkey 12 : 11110101101001100011010001000111100101000111010110000100
Subkey 13 : 01010010110011100101110111000011010111000101001111011000
Subkey 14 : 01101001100011010001000111100101000111010110000100111101
Subkey 15 : 10110011100101110111000011010111000101001111011000010100
Subkey 16 : 01100011010001000111100101000111010110000100111101011010

S-BOX (4x4):
INPUT | OUTPUT
------|-------
0000  | 1111
0001  | 1010
0010  | 1110
0011  | 0001
0100  | 0111
0101  | 1001
0110  | 0000
0111  | 1101
1000  | 0010
1001  | 0011
1010  | 0100
1011  | 1000
1100  | 0101
1101  | 0110
1110  | 1100
1111  | 1011

P-BOX (7 bits compressed to 4 bits)
Bit at Position X goes to Position Y
X: | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
Y: | 4 | 3 | 1 | 2 | 1 | 4 | 3 |


Data to decrypt         : ÷×v³ìñOIoÙ=?/Å¤?]¥æì[ ¸?

Data padded with spaces : ÷×v³ìñOIoÙ=?/Å¤?]¥æì[ ¸?[Padded with '0' spaces]

Data in ASCII           : 247,215,118,179,236,241,79,73,111,217,61,142,47,197,164,141,93,165,230,236,91,160,184,154,

Data in Binary          : 11110111,11010111,01110110,10110011,11101100,11110001,01001111,01001001,01101111,11011001,00111101,10001110,00101111,11000101,10100100,10001101,01011101,10100101,11100110,11101100,01011011,10100000,10111000,10011010,

Data in 64-bit Blocks   : 1111011111010111011101101011001111101100111100010100111101001001,0110111111011001001111011000111000101111110001011010010010001101,0101110110100101111001101110110001011011101000001011100010011010,

!!!!NOTE: Subkeys used in REVERSE order for DECRYPTION



<<<<<< PROCESSING IN 'CBC' MODE >>>>>>


!!!CBC: Initial Previous Ciphertext = IV:               (0101010001110100011001010100100001001010011001010101010001001001)

Ciphertext Block 1:                                      1111011111010111011101101011001111101100111100010100111101001001

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110111110101110111011010110011

       - Right 32 Bits:            11101100111100010100111101001001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100011010001000111100101000111010110000100111101011010   [Subkey: 16]
          - Input Half:       11101100111100010100111101001001
          - S-Box Result:     11000101101110100111101101110011   [per every group of 4-bits]
          - Split Into Two:   1100010110111010 [L] 0111101101110011 [R]
          - Swap Halves:      01111011011100111100010110111010
          - Bit Inversion:    10000100100011000011101001000101
          - Compressed Key:   00100010111110000101001011010101   [done by compression P-Box]
          - XOR with Key:     10100110011101000110100010010000

          - FUNCTION OUTPUT:  10100110011101000110100010010000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110111110101110111011010110011

       - FUNCTION OUTPUT:          10100110011101000110100010010000

       - Left XOR FUNCTION OUTPUT: 01010001101000110001111000100011

       - Next Round Left 32 Bits:  11101100111100010100111101001001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01010001101000110001111000100011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101100111100010100111101001001

       - Right 32 Bits:            01010001101000110001111000100011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10110011100101110111000011010111000101001111011000010100   [Subkey: 15]
          - Input Half:       01010001101000110001111000100011
          - S-Box Result:     10011010010000011010110011100001   [per every group of 4-bits]
          - Split Into Two:   1001101001000001 [L] 1010110011100001 [R]
          - Swap Halves:      10101100111000011001101001000001
          - Bit Inversion:    01010011000111100110010110111110
          - Compressed Key:   01101010110111100100001111001000   [done by compression P-Box]
          - XOR with Key:     00111001110000000010011001110110

          - FUNCTION OUTPUT:  00111001110000000010011001110110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101100111100010100111101001001

       - FUNCTION OUTPUT:          00111001110000000010011001110110

       - Left XOR FUNCTION OUTPUT: 11010101001100010110100100111111

       - Next Round Left 32 Bits:  01010001101000110001111000100011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010101001100010110100100111111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01010001101000110001111000100011

       - Right 32 Bits:            11010101001100010110100100111111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01101001100011010001000111100101000111010110000100111101   [Subkey: 14]
          - Input Half:       11010101001100010110100100111111
          - S-Box Result:     01101001000110100000001100011011   [per every group of 4-bits]
          - Split Into Two:   0110100100011010 [L] 0000001100011011 [R]
          - Swap Halves:      00000011000110110110100100011010
          - Bit Inversion:    11111100111001001001011011100101
          - Compressed Key:   10000011000111010100101000011110   [done by compression P-Box]
          - XOR with Key:     01111111111110011101110011111011

          - FUNCTION OUTPUT:  01111111111110011101110011111011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01010001101000110001111000100011

       - FUNCTION OUTPUT:          01111111111110011101110011111011

       - Left XOR FUNCTION OUTPUT: 00101110010110101100001011011000

       - Next Round Left 32 Bits:  11010101001100010110100100111111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101110010110101100001011011000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010101001100010110100100111111

       - Right 32 Bits:            00101110010110101100001011011000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010010110011100101110111000011010111000101001111011000   [Subkey: 13]
          - Input Half:       00101110010110101100001011011000
          - S-Box Result:     11101100100101000101111001100010   [per every group of 4-bits]
          - Split Into Two:   1110110010010100 [L] 0101111001100010 [R]
          - Swap Halves:      01011110011000101110110010010100
          - Bit Inversion:    10100001100111010001001101101011
          - Compressed Key:   01100011011111000101001010110100   [done by compression P-Box]
          - XOR with Key:     11000010111000010100000111011111

          - FUNCTION OUTPUT:  11000010111000010100000111011111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010101001100010110100100111111

       - FUNCTION OUTPUT:          11000010111000010100000111011111

       - Left XOR FUNCTION OUTPUT: 00010111110100000010100011100000

       - Next Round Left 32 Bits:  00101110010110101100001011011000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00010111110100000010100011100000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101110010110101100001011011000

       - Right 32 Bits:            00010111110100000010100011100000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11110101101001100011010001000111100101000111010110000100   [Subkey: 12]
          - Input Half:       00010111110100000010100011100000
          - S-Box Result:     10101101011011111110001011001111   [per every group of 4-bits]
          - Split Into Two:   1010110101101111 [L] 1110001011001111 [R]
          - Swap Halves:      11100010110011111010110101101111
          - Bit Inversion:    00011101001100000101001010010000
          - Compressed Key:   01010110100110001100001001111000   [done by compression P-Box]
          - XOR with Key:     01001011101010001001000011101000

          - FUNCTION OUTPUT:  01001011101010001001000011101000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101110010110101100001011011000

       - FUNCTION OUTPUT:          01001011101010001001000011101000

       - Left XOR FUNCTION OUTPUT: 01100101111100100101001000110000

       - Next Round Left 32 Bits:  00010111110100000010100011100000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01100101111100100101001000110000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00010111110100000010100011100000

       - Right 32 Bits:            01100101111100100101001000110000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100001010010110011100101110111000011010111000101001111   [Subkey: 11]
          - Input Half:       01100101111100100101001000110000
          - S-Box Result:     00001001101111101001111000011111   [per every group of 4-bits]
          - Split Into Two:   0000100110111110 [L] 1001111000011111 [R]
          - Swap Halves:      10011110000111110000100110111110
          - Bit Inversion:    01100001111000001111011001000001
          - Compressed Key:   00000001101110110100101000011111   [done by compression P-Box]
          - XOR with Key:     01100000010110111011110001011110

          - FUNCTION OUTPUT:  01100000010110111011110001011110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00010111110100000010100011100000

       - FUNCTION OUTPUT:          01100000010110111011110001011110

       - Left XOR FUNCTION OUTPUT: 01110111100010111001010010111110

       - Next Round Left 32 Bits:  01100101111100100101001000110000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110111100010111001010010111110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01100101111100100101001000110000

       - Right 32 Bits:            01110111100010111001010010111110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010011110101101001100011010001000111100101000111010110   [Subkey: 10]
          - Input Half:       01110111100010111001010010111110
          - S-Box Result:     11011101001010000011011110001100   [per every group of 4-bits]
          - Split Into Two:   1101110100101000 [L] 0011011110001100 [R]
          - Swap Halves:      00110111100011001101110100101000
          - Bit Inversion:    11001000011100110010001011010111
          - Compressed Key:   01101010001111100100011000111001   [done by compression P-Box]
          - XOR with Key:     10100010010011010110010011101110

          - FUNCTION OUTPUT:  10100010010011010110010011101110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01100101111100100101001000110000

       - FUNCTION OUTPUT:          10100010010011010110010011101110

       - Left XOR FUNCTION OUTPUT: 11000111101111110011011011011110

       - Next Round Left 32 Bits:  01110111100010111001010010111110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000111101111110011011011011110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110111100010111001010010111110

       - Right 32 Bits:            11000111101111110011011011011110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00111101100001010010110011100101110111000011010111000101   [Subkey: 9]
          - Input Half:       11000111101111110011011011011110
          - S-Box Result:     01011101100010110001000001101100   [per every group of 4-bits]
          - Split Into Two:   0101110110001011 [L] 0001000001101100 [R]
          - Swap Halves:      00010000011011000101110110001011
          - Bit Inversion:    11101111100100111010001001110100
          - Compressed Key:   11010010101011011101000001111010   [done by compression P-Box]
          - XOR with Key:     00111101001111100111001000001110

          - FUNCTION OUTPUT:  00111101001111100111001000001110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110111100010111001010010111110

       - FUNCTION OUTPUT:          00111101001111100111001000001110

       - Left XOR FUNCTION OUTPUT: 01001010101101011110011010110000

       - Next Round Left 32 Bits:  11000111101111110011011011011110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001010101101011110011010110000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000111101111110011011011011110

       - Right 32 Bits:            01001010101101011110011010110000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011000010011110101101001100011010001000111100101000111   [Subkey: 8]
          - Input Half:       01001010101101011110011010110000
          - S-Box Result:     01110100100010011100000010001111   [per every group of 4-bits]
          - Split Into Two:   0111010010001001 [L] 1100000010001111 [R]
          - Swap Halves:      11000000100011110111010010001001
          - Bit Inversion:    00111111011100001000101101110110
          - Compressed Key:   11000011011110010101001000011011   [done by compression P-Box]
          - XOR with Key:     11111100000010011101100101101101

          - FUNCTION OUTPUT:  11111100000010011101100101101101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000111101111110011011011011110

       - FUNCTION OUTPUT:          11111100000010011101100101101101

       - Left XOR FUNCTION OUTPUT: 00111011101101101110111110110011

       - Next Round Left 32 Bits:  01001010101101011110011010110000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111011101101101110111110110011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001010101101011110011010110000

       - Right 32 Bits:            00111011101101101110111110110011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010100111101100001010010110011100101110111000011010111   [Subkey: 7]
          - Input Half:       00111011101101101110111110110011
          - S-Box Result:     00011000100000001100101110000001   [per every group of 4-bits]
          - Split Into Two:   0001100010000000 [L] 1100101110000001 [R]
          - Swap Halves:      11001011100000010001100010000000
          - Bit Inversion:    00110100011111101110011101111111
          - Compressed Key:   01011110000101111100111000101011   [done by compression P-Box]
          - XOR with Key:     01101010011010010010100101010100

          - FUNCTION OUTPUT:  01101010011010010010100101010100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001010101101011110011010110000

       - FUNCTION OUTPUT:          01101010011010010010100101010100

       - Left XOR FUNCTION OUTPUT: 00100000110111001100111111100100

       - Next Round Left 32 Bits:  00111011101101101110111110110011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00100000110111001100111111100100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111011101101101110111110110011

       - Right 32 Bits:            00100000110111001100111111100100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00011101011000010011110101101001100011010001000111100101   [Subkey: 6]
          - Input Half:       00100000110111001100111111100100
          - S-Box Result:     11101111011001010101101111000111   [per every group of 4-bits]
          - Split Into Two:   1110111101100101 [L] 0101101111000111 [R]
          - Swap Halves:      01011011110001111110111101100101
          - Bit Inversion:    10100100001110000001000010011010
          - Compressed Key:   11010100101110011100100000111010   [done by compression P-Box]
          - XOR with Key:     01110000100000011101100010100000

          - FUNCTION OUTPUT:  01110000100000011101100010100000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111011101101101110111110110011

       - FUNCTION OUTPUT:          01110000100000011101100010100000

       - Left XOR FUNCTION OUTPUT: 01001011001101110011011100010011

       - Next Round Left 32 Bits:  00100000110111001100111111100100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001011001101110011011100010011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00100000110111001100111111100100

       - Right 32 Bits:            01001011001101110011011100010011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011100010100111101100001010010110011100101110111000011   [Subkey: 5]
          - Input Half:       01001011001101110011011100010011
          - S-Box Result:     01111000000111010001110110100001   [per every group of 4-bits]
          - Split Into Two:   0111100000011101 [L] 0001110110100001 [R]
          - Swap Halves:      00011101101000010111100000011101
          - Bit Inversion:    11100010010111101000011111100010
          - Compressed Key:   11011000011110101001011001110011   [done by compression P-Box]
          - XOR with Key:     00111010001001000001000110010001

          - FUNCTION OUTPUT:  00111010001001000001000110010001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00100000110111001100111111100100

       - FUNCTION OUTPUT:          00111010001001000001000110010001

       - Left XOR FUNCTION OUTPUT: 00011010111110001101111001110101

       - Next Round Left 32 Bits:  01001011001101110011011100010011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011010111110001101111001110101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001011001101110011011100010011

       - Right 32 Bits:            00011010111110001101111001110101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100011101011000010011110101101001100011010001000111   [Subkey: 4]
          - Input Half:       00011010111110001101111001110101
          - S-Box Result:     10100100101100100110110011011001   [per every group of 4-bits]
          - Split Into Two:   1010010010110010 [L] 0110110011011001 [R]
          - Swap Halves:      01101100110110011010010010110010
          - Bit Inversion:    10010011001001100101101101001101
          - Compressed Key:   01011110000011111110010001001011   [done by compression P-Box]
          - XOR with Key:     11001101001010011011111100000110

          - FUNCTION OUTPUT:  11001101001010011011111100000110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001011001101110011011100010011

       - FUNCTION OUTPUT:          11001101001010011011111100000110

       - Left XOR FUNCTION OUTPUT: 10000110000111101000100000010101

       - Next Round Left 32 Bits:  00011010111110001101111001110101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10000110000111101000100000010101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00011010111110001101111001110101

       - Right 32 Bits:            10000110000111101000100000010101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00001101011100010100111101100001010010110011100101110111   [Subkey: 3]
          - Input Half:       10000110000111101000100000010101
          - S-Box Result:     00100000101011000010001010101001   [per every group of 4-bits]
          - Split Into Two:   0010000010101100 [L] 0010001010101001 [R]
          - Swap Halves:      00100010101010010010000010101100
          - Bit Inversion:    11011101010101101101111101010011
          - Compressed Key:   10011100011010010101110000011011   [done by compression P-Box]
          - XOR with Key:     01000001001111111000001101001000

          - FUNCTION OUTPUT:  01000001001111111000001101001000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00011010111110001101111001110101

       - FUNCTION OUTPUT:          01000001001111111000001101001000

       - Left XOR FUNCTION OUTPUT: 01011011110001110101110100111101

       - Next Round Left 32 Bits:  10000110000111101000100000010101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011011110001110101110100111101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10000110000111101000100000010101

       - Right 32 Bits:            01011011110001110101110100111101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00011110010100011101011000010011110101101001100011010001   [Subkey: 2]
          - Input Half:       01011011110001110101110100111101
          - S-Box Result:     10011000010111011001011000010110   [per every group of 4-bits]
          - Split Into Two:   1001100001011101 [L] 1001011000010110 [R]
          - Swap Halves:      10010110000101101001100001011101
          - Bit Inversion:    01101001111010010110011110100010
          - Compressed Key:   11111000010100101101010100100010   [done by compression P-Box]
          - XOR with Key:     10010001101110111011001010000000

          - FUNCTION OUTPUT:  10010001101110111011001010000000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10000110000111101000100000010101

       - FUNCTION OUTPUT:          10010001101110111011001010000000

       - Left XOR FUNCTION OUTPUT: 00010111101001010011101010010101

       - Next Round Left 32 Bits:  01011011110001110101110100111101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00010111101001010011101010010101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011011110001110101110100111101

       - Right 32 Bits:            00010111101001010011101010010101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011100001101011100010100111101100001010010110011100101   [Subkey: 1]
          - Input Half:       00010111101001010011101010010101
          - S-Box Result:     10101101010010010001010000111001   [per every group of 4-bits]
          - Split Into Two:   1010110101001001 [L] 0001010000111001 [R]
          - Swap Halves:      00010100001110011010110101001001
          - Bit Inversion:    11101011110001100101001010110110
          - Compressed Key:   11011110010000111100100001101010   [done by compression P-Box]
          - XOR with Key:     00110101100001011001101011011100

          - FUNCTION OUTPUT:  00110101100001011001101011011100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011011110001110101110100111101

       - FUNCTION OUTPUT:          00110101100001011001101011011100

       - Left XOR FUNCTION OUTPUT: 01101110010000101100011111100001

       - Next Round Left 32 Bits:  00010111101001010011101010010101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101110010000101100011111100001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0110111001000010110001111110000100010111101001010011101010010101

 > Decrypted Block:     0110111001000010110001111110000100010111101001010011101010010101


!!!CBC: Previous Ciphertext:                             0101010001110100011001010100100001001010011001010101010001001001

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    0011101000110110101000101010100101011101110000000110111011011100

 > Final Processed Block:                                0011101000110110101000101010100101011101110000000110111011011100



Ciphertext Block 2:                                      0110111111011001001111011000111000101111110001011010010010001101

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101111110110010011110110001110

       - Right 32 Bits:            00101111110001011010010010001101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100011010001000111100101000111010110000100111101011010   [Subkey: 16]
          - Input Half:       00101111110001011010010010001101
          - S-Box Result:     11101011010110010100011100100110   [per every group of 4-bits]
          - Split Into Two:   1110101101011001 [L] 0100011100100110 [R]
          - Swap Halves:      01000111001001101110101101011001
          - Bit Inversion:    10111000110110010001010010100110
          - Compressed Key:   00100010111110000101001011010101   [done by compression P-Box]
          - XOR with Key:     10011010001000010100011001110011

          - FUNCTION OUTPUT:  10011010001000010100011001110011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101111110110010011110110001110

       - FUNCTION OUTPUT:          10011010001000010100011001110011

       - Left XOR FUNCTION OUTPUT: 11110101111110000111101111111101

       - Next Round Left 32 Bits:  00101111110001011010010010001101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110101111110000111101111111101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101111110001011010010010001101

       - Right 32 Bits:            11110101111110000111101111111101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10110011100101110111000011010111000101001111011000010100   [Subkey: 15]
          - Input Half:       11110101111110000111101111111101
          - S-Box Result:     10111001101100101101100010110110   [per every group of 4-bits]
          - Split Into Two:   1011100110110010 [L] 1101100010110110 [R]
          - Swap Halves:      11011000101101101011100110110010
          - Bit Inversion:    00100111010010010100011001001101
          - Compressed Key:   01101010110111100100001111001000   [done by compression P-Box]
          - XOR with Key:     01001101100101110000010110000101

          - FUNCTION OUTPUT:  01001101100101110000010110000101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101111110001011010010010001101

       - FUNCTION OUTPUT:          01001101100101110000010110000101

       - Left XOR FUNCTION OUTPUT: 01100010010100101010000100001000

       - Next Round Left 32 Bits:  11110101111110000111101111111101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01100010010100101010000100001000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110101111110000111101111111101

       - Right 32 Bits:            01100010010100101010000100001000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01101001100011010001000111100101000111010110000100111101   [Subkey: 14]
          - Input Half:       01100010010100101010000100001000
          - S-Box Result:     00001110100111100100101011110010   [per every group of 4-bits]
          - Split Into Two:   0000111010011110 [L] 0100101011110010 [R]
          - Swap Halves:      01001010111100100000111010011110
          - Bit Inversion:    10110101000011011111000101100001
          - Compressed Key:   10000011000111010100101000011110   [done by compression P-Box]
          - XOR with Key:     00110110000100001011101101111111

          - FUNCTION OUTPUT:  00110110000100001011101101111111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110101111110000111101111111101

       - FUNCTION OUTPUT:          00110110000100001011101101111111

       - Left XOR FUNCTION OUTPUT: 11000011111010001100000010000010

       - Next Round Left 32 Bits:  01100010010100101010000100001000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000011111010001100000010000010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01100010010100101010000100001000

       - Right 32 Bits:            11000011111010001100000010000010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010010110011100101110111000011010111000101001111011000   [Subkey: 13]
          - Input Half:       11000011111010001100000010000010
          - S-Box Result:     01010001110000100101111100101110   [per every group of 4-bits]
          - Split Into Two:   0101000111000010 [L] 0101111100101110 [R]
          - Swap Halves:      01011111001011100101000111000010
          - Bit Inversion:    10100000110100011010111000111101
          - Compressed Key:   01100011011111000101001010110100   [done by compression P-Box]
          - XOR with Key:     11000011101011011111110010001001

          - FUNCTION OUTPUT:  11000011101011011111110010001001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01100010010100101010000100001000

       - FUNCTION OUTPUT:          11000011101011011111110010001001

       - Left XOR FUNCTION OUTPUT: 10100001111111110101110110000001

       - Next Round Left 32 Bits:  11000011111010001100000010000010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10100001111111110101110110000001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000011111010001100000010000010

       - Right 32 Bits:            10100001111111110101110110000001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11110101101001100011010001000111100101000111010110000100   [Subkey: 12]
          - Input Half:       10100001111111110101110110000001
          - S-Box Result:     01001010101110111001011000101010   [per every group of 4-bits]
          - Split Into Two:   0100101010111011 [L] 1001011000101010 [R]
          - Swap Halves:      10010110001010100100101010111011
          - Bit Inversion:    01101001110101011011010101000100
          - Compressed Key:   01010110100110001100001001111000   [done by compression P-Box]
          - XOR with Key:     00111111010011010111011100111100

          - FUNCTION OUTPUT:  00111111010011010111011100111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000011111010001100000010000010

       - FUNCTION OUTPUT:          00111111010011010111011100111100

       - Left XOR FUNCTION OUTPUT: 11111100101001011011011110111110

       - Next Round Left 32 Bits:  10100001111111110101110110000001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111100101001011011011110111110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10100001111111110101110110000001

       - Right 32 Bits:            11111100101001011011011110111110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100001010010110011100101110111000011010111000101001111   [Subkey: 11]
          - Input Half:       11111100101001011011011110111110
          - S-Box Result:     10110101010010011000110110001100   [per every group of 4-bits]
          - Split Into Two:   1011010101001001 [L] 1000110110001100 [R]
          - Swap Halves:      10001101100011001011010101001001
          - Bit Inversion:    01110010011100110100101010110110
          - Compressed Key:   00000001101110110100101000011111   [done by compression P-Box]
          - XOR with Key:     01110011110010000000000010101001

          - FUNCTION OUTPUT:  01110011110010000000000010101001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10100001111111110101110110000001

       - FUNCTION OUTPUT:          01110011110010000000000010101001

       - Left XOR FUNCTION OUTPUT: 11010010001101110101110100101000

       - Next Round Left 32 Bits:  11111100101001011011011110111110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010010001101110101110100101000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111100101001011011011110111110

       - Right 32 Bits:            11010010001101110101110100101000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010011110101101001100011010001000111100101000111010110   [Subkey: 10]
          - Input Half:       11010010001101110101110100101000
          - S-Box Result:     01101110000111011001011011100010   [per every group of 4-bits]
          - Split Into Two:   0110111000011101 [L] 1001011011100010 [R]
          - Swap Halves:      10010110111000100110111000011101
          - Bit Inversion:    01101001000111011001000111100010
          - Compressed Key:   01101010001111100100011000111001   [done by compression P-Box]
          - XOR with Key:     00000011001000111101011111011011

          - FUNCTION OUTPUT:  00000011001000111101011111011011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111100101001011011011110111110

       - FUNCTION OUTPUT:          00000011001000111101011111011011

       - Left XOR FUNCTION OUTPUT: 11111111100001100110000001100101

       - Next Round Left 32 Bits:  11010010001101110101110100101000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111111100001100110000001100101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010010001101110101110100101000

       - Right 32 Bits:            11111111100001100110000001100101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00111101100001010010110011100101110111000011010111000101   [Subkey: 9]
          - Input Half:       11111111100001100110000001100101
          - S-Box Result:     10111011001000000000111100001001   [per every group of 4-bits]
          - Split Into Two:   1011101100100000 [L] 0000111100001001 [R]
          - Swap Halves:      00001111000010011011101100100000
          - Bit Inversion:    11110000111101100100010011011111
          - Compressed Key:   11010010101011011101000001111010   [done by compression P-Box]
          - XOR with Key:     00100010010110111001010010100101

          - FUNCTION OUTPUT:  00100010010110111001010010100101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010010001101110101110100101000

       - FUNCTION OUTPUT:          00100010010110111001010010100101

       - Left XOR FUNCTION OUTPUT: 11110000011011001100100110001101

       - Next Round Left 32 Bits:  11111111100001100110000001100101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110000011011001100100110001101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111111100001100110000001100101

       - Right 32 Bits:            11110000011011001100100110001101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011000010011110101101001100011010001000111100101000111   [Subkey: 8]
          - Input Half:       11110000011011001100100110001101
          - S-Box Result:     10111111000001010101001100100110   [per every group of 4-bits]
          - Split Into Two:   1011111100000101 [L] 0101001100100110 [R]
          - Swap Halves:      01010011001001101011111100000101
          - Bit Inversion:    10101100110110010100000011111010
          - Compressed Key:   11000011011110010101001000011011   [done by compression P-Box]
          - XOR with Key:     01101111101000000001001011100001

          - FUNCTION OUTPUT:  01101111101000000001001011100001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111111100001100110000001100101

       - FUNCTION OUTPUT:          01101111101000000001001011100001

       - Left XOR FUNCTION OUTPUT: 10010000001001100111001010000100

       - Next Round Left 32 Bits:  11110000011011001100100110001101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010000001001100111001010000100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110000011011001100100110001101

       - Right 32 Bits:            10010000001001100111001010000100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010100111101100001010010110011100101110111000011010111   [Subkey: 7]
          - Input Half:       10010000001001100111001010000100
          - S-Box Result:     00111111111000001101111000100111   [per every group of 4-bits]
          - Split Into Two:   0011111111100000 [L] 1101111000100111 [R]
          - Swap Halves:      11011110001001110011111111100000
          - Bit Inversion:    00100001110110001100000000011111
          - Compressed Key:   01011110000101111100111000101011   [done by compression P-Box]
          - XOR with Key:     01111111110011110000111000110100

          - FUNCTION OUTPUT:  01111111110011110000111000110100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110000011011001100100110001101

       - FUNCTION OUTPUT:          01111111110011110000111000110100

       - Left XOR FUNCTION OUTPUT: 10001111101000111100011110111001

       - Next Round Left 32 Bits:  10010000001001100111001010000100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001111101000111100011110111001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010000001001100111001010000100

       - Right 32 Bits:            10001111101000111100011110111001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00011101011000010011110101101001100011010001000111100101   [Subkey: 6]
          - Input Half:       10001111101000111100011110111001
          - S-Box Result:     00101011010000010101110110000011   [per every group of 4-bits]
          - Split Into Two:   0010101101000001 [L] 0101110110000011 [R]
          - Swap Halves:      01011101100000110010101101000001
          - Bit Inversion:    10100010011111001101010010111110
          - Compressed Key:   11010100101110011100100000111010   [done by compression P-Box]
          - XOR with Key:     01110110110001010001110010000100

          - FUNCTION OUTPUT:  01110110110001010001110010000100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010000001001100111001010000100

       - FUNCTION OUTPUT:          01110110110001010001110010000100

       - Left XOR FUNCTION OUTPUT: 11100110111000110110111000000000

       - Next Round Left 32 Bits:  10001111101000111100011110111001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100110111000110110111000000000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001111101000111100011110111001

       - Right 32 Bits:            11100110111000110110111000000000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011100010100111101100001010010110011100101110111000011   [Subkey: 5]
          - Input Half:       11100110111000110110111000000000
          - S-Box Result:     11000000110000010000110011111111   [per every group of 4-bits]
          - Split Into Two:   1100000011000001 [L] 0000110011111111 [R]
          - Swap Halves:      00001100111111111100000011000001
          - Bit Inversion:    11110011000000000011111100111110
          - Compressed Key:   11011000011110101001011001110011   [done by compression P-Box]
          - XOR with Key:     00101011011110101010100101001101

          - FUNCTION OUTPUT:  00101011011110101010100101001101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001111101000111100011110111001

       - FUNCTION OUTPUT:          00101011011110101010100101001101

       - Left XOR FUNCTION OUTPUT: 10100100110110010110111011110100

       - Next Round Left 32 Bits:  11100110111000110110111000000000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10100100110110010110111011110100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100110111000110110111000000000

       - Right 32 Bits:            10100100110110010110111011110100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100011101011000010011110101101001100011010001000111   [Subkey: 4]
          - Input Half:       10100100110110010110111011110100
          - S-Box Result:     01000111011000110000110010110111   [per every group of 4-bits]
          - Split Into Two:   0100011101100011 [L] 0000110010110111 [R]
          - Swap Halves:      00001100101101110100011101100011
          - Bit Inversion:    11110011010010001011100010011100
          - Compressed Key:   01011110000011111110010001001011   [done by compression P-Box]
          - XOR with Key:     10101101010001110101110011010111

          - FUNCTION OUTPUT:  10101101010001110101110011010111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100110111000110110111000000000

       - FUNCTION OUTPUT:          10101101010001110101110011010111

       - Left XOR FUNCTION OUTPUT: 01001011101001000011001011010111

       - Next Round Left 32 Bits:  10100100110110010110111011110100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001011101001000011001011010111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10100100110110010110111011110100

       - Right 32 Bits:            01001011101001000011001011010111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00001101011100010100111101100001010010110011100101110111   [Subkey: 3]
          - Input Half:       01001011101001000011001011010111
          - S-Box Result:     01111000010001110001111001101101   [per every group of 4-bits]
          - Split Into Two:   0111100001000111 [L] 0001111001101101 [R]
          - Swap Halves:      00011110011011010111100001000111
          - Bit Inversion:    11100001100100101000011110111000
          - Compressed Key:   10011100011010010101110000011011   [done by compression P-Box]
          - XOR with Key:     01111101111110111101101110100011

          - FUNCTION OUTPUT:  01111101111110111101101110100011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10100100110110010110111011110100

       - FUNCTION OUTPUT:          01111101111110111101101110100011

       - Left XOR FUNCTION OUTPUT: 11011001001000101011010101010111

       - Next Round Left 32 Bits:  01001011101001000011001011010111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11011001001000101011010101010111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001011101001000011001011010111

       - Right 32 Bits:            11011001001000101011010101010111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00011110010100011101011000010011110101101001100011010001   [Subkey: 2]
          - Input Half:       11011001001000101011010101010111
          - S-Box Result:     01100011111011101000100110011101   [per every group of 4-bits]
          - Split Into Two:   0110001111101110 [L] 1000100110011101 [R]
          - Swap Halves:      10001001100111010110001111101110
          - Bit Inversion:    01110110011000101001110000010001
          - Compressed Key:   11111000010100101101010100100010   [done by compression P-Box]
          - XOR with Key:     10001110001100000100100100110011

          - FUNCTION OUTPUT:  10001110001100000100100100110011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001011101001000011001011010111

       - FUNCTION OUTPUT:          10001110001100000100100100110011

       - Left XOR FUNCTION OUTPUT: 11000101100101000111101111100100

       - Next Round Left 32 Bits:  11011001001000101011010101010111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000101100101000111101111100100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11011001001000101011010101010111

       - Right 32 Bits:            11000101100101000111101111100100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011100001101011100010100111101100001010010110011100101   [Subkey: 1]
          - Input Half:       11000101100101000111101111100100
          - S-Box Result:     01011001001101111101100011000111   [per every group of 4-bits]
          - Split Into Two:   0101100100110111 [L] 1101100011000111 [R]
          - Swap Halves:      11011000110001110101100100110111
          - Bit Inversion:    00100111001110001010011011001000
          - Compressed Key:   11011110010000111100100001101010   [done by compression P-Box]
          - XOR with Key:     11111001011110110110111010100010

          - FUNCTION OUTPUT:  11111001011110110110111010100010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11011001001000101011010101010111

       - FUNCTION OUTPUT:          11111001011110110110111010100010

       - Left XOR FUNCTION OUTPUT: 00100000010110011101101111110101

       - Next Round Left 32 Bits:  11000101100101000111101111100100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00100000010110011101101111110101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0010000001011001110110111111010111000101100101000111101111100100

 > Decrypted Block:     0010000001011001110110111111010111000101100101000111101111100100


!!!CBC: Previous Ciphertext:                             1111011111010111011101101011001111101100111100010100111101001001

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    1101011110001110101011010100011000101001011001010011010010101101

 > Final Processed Block:                                1101011110001110101011010100011000101001011001010011010010101101



Ciphertext Block 3:                                      0101110110100101111001101110110001011011101000001011100010011010

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011101101001011110011011101100

       - Right 32 Bits:            01011011101000001011100010011010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100011010001000111100101000111010110000100111101011010   [Subkey: 16]
          - Input Half:       01011011101000001011100010011010
          - S-Box Result:     10011000010011111000001000110100   [per every group of 4-bits]
          - Split Into Two:   1001100001001111 [L] 1000001000110100 [R]
          - Swap Halves:      10000010001101001001100001001111
          - Bit Inversion:    01111101110010110110011110110000
          - Compressed Key:   00100010111110000101001011010101   [done by compression P-Box]
          - XOR with Key:     01011111001100110011010101100101

          - FUNCTION OUTPUT:  01011111001100110011010101100101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011101101001011110011011101100

       - FUNCTION OUTPUT:          01011111001100110011010101100101

       - Left XOR FUNCTION OUTPUT: 00000010100101101101001110001001

       - Next Round Left 32 Bits:  01011011101000001011100010011010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00000010100101101101001110001001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011011101000001011100010011010

       - Right 32 Bits:            00000010100101101101001110001001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10110011100101110111000011010111000101001111011000010100   [Subkey: 15]
          - Input Half:       00000010100101101101001110001001
          - S-Box Result:     11111110001100000110000100100011   [per every group of 4-bits]
          - Split Into Two:   1111111000110000 [L] 0110000100100011 [R]
          - Swap Halves:      01100001001000111111111000110000
          - Bit Inversion:    10011110110111000000000111001111
          - Compressed Key:   01101010110111100100001111001000   [done by compression P-Box]
          - XOR with Key:     11110100000000100100001000000111

          - FUNCTION OUTPUT:  11110100000000100100001000000111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011011101000001011100010011010

       - FUNCTION OUTPUT:          11110100000000100100001000000111

       - Left XOR FUNCTION OUTPUT: 10101111101000101111101010011101

       - Next Round Left 32 Bits:  00000010100101101101001110001001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10101111101000101111101010011101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00000010100101101101001110001001

       - Right 32 Bits:            10101111101000101111101010011101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01101001100011010001000111100101000111010110000100111101   [Subkey: 14]
          - Input Half:       10101111101000101111101010011101
          - S-Box Result:     01001011010011101011010000110110   [per every group of 4-bits]
          - Split Into Two:   0100101101001110 [L] 1011010000110110 [R]
          - Swap Halves:      10110100001101100100101101001110
          - Bit Inversion:    01001011110010011011010010110001
          - Compressed Key:   10000011000111010100101000011110   [done by compression P-Box]
          - XOR with Key:     11001000110101001111111010101111

          - FUNCTION OUTPUT:  11001000110101001111111010101111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00000010100101101101001110001001

       - FUNCTION OUTPUT:          11001000110101001111111010101111

       - Left XOR FUNCTION OUTPUT: 11001010010000100010110100100110

       - Next Round Left 32 Bits:  10101111101000101111101010011101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001010010000100010110100100110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10101111101000101111101010011101

       - Right 32 Bits:            11001010010000100010110100100110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010010110011100101110111000011010111000101001111011000   [Subkey: 13]
          - Input Half:       11001010010000100010110100100110
          - S-Box Result:     01010100011111101110011011100000   [per every group of 4-bits]
          - Split Into Two:   0101010001111110 [L] 1110011011100000 [R]
          - Swap Halves:      11100110111000000101010001111110
          - Bit Inversion:    00011001000111111010101110000001
          - Compressed Key:   01100011011111000101001010110100   [done by compression P-Box]
          - XOR with Key:     01111010011000111111100100110101

          - FUNCTION OUTPUT:  01111010011000111111100100110101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10101111101000101111101010011101

       - FUNCTION OUTPUT:          01111010011000111111100100110101

       - Left XOR FUNCTION OUTPUT: 11010101110000010000001110101000

       - Next Round Left 32 Bits:  11001010010000100010110100100110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010101110000010000001110101000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11001010010000100010110100100110

       - Right 32 Bits:            11010101110000010000001110101000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11110101101001100011010001000111100101000111010110000100   [Subkey: 12]
          - Input Half:       11010101110000010000001110101000
          - S-Box Result:     01101001010110101111000101000010   [per every group of 4-bits]
          - Split Into Two:   0110100101011010 [L] 1111000101000010 [R]
          - Swap Halves:      11110001010000100110100101011010
          - Bit Inversion:    00001110101111011001011010100101
          - Compressed Key:   01010110100110001100001001111000   [done by compression P-Box]
          - XOR with Key:     01011000001001010101010011011101

          - FUNCTION OUTPUT:  01011000001001010101010011011101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11001010010000100010110100100110

       - FUNCTION OUTPUT:          01011000001001010101010011011101

       - Left XOR FUNCTION OUTPUT: 10010010011001110111100111111011

       - Next Round Left 32 Bits:  11010101110000010000001110101000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010010011001110111100111111011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010101110000010000001110101000

       - Right 32 Bits:            10010010011001110111100111111011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01100001010010110011100101110111000011010111000101001111   [Subkey: 11]
          - Input Half:       10010010011001110111100111111011
          - S-Box Result:     00111110000011011101001110111000   [per every group of 4-bits]
          - Split Into Two:   0011111000001101 [L] 1101001110111000 [R]
          - Swap Halves:      11010011101110000011111000001101
          - Bit Inversion:    00101100010001111100000111110010
          - Compressed Key:   00000001101110110100101000011111   [done by compression P-Box]
          - XOR with Key:     00101101111111001000101111101101

          - FUNCTION OUTPUT:  00101101111111001000101111101101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010101110000010000001110101000

       - FUNCTION OUTPUT:          00101101111111001000101111101101

       - Left XOR FUNCTION OUTPUT: 11111000001111011000100001000101

       - Next Round Left 32 Bits:  10010010011001110111100111111011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111000001111011000100001000101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010010011001110111100111111011

       - Right 32 Bits:            11111000001111011000100001000101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010011110101101001100011010001000111100101000111010110   [Subkey: 10]
          - Input Half:       11111000001111011000100001000101
          - S-Box Result:     10110010000101100010001001111001   [per every group of 4-bits]
          - Split Into Two:   1011001000010110 [L] 0010001001111001 [R]
          - Swap Halves:      00100010011110011011001000010110
          - Bit Inversion:    11011101100001100100110111101001
          - Compressed Key:   01101010001111100100011000111001   [done by compression P-Box]
          - XOR with Key:     10110111101110000000101111010000

          - FUNCTION OUTPUT:  10110111101110000000101111010000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010010011001110111100111111011

       - FUNCTION OUTPUT:          10110111101110000000101111010000

       - Left XOR FUNCTION OUTPUT: 00100101110111110111001000101011

       - Next Round Left 32 Bits:  11111000001111011000100001000101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00100101110111110111001000101011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111000001111011000100001000101

       - Right 32 Bits:            00100101110111110111001000101011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00111101100001010010110011100101110111000011010111000101   [Subkey: 9]
          - Input Half:       00100101110111110111001000101011
          - S-Box Result:     11101001011010111101111011101000   [per every group of 4-bits]
          - Split Into Two:   1110100101101011 [L] 1101111011101000 [R]
          - Swap Halves:      11011110111010001110100101101011
          - Bit Inversion:    00100001000101110001011010010100
          - Compressed Key:   11010010101011011101000001111010   [done by compression P-Box]
          - XOR with Key:     11110011101110101100011011101110

          - FUNCTION OUTPUT:  11110011101110101100011011101110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111000001111011000100001000101

       - FUNCTION OUTPUT:          11110011101110101100011011101110

       - Left XOR FUNCTION OUTPUT: 00001011100001110100111010101011

       - Next Round Left 32 Bits:  00100101110111110111001000101011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001011100001110100111010101011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00100101110111110111001000101011

       - Right 32 Bits:            00001011100001110100111010101011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011000010011110101101001100011010001000111100101000111   [Subkey: 8]
          - Input Half:       00001011100001110100111010101011
          - S-Box Result:     11111000001011010111110001001000   [per every group of 4-bits]
          - Split Into Two:   1111100000101101 [L] 0111110001001000 [R]
          - Swap Halves:      01111100010010001111100000101101
          - Bit Inversion:    10000011101101110000011111010010
          - Compressed Key:   11000011011110010101001000011011   [done by compression P-Box]
          - XOR with Key:     01000000110011100101010111001001

          - FUNCTION OUTPUT:  01000000110011100101010111001001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00100101110111110111001000101011

       - FUNCTION OUTPUT:          01000000110011100101010111001001

       - Left XOR FUNCTION OUTPUT: 01100101000100010010011111100010

       - Next Round Left 32 Bits:  00001011100001110100111010101011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01100101000100010010011111100010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001011100001110100111010101011

       - Right 32 Bits:            01100101000100010010011111100010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010100111101100001010010110011100101110111000011010111   [Subkey: 7]
          - Input Half:       01100101000100010010011111100010
          - S-Box Result:     00001001101010101110110111001110   [per every group of 4-bits]
          - Split Into Two:   0000100110101010 [L] 1110110111001110 [R]
          - Swap Halves:      11101101110011100000100110101010
          - Bit Inversion:    00010010001100011111011001010101
          - Compressed Key:   01011110000101111100111000101011   [done by compression P-Box]
          - XOR with Key:     01001100001001100011100001111110

          - FUNCTION OUTPUT:  01001100001001100011100001111110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001011100001110100111010101011

       - FUNCTION OUTPUT:          01001100001001100011100001111110

       - Left XOR FUNCTION OUTPUT: 01000111101000010111011011010101

       - Next Round Left 32 Bits:  01100101000100010010011111100010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000111101000010111011011010101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01100101000100010010011111100010

       - Right 32 Bits:            01000111101000010111011011010101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00011101011000010011110101101001100011010001000111100101   [Subkey: 6]
          - Input Half:       01000111101000010111011011010101
          - S-Box Result:     01111101010010101101000001101001   [per every group of 4-bits]
          - Split Into Two:   0111110101001010 [L] 1101000001101001 [R]
          - Swap Halves:      11010000011010010111110101001010
          - Bit Inversion:    00101111100101101000001010110101
          - Compressed Key:   11010100101110011100100000111010   [done by compression P-Box]
          - XOR with Key:     11111011001011110100101010001111

          - FUNCTION OUTPUT:  11111011001011110100101010001111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01100101000100010010011111100010

       - FUNCTION OUTPUT:          11111011001011110100101010001111

       - Left XOR FUNCTION OUTPUT: 10011110001111100110110101101101

       - Next Round Left 32 Bits:  01000111101000010111011011010101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011110001111100110110101101101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01000111101000010111011011010101

       - Right 32 Bits:            10011110001111100110110101101101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011100010100111101100001010010110011100101110111000011   [Subkey: 5]
          - Input Half:       10011110001111100110110101101101
          - S-Box Result:     00111100000111000000011000000110   [per every group of 4-bits]
          - Split Into Two:   0011110000011100 [L] 0000011000000110 [R]
          - Swap Halves:      00000110000001100011110000011100
          - Bit Inversion:    11111001111110011100001111100011
          - Compressed Key:   11011000011110101001011001110011   [done by compression P-Box]
          - XOR with Key:     00100001100000110101010110010000

          - FUNCTION OUTPUT:  00100001100000110101010110010000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01000111101000010111011011010101

       - FUNCTION OUTPUT:          00100001100000110101010110010000

       - Left XOR FUNCTION OUTPUT: 01100110001000100010001101000101

       - Next Round Left 32 Bits:  10011110001111100110110101101101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01100110001000100010001101000101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011110001111100110110101101101

       - Right 32 Bits:            01100110001000100010001101000101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100011101011000010011110101101001100011010001000111   [Subkey: 4]
          - Input Half:       01100110001000100010001101000101
          - S-Box Result:     00000000111011101110000101111001   [per every group of 4-bits]
          - Split Into Two:   0000000011101110 [L] 1110000101111001 [R]
          - Swap Halves:      11100001011110010000000011101110
          - Bit Inversion:    00011110100001101111111100010001
          - Compressed Key:   01011110000011111110010001001011   [done by compression P-Box]
          - XOR with Key:     01000000100010010001101101011010

          - FUNCTION OUTPUT:  01000000100010010001101101011010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011110001111100110110101101101

       - FUNCTION OUTPUT:          01000000100010010001101101011010

       - Left XOR FUNCTION OUTPUT: 11011110101101110111011000110111

       - Next Round Left 32 Bits:  01100110001000100010001101000101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11011110101101110111011000110111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01100110001000100010001101000101

       - Right 32 Bits:            11011110101101110111011000110111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00001101011100010100111101100001010010110011100101110111   [Subkey: 3]
          - Input Half:       11011110101101110111011000110111
          - S-Box Result:     01101100100011011101000000011101   [per every group of 4-bits]
          - Split Into Two:   0110110010001101 [L] 1101000000011101 [R]
          - Swap Halves:      11010000000111010110110010001101
          - Bit Inversion:    00101111111000101001001101110010
          - Compressed Key:   10011100011010010101110000011011   [done by compression P-Box]
          - XOR with Key:     10110011100010111100111101101001

          - FUNCTION OUTPUT:  10110011100010111100111101101001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01100110001000100010001101000101

       - FUNCTION OUTPUT:          10110011100010111100111101101001

       - Left XOR FUNCTION OUTPUT: 11010101101010011110110000101100

       - Next Round Left 32 Bits:  11011110101101110111011000110111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010101101010011110110000101100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11011110101101110111011000110111

       - Right 32 Bits:            11010101101010011110110000101100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00011110010100011101011000010011110101101001100011010001   [Subkey: 2]
          - Input Half:       11010101101010011110110000101100
          - S-Box Result:     01101001010000111100010111100101   [per every group of 4-bits]
          - Split Into Two:   0110100101000011 [L] 1100010111100101 [R]
          - Swap Halves:      11000101111001010110100101000011
          - Bit Inversion:    00111010000110101001011010111100
          - Compressed Key:   11111000010100101101010100100010   [done by compression P-Box]
          - XOR with Key:     11000010010010000100001110011110

          - FUNCTION OUTPUT:  11000010010010000100001110011110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11011110101101110111011000110111

       - FUNCTION OUTPUT:          11000010010010000100001110011110

       - Left XOR FUNCTION OUTPUT: 00011100111111110011010110101001

       - Next Round Left 32 Bits:  11010101101010011110110000101100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011100111111110011010110101001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010101101010011110110000101100

       - Right 32 Bits:            00011100111111110011010110101001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011100001101011100010100111101100001010010110011100101   [Subkey: 1]
          - Input Half:       00011100111111110011010110101001
          - S-Box Result:     10100101101110110001100101000011   [per every group of 4-bits]
          - Split Into Two:   1010010110111011 [L] 0001100101000011 [R]
          - Swap Halves:      00011001010000111010010110111011
          - Bit Inversion:    11100110101111000101101001000100
          - Compressed Key:   11011110010000111100100001101010   [done by compression P-Box]
          - XOR with Key:     00111000111111111001001000101110

          - FUNCTION OUTPUT:  00111000111111111001001000101110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010101101010011110110000101100

       - FUNCTION OUTPUT:          00111000111111111001001000101110

       - Left XOR FUNCTION OUTPUT: 11101101010101100111111000000010

       - Next Round Left 32 Bits:  00011100111111110011010110101001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101101010101100111111000000010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 1110110101010110011111100000001000011100111111110011010110101001

 > Decrypted Block:     1110110101010110011111100000001000011100111111110011010110101001


!!!CBC: Previous Ciphertext:                             0110111111011001001111011000111000101111110001011010010010001101

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    1000001010001111010000111000110000110011001110101001000100100100

 > Final Processed Block:                                1000001010001111010000111000110000110011001110101001000100100100


FINAL PROCESSED DATA BLOCKS: 0011101000110110101000101010100101011101110000000110111011011100,1101011110001110101011010100011000101001011001010011010010101101,1000001010001111010000111000110000110011001110101001000100100100,

BLOCKS IN ASCII:             :6¢©]ÀnÜ×?­F)e4­??C?3:?$

=========================================================================================================================
STAGE 2: DES [ENCRYPT] ==================================================================================================
=========================================================================================================================

56-bit key: eniLUdz
In Binary:  01100101011011100110100101001100010101010110010001111010

Subkeys:    Key i = Key (i - 1) [Shifted left by 3 and then inverted]

Subkey 1  : 11010100100011001011010110011101010101001101110000101100
Subkey 2  : 01011011100110100101001100010101010110010001111010011001
Subkey 3  : 00100011001011010110011101010101001101110000101100110101
Subkey 4  : 11100110100101001100010101010110010001111010011001010110
Subkey 5  : 11001011010110011101010101001101110000101100110101001000
Subkey 6  : 10100101001100010101010110010001111010011001010110111001
Subkey 7  : 11010110011101010101001101110000101100110101001000110010
Subkey 8  : 01001100010101010110010001111010011001010110111001101001
Subkey 9  : 10011101010101001101110000101100110101001000110010110101
Subkey 10 : 00010101010110010001111010011001010110111001101001010011
Subkey 11 : 01010101001101110000101100110101001000110010110101100111
Subkey 12 : 01010110010001111010011001010110111001101001010011000101
Subkey 13 : 01001101110000101100110101001000110010110101100111010101
Subkey 14 : 10010001111010011001010110111001101001010011000101010101
Subkey 15 : 01110000101100110101001000110010110101100111010101010011
Subkey 16 : 01111010011001010110111001101001010011000101010101100100

S-BOX (4x4):
INPUT | OUTPUT
------|-------
0000  | 1111
0001  | 1010
0010  | 1110
0011  | 0001
0100  | 0111
0101  | 1001
0110  | 0000
0111  | 1101
1000  | 0010
1001  | 0011
1010  | 0100
1011  | 1000
1100  | 0101
1101  | 0110
1110  | 1100
1111  | 1011

P-BOX (7 bits compressed to 4 bits)
Bit at Position X goes to Position Y
X: | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
Y: | 4 | 3 | 1 | 2 | 1 | 4 | 3 |


Data to encrypt         : :6¢©]ÀnÜ×?­F)e4­??C?3:?$

Data padded with spaces : :6¢©]ÀnÜ×?­F)e4­??C?3:?$[Padded with '0' spaces]

Data in ASCII           : 58,54,162,169,93,192,110,220,215,142,173,70,41,101,52,173,130,143,67,140,51,58,145,36,

Data in Binary          : 00111010,00110110,10100010,10101001,01011101,11000000,01101110,11011100,11010111,10001110,10101101,01000110,00101001,01100101,00110100,10101101,10000010,10001111,01000011,10001100,00110011,00111010,10010001,00100100,

Data in 64-bit Blocks   : 0011101000110110101000101010100101011101110000000110111011011100,1101011110001110101011010100011000101001011001010011010010101101,1000001010001111010000111000110000110011001110101001000100100100,



<<<<<< PROCESSING IN 'CBC' MODE >>>>>>


!!!CBC: Initial Previous Ciphertext = IV:               (0101010001110100011001010100100001001010011001010101010001001001)

Plaintext Block: 1:                                      0011101000110110101000101010100101011101110000000110111011011100

!!!CBC: Previous Ciphertext:                             0101010001110100011001010100100001001010011001010101010001001001

!!!CBC: Current Block XOR with Previous Ciphertext:      0110111001000010110001111110000100010111101001010011101010010101

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101110010000101100011111100001

       - Right 32 Bits:            00010111101001010011101010010101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010100100011001011010110011101010101001101110000101100   [Subkey: 1]
          - Input Half:       00010111101001010011101010010101
          - S-Box Result:     10101101010010010001010000111001   [per every group of 4-bits]
          - Split Into Two:   1010110101001001 [L] 0001010000111001 [R]
          - Swap Halves:      00010100001110011010110101001001
          - Bit Inversion:    11101011110001100101001010110110
          - Compressed Key:   01010011100101100101001101001100   [done by compression P-Box]
          - XOR with Key:     10111000010100000000000111111010

          - FUNCTION OUTPUT:  10111000010100000000000111111010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101110010000101100011111100001

       - FUNCTION OUTPUT:          10111000010100000000000111111010

       - Left XOR FUNCTION OUTPUT: 11010110000100101100011000011011

       - Next Round Left 32 Bits:  00010111101001010011101010010101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010110000100101100011000011011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00010111101001010011101010010101

       - Right 32 Bits:            11010110000100101100011000011011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011011100110100101001100010101010110010001111010011001   [Subkey: 2]
          - Input Half:       11010110000100101100011000011011
          - S-Box Result:     01100000101011100101000010101000   [per every group of 4-bits]
          - Split Into Two:   0110000010101110 [L] 0101000010101000 [R]
          - Swap Halves:      01010000101010000110000010101110
          - Bit Inversion:    10101111010101111001111101010001
          - Compressed Key:   11101001010100100101100011100110   [done by compression P-Box]
          - XOR with Key:     01000110000001011100011110110111

          - FUNCTION OUTPUT:  01000110000001011100011110110111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00010111101001010011101010010101

       - FUNCTION OUTPUT:          01000110000001011100011110110111

       - Left XOR FUNCTION OUTPUT: 01010001101000001111110100100010

       - Next Round Left 32 Bits:  11010110000100101100011000011011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01010001101000001111110100100010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010110000100101100011000011011

       - Right 32 Bits:            01010001101000001111110100100010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100011001011010110011101010101001101110000101100110101   [Subkey: 3]
          - Input Half:       01010001101000001111110100100010
          - S-Box Result:     10011010010011111011011011101110   [per every group of 4-bits]
          - Split Into Two:   1001101001001111 [L] 1011011011101110 [R]
          - Swap Halves:      10110110111011101001101001001111
          - Bit Inversion:    01001001000100010110010110110000
          - Compressed Key:   00100111110010100110110010011010   [done by compression P-Box]
          - XOR with Key:     01101110110110110000100100101010

          - FUNCTION OUTPUT:  01101110110110110000100100101010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010110000100101100011000011011

       - FUNCTION OUTPUT:          01101110110110110000100100101010

       - Left XOR FUNCTION OUTPUT: 10111000110010011100111100110001

       - Next Round Left 32 Bits:  01010001101000001111110100100010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10111000110010011100111100110001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01010001101000001111110100100010

       - Right 32 Bits:            10111000110010011100111100110001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11100110100101001100010101010110010001111010011001010110   [Subkey: 4]
          - Input Half:       10111000110010011100111100110001
          - S-Box Result:     10000010010100110101101100011010   [per every group of 4-bits]
          - Split Into Two:   1000001001010011 [L] 0101101100011010 [R]
          - Swap Halves:      01011011000110101000001001010011
          - Bit Inversion:    10100100111001010111110110101100
          - Compressed Key:   00111010010010100001110111001001   [done by compression P-Box]
          - XOR with Key:     10011110101011110110000001100101

          - FUNCTION OUTPUT:  10011110101011110110000001100101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01010001101000001111110100100010

       - FUNCTION OUTPUT:          10011110101011110110000001100101

       - Left XOR FUNCTION OUTPUT: 11001111000011111001110101000111

       - Next Round Left 32 Bits:  10111000110010011100111100110001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001111000011111001110101000111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10111000110010011100111100110001

       - Right 32 Bits:            11001111000011111001110101000111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11001011010110011101010101001101110000101100110101001000   [Subkey: 5]
          - Input Half:       11001111000011111001110101000111
          - S-Box Result:     01011011111110110011011001111101   [per every group of 4-bits]
          - Split Into Two:   0101101111111011 [L] 0011011001111101 [R]
          - Swap Halves:      00110110011111010101101111111011
          - Bit Inversion:    11001001100000101010010000000100
          - Compressed Key:   10101001010110001101011101010100   [done by compression P-Box]
          - XOR with Key:     01100000110110100111001101010000

          - FUNCTION OUTPUT:  01100000110110100111001101010000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10111000110010011100111100110001

       - FUNCTION OUTPUT:          01100000110110100111001101010000

       - Left XOR FUNCTION OUTPUT: 11011000000100111011110001100001

       - Next Round Left 32 Bits:  11001111000011111001110101000111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11011000000100111011110001100001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11001111000011111001110101000111

       - Right 32 Bits:            11011000000100111011110001100001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10100101001100010101010110010001111010011001010110111001   [Subkey: 6]
          - Input Half:       11011000000100111011110001100001
          - S-Box Result:     01100010101000011000010100001010   [per every group of 4-bits]
          - Split Into Two:   0110001010100001 [L] 1000010100001010 [R]
          - Swap Halves:      10000101000010100110001010100001
          - Bit Inversion:    01111010111101011001110101011110
          - Compressed Key:   00011100010101101111100101110110   [done by compression P-Box]
          - XOR with Key:     01100110101000110110010000101000

          - FUNCTION OUTPUT:  01100110101000110110010000101000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11001111000011111001110101000111

       - FUNCTION OUTPUT:          01100110101000110110010000101000

       - Left XOR FUNCTION OUTPUT: 10101001101011001111100101101111

       - Next Round Left 32 Bits:  11011000000100111011110001100001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10101001101011001111100101101111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11011000000100111011110001100001

       - Right 32 Bits:            10101001101011001111100101101111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010110011101010101001101110000101100110101001000110010   [Subkey: 7]
          - Input Half:       10101001101011001111100101101111
          - S-Box Result:     01000011010001011011001100001011   [per every group of 4-bits]
          - Split Into Two:   0100001101000101 [L] 1011001100001011 [R]
          - Swap Halves:      10110011000010110100001101000101
          - Bit Inversion:    01001100111101001011110010111010
          - Compressed Key:   01111110010110111010111010000001   [done by compression P-Box]
          - XOR with Key:     00110010101011110001001000111011

          - FUNCTION OUTPUT:  00110010101011110001001000111011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11011000000100111011110001100001

       - FUNCTION OUTPUT:          00110010101011110001001000111011

       - Left XOR FUNCTION OUTPUT: 11101010101111001010111001011010

       - Next Round Left 32 Bits:  10101001101011001111100101101111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101010101111001010111001011010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10101001101011001111100101101111

       - Right 32 Bits:            11101010101111001010111001011010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001100010101010110010001111010011001010110111001101001   [Subkey: 8]
          - Input Half:       11101010101111001010111001011010
          - S-Box Result:     11000100100001010100110010010100   [per every group of 4-bits]
          - Split Into Two:   1100010010000101 [L] 0100110010010100 [R]
          - Swap Halves:      01001100100101001100010010000101
          - Bit Inversion:    10110011011010110011101101111010
          - Compressed Key:   10011010110010110011101011000110   [done by compression P-Box]
          - XOR with Key:     00101001101000000000000110111100

          - FUNCTION OUTPUT:  00101001101000000000000110111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10101001101011001111100101101111

       - FUNCTION OUTPUT:          00101001101000000000000110111100

       - Left XOR FUNCTION OUTPUT: 10000000000011001111100011010011

       - Next Round Left 32 Bits:  11101010101111001010111001011010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10000000000011001111100011010011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101010101111001010111001011010

       - Right 32 Bits:            10000000000011001111100011010011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10011101010101001101110000101100110101001000110010110101   [Subkey: 9]
          - Input Half:       10000000000011001111100011010011
          - S-Box Result:     00101111111101011011001001100001   [per every group of 4-bits]
          - Split Into Two:   0010111111110101 [L] 1011001001100001 [R]
          - Swap Halves:      10110010011000010010111111110101
          - Bit Inversion:    01001101100111101101000000001010
          - Compressed Key:   11011010011100011001000101101010   [done by compression P-Box]
          - XOR with Key:     10010111111011110100000101100000

          - FUNCTION OUTPUT:  10010111111011110100000101100000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101010101111001010111001011010

       - FUNCTION OUTPUT:          10010111111011110100000101100000

       - Left XOR FUNCTION OUTPUT: 01111101010100111110111100111010

       - Next Round Left 32 Bits:  10000000000011001111100011010011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01111101010100111110111100111010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10000000000011001111100011010011

       - Right 32 Bits:            01111101010100111110111100111010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010101010110010001111010011001010110111001101001010011   [Subkey: 10]
          - Input Half:       01111101010100111110111100111010
          - S-Box Result:     11010110100100011100101100010100   [per every group of 4-bits]
          - Split Into Two:   1101011010010001 [L] 1100101100010100 [R]
          - Swap Halves:      11001011000101001101011010010001
          - Bit Inversion:    00110100111010110010100101101110
          - Compressed Key:   01011001001101100101110110000011   [done by compression P-Box]
          - XOR with Key:     01101101110111010111010011101101

          - FUNCTION OUTPUT:  01101101110111010111010011101101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10000000000011001111100011010011

       - FUNCTION OUTPUT:          01101101110111010111010011101101

       - Left XOR FUNCTION OUTPUT: 11101101110100011000110000111110

       - Next Round Left 32 Bits:  01111101010100111110111100111010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101101110100011000110000111110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01111101010100111110111100111010

       - Right 32 Bits:            11101101110100011000110000111110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101001101110000101100110101001000110010110101100111   [Subkey: 11]
          - Input Half:       11101101110100011000110000111110
          - S-Box Result:     11000110011010100010010100011100   [per every group of 4-bits]
          - Split Into Two:   1100011001101010 [L] 0010010100011100 [R]
          - Swap Halves:      00100101000111001100011001101010
          - Bit Inversion:    11011010111000110011100110010101
          - Compressed Key:   01011110001000110110110001011011   [done by compression P-Box]
          - XOR with Key:     10000100110000000101010111001110

          - FUNCTION OUTPUT:  10000100110000000101010111001110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01111101010100111110111100111010

       - FUNCTION OUTPUT:          10000100110000000101010111001110

       - Left XOR FUNCTION OUTPUT: 11111001100100111011101011110100

       - Next Round Left 32 Bits:  11101101110100011000110000111110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111001100100111011101011110100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101101110100011000110000111110

       - Right 32 Bits:            11111001100100111011101011110100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010110010001111010011001010110111001101001010011000101   [Subkey: 12]
          - Input Half:       11111001100100111011101011110100
          - S-Box Result:     10110011001100011000010010110111   [per every group of 4-bits]
          - Split Into Two:   1011001100110001 [L] 1000010010110111 [R]
          - Swap Halves:      10000100101101111011001100110001
          - Bit Inversion:    01111011010010000100110011001110
          - Compressed Key:   01110010100010101011010101101010   [done by compression P-Box]
          - XOR with Key:     00001001110000101111100110100100

          - FUNCTION OUTPUT:  00001001110000101111100110100100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101101110100011000110000111110

       - FUNCTION OUTPUT:          00001001110000101111100110100100

       - Left XOR FUNCTION OUTPUT: 11100100000100110111010110011010

       - Next Round Left 32 Bits:  11111001100100111011101011110100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100100000100110111010110011010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111001100100111011101011110100

       - Right 32 Bits:            11100100000100110111010110011010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001101110000101100110101001000110010110101100111010101   [Subkey: 13]
          - Input Half:       11100100000100110111010110011010
          - S-Box Result:     11000111101000011101100100110100   [per every group of 4-bits]
          - Split Into Two:   1100011110100001 [L] 1101100100110100 [R]
          - Swap Halves:      11011001001101001100011110100001
          - Bit Inversion:    00100110110010110011100001011110
          - Compressed Key:   10010000011010001001111000111010   [done by compression P-Box]
          - XOR with Key:     10110110101000111010011001100100

          - FUNCTION OUTPUT:  10110110101000111010011001100100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111001100100111011101011110100

       - FUNCTION OUTPUT:          10110110101000111010011001100100

       - Left XOR FUNCTION OUTPUT: 01001111001100000001110010010000

       - Next Round Left 32 Bits:  11100100000100110111010110011010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001111001100000001110010010000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100100000100110111010110011010

       - Right 32 Bits:            01001111001100000001110010010000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010001111010011001010110111001101001010011000101010101   [Subkey: 14]
          - Input Half:       01001111001100000001110010010000
          - S-Box Result:     01111011000111111010010100111111   [per every group of 4-bits]
          - Split Into Two:   0111101100011111 [L] 1010010100111111 [R]
          - Swap Halves:      10100101001111110111101100011111
          - Bit Inversion:    01011010110000001000010011100000
          - Compressed Key:   01000101000101111110100000011010   [done by compression P-Box]
          - XOR with Key:     00011111110101110110110011111010

          - FUNCTION OUTPUT:  00011111110101110110110011111010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100100000100110111010110011010

       - FUNCTION OUTPUT:          00011111110101110110110011111010

       - Left XOR FUNCTION OUTPUT: 11111011110001000001100101100000

       - Next Round Left 32 Bits:  01001111001100000001110010010000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111011110001000001100101100000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001111001100000001110010010000

       - Right 32 Bits:            11111011110001000001100101100000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110000101100110101001000110010110101100111010101010011   [Subkey: 15]
          - Input Half:       11111011110001000001100101100000
          - S-Box Result:     10111000010101111010001100001111   [per every group of 4-bits]
          - Split Into Two:   1011100001010111 [L] 1010001100001111 [R]
          - Swap Halves:      10100011000011111011100001010111
          - Bit Inversion:    01011100111100000100011110101000
          - Compressed Key:   01001100010100111001011001010011   [done by compression P-Box]
          - XOR with Key:     00010000101000111101000111111011

          - FUNCTION OUTPUT:  00010000101000111101000111111011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001111001100000001110010010000

       - FUNCTION OUTPUT:          00010000101000111101000111111011

       - Left XOR FUNCTION OUTPUT: 01011111100100111100110101101011

       - Next Round Left 32 Bits:  11111011110001000001100101100000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011111100100111100110101101011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111011110001000001100101100000

       - Right 32 Bits:            01011111100100111100110101101011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111010011001010110111001101001010011000101010101100100   [Subkey: 16]
          - Input Half:       01011111100100111100110101101011
          - S-Box Result:     10011011001100010101011000001000   [per every group of 4-bits]
          - Split Into Two:   1001101100110001 [L] 0101011000001000 [R]
          - Swap Halves:      01010110000010001001101100110001
          - Bit Inversion:    10101001111101110110010011001110
          - Compressed Key:   11100110111010010101001001011000   [done by compression P-Box]
          - XOR with Key:     01001111000111100011011010010110

          - FUNCTION OUTPUT:  01001111000111100011011010010110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111011110001000001100101100000

       - FUNCTION OUTPUT:          01001111000111100011011010010110

       - Left XOR FUNCTION OUTPUT: 10110100110110100010111111110110

       - Next Round Left 32 Bits:  01011111100100111100110101101011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10110100110110100010111111110110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 1011010011011010001011111111011001011111100100111100110101101011

 > Processed Block:     1011010011011010001011111111011001011111100100111100110101101011



Plaintext Block: 2:                                      1101011110001110101011010100011000101001011001010011010010101101

!!!CBC: Previous Ciphertext:                             1011010011011010001011111111011001011111100100111100110101101011

!!!CBC: Current Block XOR with Previous Ciphertext:      0110001101010100100000101011000001110110111101101111100111000110

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01100011010101001000001010110000

       - Right 32 Bits:            01110110111101101111100111000110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010100100011001011010110011101010101001101110000101100   [Subkey: 1]
          - Input Half:       01110110111101101111100111000110
          - S-Box Result:     11010000101100001011001101010000   [per every group of 4-bits]
          - Split Into Two:   1101000010110000 [L] 1011001101010000 [R]
          - Swap Halves:      10110011010100001101000010110000
          - Bit Inversion:    01001100101011110010111101001111
          - Compressed Key:   01010011100101100101001101001100   [done by compression P-Box]
          - XOR with Key:     00011111001110010111110000000011

          - FUNCTION OUTPUT:  00011111001110010111110000000011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01100011010101001000001010110000

       - FUNCTION OUTPUT:          00011111001110010111110000000011

       - Left XOR FUNCTION OUTPUT: 01111100011011011111111010110011

       - Next Round Left 32 Bits:  01110110111101101111100111000110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01111100011011011111111010110011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110110111101101111100111000110

       - Right 32 Bits:            01111100011011011111111010110011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011011100110100101001100010101010110010001111010011001   [Subkey: 2]
          - Input Half:       01111100011011011111111010110011
          - S-Box Result:     11010101000001101011110010000001   [per every group of 4-bits]
          - Split Into Two:   1101010100000110 [L] 1011110010000001 [R]
          - Swap Halves:      10111100100000011101010100000110
          - Bit Inversion:    01000011011111100010101011111001
          - Compressed Key:   11101001010100100101100011100110   [done by compression P-Box]
          - XOR with Key:     10101010001011000111001000011111

          - FUNCTION OUTPUT:  10101010001011000111001000011111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110110111101101111100111000110

       - FUNCTION OUTPUT:          10101010001011000111001000011111

       - Left XOR FUNCTION OUTPUT: 11011100110110101000101111011001

       - Next Round Left 32 Bits:  01111100011011011111111010110011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11011100110110101000101111011001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01111100011011011111111010110011

       - Right 32 Bits:            11011100110110101000101111011001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100011001011010110011101010101001101110000101100110101   [Subkey: 3]
          - Input Half:       11011100110110101000101111011001
          - S-Box Result:     01100101011001000010100001100011   [per every group of 4-bits]
          - Split Into Two:   0110010101100100 [L] 0010100001100011 [R]
          - Swap Halves:      00101000011000110110010101100100
          - Bit Inversion:    11010111100111001001101010011011
          - Compressed Key:   00100111110010100110110010011010   [done by compression P-Box]
          - XOR with Key:     11110000010101101111011000000001

          - FUNCTION OUTPUT:  11110000010101101111011000000001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01111100011011011111111010110011

       - FUNCTION OUTPUT:          11110000010101101111011000000001

       - Left XOR FUNCTION OUTPUT: 10001100001110110000100010110010

       - Next Round Left 32 Bits:  11011100110110101000101111011001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001100001110110000100010110010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11011100110110101000101111011001

       - Right 32 Bits:            10001100001110110000100010110010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11100110100101001100010101010110010001111010011001010110   [Subkey: 4]
          - Input Half:       10001100001110110000100010110010
          - S-Box Result:     00100101000110001111001010001110   [per every group of 4-bits]
          - Split Into Two:   0010010100011000 [L] 1111001010001110 [R]
          - Swap Halves:      11110010100011100010010100011000
          - Bit Inversion:    00001101011100011101101011100111
          - Compressed Key:   00111010010010100001110111001001   [done by compression P-Box]
          - XOR with Key:     00110111001110111100011100101110

          - FUNCTION OUTPUT:  00110111001110111100011100101110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11011100110110101000101111011001

       - FUNCTION OUTPUT:          00110111001110111100011100101110

       - Left XOR FUNCTION OUTPUT: 11101011111000010100110011110111

       - Next Round Left 32 Bits:  10001100001110110000100010110010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11101011111000010100110011110111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001100001110110000100010110010

       - Right 32 Bits:            11101011111000010100110011110111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11001011010110011101010101001101110000101100110101001000   [Subkey: 5]
          - Input Half:       11101011111000010100110011110111
          - S-Box Result:     11001000110010100111010110111101   [per every group of 4-bits]
          - Split Into Two:   1100100011001010 [L] 0111010110111101 [R]
          - Swap Halves:      01110101101111011100100011001010
          - Bit Inversion:    10001010010000100011011100110101
          - Compressed Key:   10101001010110001101011101010100   [done by compression P-Box]
          - XOR with Key:     00100011000110101110000001100001

          - FUNCTION OUTPUT:  00100011000110101110000001100001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001100001110110000100010110010

       - FUNCTION OUTPUT:          00100011000110101110000001100001

       - Left XOR FUNCTION OUTPUT: 10101111001000011110100011010011

       - Next Round Left 32 Bits:  11101011111000010100110011110111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10101111001000011110100011010011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11101011111000010100110011110111

       - Right 32 Bits:            10101111001000011110100011010011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10100101001100010101010110010001111010011001010110111001   [Subkey: 6]
          - Input Half:       10101111001000011110100011010011
          - S-Box Result:     01001011111010101100001001100001   [per every group of 4-bits]
          - Split Into Two:   0100101111101010 [L] 1100001001100001 [R]
          - Swap Halves:      11000010011000010100101111101010
          - Bit Inversion:    00111101100111101011010000010101
          - Compressed Key:   00011100010101101111100101110110   [done by compression P-Box]
          - XOR with Key:     00100001110010000100110101100011

          - FUNCTION OUTPUT:  00100001110010000100110101100011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11101011111000010100110011110111

       - FUNCTION OUTPUT:          00100001110010000100110101100011

       - Left XOR FUNCTION OUTPUT: 11001010001010010000000110010100

       - Next Round Left 32 Bits:  10101111001000011110100011010011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001010001010010000000110010100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10101111001000011110100011010011

       - Right 32 Bits:            11001010001010010000000110010100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010110011101010101001101110000101100110101001000110010   [Subkey: 7]
          - Input Half:       11001010001010010000000110010100
          - S-Box Result:     01010100111000111111101000110111   [per every group of 4-bits]
          - Split Into Two:   0101010011100011 [L] 1111101000110111 [R]
          - Swap Halves:      11111010001101110101010011100011
          - Bit Inversion:    00000101110010001010101100011100
          - Compressed Key:   01111110010110111010111010000001   [done by compression P-Box]
          - XOR with Key:     01111011100100110000010110011101

          - FUNCTION OUTPUT:  01111011100100110000010110011101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10101111001000011110100011010011

       - FUNCTION OUTPUT:          01111011100100110000010110011101

       - Left XOR FUNCTION OUTPUT: 11010100101100101110110101001110

       - Next Round Left 32 Bits:  11001010001010010000000110010100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010100101100101110110101001110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11001010001010010000000110010100

       - Right 32 Bits:            11010100101100101110110101001110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001100010101010110010001111010011001010110111001101001   [Subkey: 8]
          - Input Half:       11010100101100101110110101001110
          - S-Box Result:     01100111100011101100011001111100   [per every group of 4-bits]
          - Split Into Two:   0110011110001110 [L] 1100011001111100 [R]
          - Swap Halves:      11000110011111000110011110001110
          - Bit Inversion:    00111001100000111001100001110001
          - Compressed Key:   10011010110010110011101011000110   [done by compression P-Box]
          - XOR with Key:     10100011010010001010001010110111

          - FUNCTION OUTPUT:  10100011010010001010001010110111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11001010001010010000000110010100

       - FUNCTION OUTPUT:          10100011010010001010001010110111

       - Left XOR FUNCTION OUTPUT: 01101001011000011010001100100011

       - Next Round Left 32 Bits:  11010100101100101110110101001110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101001011000011010001100100011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010100101100101110110101001110

       - Right 32 Bits:            01101001011000011010001100100011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10011101010101001101110000101100110101001000110010110101   [Subkey: 9]
          - Input Half:       01101001011000011010001100100011
          - S-Box Result:     00000011000010100100000111100001   [per every group of 4-bits]
          - Split Into Two:   0000001100001010 [L] 0100000111100001 [R]
          - Swap Halves:      01000001111000010000001100001010
          - Bit Inversion:    10111110000111101111110011110101
          - Compressed Key:   11011010011100011001000101101010   [done by compression P-Box]
          - XOR with Key:     01100100011011110110110110011111

          - FUNCTION OUTPUT:  01100100011011110110110110011111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010100101100101110110101001110

       - FUNCTION OUTPUT:          01100100011011110110110110011111

       - Left XOR FUNCTION OUTPUT: 10110000110111011000000011010001

       - Next Round Left 32 Bits:  01101001011000011010001100100011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10110000110111011000000011010001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101001011000011010001100100011

       - Right 32 Bits:            10110000110111011000000011010001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010101010110010001111010011001010110111001101001010011   [Subkey: 10]
          - Input Half:       10110000110111011000000011010001
          - S-Box Result:     10001111011001100010111101101010   [per every group of 4-bits]
          - Split Into Two:   1000111101100110 [L] 0010111101101010 [R]
          - Swap Halves:      00101111011010101000111101100110
          - Bit Inversion:    11010000100101010111000010011001
          - Compressed Key:   01011001001101100101110110000011   [done by compression P-Box]
          - XOR with Key:     10001001101000110010110100011010

          - FUNCTION OUTPUT:  10001001101000110010110100011010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101001011000011010001100100011

       - FUNCTION OUTPUT:          10001001101000110010110100011010

       - Left XOR FUNCTION OUTPUT: 11100000110000101000111000111001

       - Next Round Left 32 Bits:  10110000110111011000000011010001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100000110000101000111000111001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10110000110111011000000011010001

       - Right 32 Bits:            11100000110000101000111000111001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101001101110000101100110101001000110010110101100111   [Subkey: 11]
          - Input Half:       11100000110000101000111000111001
          - S-Box Result:     11001111010111100010110000010011   [per every group of 4-bits]
          - Split Into Two:   1100111101011110 [L] 0010110000010011 [R]
          - Swap Halves:      00101100000100111100111101011110
          - Bit Inversion:    11010011111011000011000010100001
          - Compressed Key:   01011110001000110110110001011011   [done by compression P-Box]
          - XOR with Key:     10001101110011110101110011111010

          - FUNCTION OUTPUT:  10001101110011110101110011111010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10110000110111011000000011010001

       - FUNCTION OUTPUT:          10001101110011110101110011111010

       - Left XOR FUNCTION OUTPUT: 00111101000100101101110000101011

       - Next Round Left 32 Bits:  11100000110000101000111000111001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111101000100101101110000101011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100000110000101000111000111001

       - Right 32 Bits:            00111101000100101101110000101011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010110010001111010011001010110111001101001010011000101   [Subkey: 12]
          - Input Half:       00111101000100101101110000101011
          - S-Box Result:     00010110101011100110010111101000   [per every group of 4-bits]
          - Split Into Two:   0001011010101110 [L] 0110010111101000 [R]
          - Swap Halves:      01100101111010000001011010101110
          - Bit Inversion:    10011010000101111110100101010001
          - Compressed Key:   01110010100010101011010101101010   [done by compression P-Box]
          - XOR with Key:     11101000100111010101110000111011

          - FUNCTION OUTPUT:  11101000100111010101110000111011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100000110000101000111000111001

       - FUNCTION OUTPUT:          11101000100111010101110000111011

       - Left XOR FUNCTION OUTPUT: 00001000010111111101001000000010

       - Next Round Left 32 Bits:  00111101000100101101110000101011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001000010111111101001000000010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111101000100101101110000101011

       - Right 32 Bits:            00001000010111111101001000000010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001101110000101100110101001000110010110101100111010101   [Subkey: 13]
          - Input Half:       00001000010111111101001000000010
          - S-Box Result:     11110010100110110110111011111110   [per every group of 4-bits]
          - Split Into Two:   1111001010011011 [L] 0110111011111110 [R]
          - Swap Halves:      01101110111111101111001010011011
          - Bit Inversion:    10010001000000010000110101100100
          - Compressed Key:   10010000011010001001111000111010   [done by compression P-Box]
          - XOR with Key:     00000001011010011001001101011110

          - FUNCTION OUTPUT:  00000001011010011001001101011110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111101000100101101110000101011

       - FUNCTION OUTPUT:          00000001011010011001001101011110

       - Left XOR FUNCTION OUTPUT: 00111100011110110100111101110101

       - Next Round Left 32 Bits:  00001000010111111101001000000010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00111100011110110100111101110101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001000010111111101001000000010

       - Right 32 Bits:            00111100011110110100111101110101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010001111010011001010110111001101001010011000101010101   [Subkey: 14]
          - Input Half:       00111100011110110100111101110101
          - S-Box Result:     00010101110110000111101111011001   [per every group of 4-bits]
          - Split Into Two:   0001010111011000 [L] 0111101111011001 [R]
          - Swap Halves:      01111011110110010001010111011000
          - Bit Inversion:    10000100001001101110101000100111
          - Compressed Key:   01000101000101111110100000011010   [done by compression P-Box]
          - XOR with Key:     11000001001100010000001000111101

          - FUNCTION OUTPUT:  11000001001100010000001000111101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001000010111111101001000000010

       - FUNCTION OUTPUT:          11000001001100010000001000111101

       - Left XOR FUNCTION OUTPUT: 11001001011011101101000000111111

       - Next Round Left 32 Bits:  00111100011110110100111101110101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001001011011101101000000111111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00111100011110110100111101110101

       - Right 32 Bits:            11001001011011101101000000111111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110000101100110101001000110010110101100111010101010011   [Subkey: 15]
          - Input Half:       11001001011011101101000000111111
          - S-Box Result:     01010011000011000110111100011011   [per every group of 4-bits]
          - Split Into Two:   0101001100001100 [L] 0110111100011011 [R]
          - Swap Halves:      01101111000110110101001100001100
          - Bit Inversion:    10010000111001001010110011110011
          - Compressed Key:   01001100010100111001011001010011   [done by compression P-Box]
          - XOR with Key:     11011100101101110011101010100000

          - FUNCTION OUTPUT:  11011100101101110011101010100000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00111100011110110100111101110101

       - FUNCTION OUTPUT:          11011100101101110011101010100000

       - Left XOR FUNCTION OUTPUT: 11100000110011000111010111010101

       - Next Round Left 32 Bits:  11001001011011101101000000111111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100000110011000111010111010101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11001001011011101101000000111111

       - Right 32 Bits:            11100000110011000111010111010101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111010011001010110111001101001010011000101010101100100   [Subkey: 16]
          - Input Half:       11100000110011000111010111010101
          - S-Box Result:     11001111010101011101100101101001   [per every group of 4-bits]
          - Split Into Two:   1100111101010101 [L] 1101100101101001 [R]
          - Swap Halves:      11011001011010011100111101010101
          - Bit Inversion:    00100110100101100011000010101010
          - Compressed Key:   11100110111010010101001001011000   [done by compression P-Box]
          - XOR with Key:     11000000011111110110001011110010

          - FUNCTION OUTPUT:  11000000011111110110001011110010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11001001011011101101000000111111

       - FUNCTION OUTPUT:          11000000011111110110001011110010

       - Left XOR FUNCTION OUTPUT: 00001001000100011011001011001101

       - Next Round Left 32 Bits:  11100000110011000111010111010101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00001001000100011011001011001101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0000100100010001101100101100110111100000110011000111010111010101

 > Processed Block:     0000100100010001101100101100110111100000110011000111010111010101



Plaintext Block: 3:                                      1000001010001111010000111000110000110011001110101001000100100100

!!!CBC: Previous Ciphertext:                             0000100100010001101100101100110111100000110011000111010111010101

!!!CBC: Current Block XOR with Previous Ciphertext:      1000101110011110111100010100000111010011111101101110010011110001

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001011100111101111000101000001

       - Right 32 Bits:            11010011111101101110010011110001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010100100011001011010110011101010101001101110000101100   [Subkey: 1]
          - Input Half:       11010011111101101110010011110001
          - S-Box Result:     01100001101100001100011110111010   [per every group of 4-bits]
          - Split Into Two:   0110000110110000 [L] 1100011110111010 [R]
          - Swap Halves:      11000111101110100110000110110000
          - Bit Inversion:    00111000010001011001111001001111
          - Compressed Key:   01010011100101100101001101001100   [done by compression P-Box]
          - XOR with Key:     01101011110100111100110100000011

          - FUNCTION OUTPUT:  01101011110100111100110100000011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001011100111101111000101000001

       - FUNCTION OUTPUT:          01101011110100111100110100000011

       - Left XOR FUNCTION OUTPUT: 11100000010011010011110001000010

       - Next Round Left 32 Bits:  11010011111101101110010011110001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100000010011010011110001000010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010011111101101110010011110001

       - Right 32 Bits:            11100000010011010011110001000010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011011100110100101001100010101010110010001111010011001   [Subkey: 2]
          - Input Half:       11100000010011010011110001000010
          - S-Box Result:     11001111011101100001010101111110   [per every group of 4-bits]
          - Split Into Two:   1100111101110110 [L] 0001010101111110 [R]
          - Swap Halves:      00010101011111101100111101110110
          - Bit Inversion:    11101010100000010011000010001001
          - Compressed Key:   11101001010100100101100011100110   [done by compression P-Box]
          - XOR with Key:     00000011110100110110100001101111

          - FUNCTION OUTPUT:  00000011110100110110100001101111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010011111101101110010011110001

       - FUNCTION OUTPUT:          00000011110100110110100001101111

       - Left XOR FUNCTION OUTPUT: 11010000001001011000110010011110

       - Next Round Left 32 Bits:  11100000010011010011110001000010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010000001001011000110010011110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100000010011010011110001000010

       - Right 32 Bits:            11010000001001011000110010011110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00100011001011010110011101010101001101110000101100110101   [Subkey: 3]
          - Input Half:       11010000001001011000110010011110
          - S-Box Result:     01101111111010010010010100111100   [per every group of 4-bits]
          - Split Into Two:   0110111111101001 [L] 0010010100111100 [R]
          - Swap Halves:      00100101001111000110111111101001
          - Bit Inversion:    11011010110000111001000000010110
          - Compressed Key:   00100111110010100110110010011010   [done by compression P-Box]
          - XOR with Key:     11111101000010011111110010001100

          - FUNCTION OUTPUT:  11111101000010011111110010001100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100000010011010011110001000010

       - FUNCTION OUTPUT:          11111101000010011111110010001100

       - Left XOR FUNCTION OUTPUT: 00011101010001001100000011001110

       - Next Round Left 32 Bits:  11010000001001011000110010011110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011101010001001100000011001110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010000001001011000110010011110

       - Right 32 Bits:            00011101010001001100000011001110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11100110100101001100010101010110010001111010011001010110   [Subkey: 4]
          - Input Half:       00011101010001001100000011001110
          - S-Box Result:     10100110011101110101111101011100   [per every group of 4-bits]
          - Split Into Two:   1010011001110111 [L] 0101111101011100 [R]
          - Swap Halves:      01011111010111001010011001110111
          - Bit Inversion:    10100000101000110101100110001000
          - Compressed Key:   00111010010010100001110111001001   [done by compression P-Box]
          - XOR with Key:     10011010111010010100010001000001

          - FUNCTION OUTPUT:  10011010111010010100010001000001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010000001001011000110010011110

       - FUNCTION OUTPUT:          10011010111010010100010001000001

       - Left XOR FUNCTION OUTPUT: 01001010110011001100100011011111

       - Next Round Left 32 Bits:  00011101010001001100000011001110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001010110011001100100011011111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00011101010001001100000011001110

       - Right 32 Bits:            01001010110011001100100011011111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11001011010110011101010101001101110000101100110101001000   [Subkey: 5]
          - Input Half:       01001010110011001100100011011111
          - S-Box Result:     01110100010101010101001001101011   [per every group of 4-bits]
          - Split Into Two:   0111010001010101 [L] 0101001001101011 [R]
          - Swap Halves:      01010010011010110111010001010101
          - Bit Inversion:    10101101100101001000101110101010
          - Compressed Key:   10101001010110001101011101010100   [done by compression P-Box]
          - XOR with Key:     00000100110011000101110011111110

          - FUNCTION OUTPUT:  00000100110011000101110011111110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00011101010001001100000011001110

       - FUNCTION OUTPUT:          00000100110011000101110011111110

       - Left XOR FUNCTION OUTPUT: 00011001100010001001110000110000

       - Next Round Left 32 Bits:  01001010110011001100100011011111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011001100010001001110000110000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001010110011001100100011011111

       - Right 32 Bits:            00011001100010001001110000110000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10100101001100010101010110010001111010011001010110111001   [Subkey: 6]
          - Input Half:       00011001100010001001110000110000
          - S-Box Result:     10100011001000100011010100011111   [per every group of 4-bits]
          - Split Into Two:   1010001100100010 [L] 0011010100011111 [R]
          - Swap Halves:      00110101000111111010001100100010
          - Bit Inversion:    11001010111000000101110011011101
          - Compressed Key:   00011100010101101111100101110110   [done by compression P-Box]
          - XOR with Key:     11010110101101101010010110101011

          - FUNCTION OUTPUT:  11010110101101101010010110101011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001010110011001100100011011111

       - FUNCTION OUTPUT:          11010110101101101010010110101011

       - Left XOR FUNCTION OUTPUT: 10011100011110100110110101110100

       - Next Round Left 32 Bits:  00011001100010001001110000110000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011100011110100110110101110100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00011001100010001001110000110000

       - Right 32 Bits:            10011100011110100110110101110100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11010110011101010101001101110000101100110101001000110010   [Subkey: 7]
          - Input Half:       10011100011110100110110101110100
          - S-Box Result:     00110101110101000000011011010111   [per every group of 4-bits]
          - Split Into Two:   0011010111010100 [L] 0000011011010111 [R]
          - Swap Halves:      00000110110101110011010111010100
          - Bit Inversion:    11111001001010001100101000101011
          - Compressed Key:   01111110010110111010111010000001   [done by compression P-Box]
          - XOR with Key:     10000111011100110110010010101010

          - FUNCTION OUTPUT:  10000111011100110110010010101010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00011001100010001001110000110000

       - FUNCTION OUTPUT:          10000111011100110110010010101010

       - Left XOR FUNCTION OUTPUT: 10011110111110111111100010011010

       - Next Round Left 32 Bits:  10011100011110100110110101110100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011110111110111111100010011010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011100011110100110110101110100

       - Right 32 Bits:            10011110111110111111100010011010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001100010101010110010001111010011001010110111001101001   [Subkey: 8]
          - Input Half:       10011110111110111111100010011010
          - S-Box Result:     00111100101110001011001000110100   [per every group of 4-bits]
          - Split Into Two:   0011110010111000 [L] 1011001000110100 [R]
          - Swap Halves:      10110010001101000011110010111000
          - Bit Inversion:    01001101110010111100001101000111
          - Compressed Key:   10011010110010110011101011000110   [done by compression P-Box]
          - XOR with Key:     11010111000000001111100110000001

          - FUNCTION OUTPUT:  11010111000000001111100110000001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011100011110100110110101110100

       - FUNCTION OUTPUT:          11010111000000001111100110000001

       - Left XOR FUNCTION OUTPUT: 01001011011110101001010011110101

       - Next Round Left 32 Bits:  10011110111110111111100010011010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001011011110101001010011110101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011110111110111111100010011010

       - Right 32 Bits:            01001011011110101001010011110101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10011101010101001101110000101100110101001000110010110101   [Subkey: 9]
          - Input Half:       01001011011110101001010011110101
          - S-Box Result:     01111000110101000011011110111001   [per every group of 4-bits]
          - Split Into Two:   0111100011010100 [L] 0011011110111001 [R]
          - Swap Halves:      00110111101110010111100011010100
          - Bit Inversion:    11001000010001101000011100101011
          - Compressed Key:   11011010011100011001000101101010   [done by compression P-Box]
          - XOR with Key:     00010010001101110001011001000001

          - FUNCTION OUTPUT:  00010010001101110001011001000001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011110111110111111100010011010

       - FUNCTION OUTPUT:          00010010001101110001011001000001

       - Left XOR FUNCTION OUTPUT: 10001100110011001110111011011011

       - Next Round Left 32 Bits:  01001011011110101001010011110101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001100110011001110111011011011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001011011110101001010011110101

       - Right 32 Bits:            10001100110011001110111011011011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010101010110010001111010011001010110111001101001010011   [Subkey: 10]
          - Input Half:       10001100110011001110111011011011
          - S-Box Result:     00100101010101011100110001101000   [per every group of 4-bits]
          - Split Into Two:   0010010101010101 [L] 1100110001101000 [R]
          - Swap Halves:      11001100011010000010010101010101
          - Bit Inversion:    00110011100101111101101010101010
          - Compressed Key:   01011001001101100101110110000011   [done by compression P-Box]
          - XOR with Key:     01101010101000011000011100101001

          - FUNCTION OUTPUT:  01101010101000011000011100101001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001011011110101001010011110101

       - FUNCTION OUTPUT:          01101010101000011000011100101001

       - Left XOR FUNCTION OUTPUT: 00100001110110110001001111011100

       - Next Round Left 32 Bits:  10001100110011001110111011011011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00100001110110110001001111011100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001100110011001110111011011011

       - Right 32 Bits:            00100001110110110001001111011100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010101001101110000101100110101001000110010110101100111   [Subkey: 11]
          - Input Half:       00100001110110110001001111011100
          - S-Box Result:     11101010011010001010000101100101   [per every group of 4-bits]
          - Split Into Two:   1110101001101000 [L] 1010000101100101 [R]
          - Swap Halves:      10100001011001011110101001101000
          - Bit Inversion:    01011110100110100001010110010111
          - Compressed Key:   01011110001000110110110001011011   [done by compression P-Box]
          - XOR with Key:     00000000101110010111100111001100

          - FUNCTION OUTPUT:  00000000101110010111100111001100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001100110011001110111011011011

       - FUNCTION OUTPUT:          00000000101110010111100111001100

       - Left XOR FUNCTION OUTPUT: 10001100011101011001011100010111

       - Next Round Left 32 Bits:  00100001110110110001001111011100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001100011101011001011100010111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00100001110110110001001111011100

       - Right 32 Bits:            10001100011101011001011100010111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010110010001111010011001010110111001101001010011000101   [Subkey: 12]
          - Input Half:       10001100011101011001011100010111
          - S-Box Result:     00100101110110010011110110101101   [per every group of 4-bits]
          - Split Into Two:   0010010111011001 [L] 0011110110101101 [R]
          - Swap Halves:      00111101101011010010010111011001
          - Bit Inversion:    11000010010100101101101000100110
          - Compressed Key:   01110010100010101011010101101010   [done by compression P-Box]
          - XOR with Key:     10110000110110000110111101001100

          - FUNCTION OUTPUT:  10110000110110000110111101001100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00100001110110110001001111011100

       - FUNCTION OUTPUT:          10110000110110000110111101001100

       - Left XOR FUNCTION OUTPUT: 10010001000000110111110010010000

       - Next Round Left 32 Bits:  10001100011101011001011100010111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010001000000110111110010010000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001100011101011001011100010111

       - Right 32 Bits:            10010001000000110111110010010000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001101110000101100110101001000110010110101100111010101   [Subkey: 13]
          - Input Half:       10010001000000110111110010010000
          - S-Box Result:     00111010111100011101010100111111   [per every group of 4-bits]
          - Split Into Two:   0011101011110001 [L] 1101010100111111 [R]
          - Swap Halves:      11010101001111110011101011110001
          - Bit Inversion:    00101010110000001100010100001110
          - Compressed Key:   10010000011010001001111000111010   [done by compression P-Box]
          - XOR with Key:     10111010101010000101101100110100

          - FUNCTION OUTPUT:  10111010101010000101101100110100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001100011101011001011100010111

       - FUNCTION OUTPUT:          10111010101010000101101100110100

       - Left XOR FUNCTION OUTPUT: 00110110110111011100110000100011

       - Next Round Left 32 Bits:  10010001000000110111110010010000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00110110110111011100110000100011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010001000000110111110010010000

       - Right 32 Bits:            00110110110111011100110000100011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010001111010011001010110111001101001010011000101010101   [Subkey: 14]
          - Input Half:       00110110110111011100110000100011
          - S-Box Result:     00010000011001100101010111100001   [per every group of 4-bits]
          - Split Into Two:   0001000001100110 [L] 0101010111100001 [R]
          - Swap Halves:      01010101111000010001000001100110
          - Bit Inversion:    10101010000111101110111110011001
          - Compressed Key:   01000101000101111110100000011010   [done by compression P-Box]
          - XOR with Key:     11101111000010010000011110000011

          - FUNCTION OUTPUT:  11101111000010010000011110000011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010001000000110111110010010000

       - FUNCTION OUTPUT:          11101111000010010000011110000011

       - Left XOR FUNCTION OUTPUT: 01111110000010100111101100010011

       - Next Round Left 32 Bits:  00110110110111011100110000100011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01111110000010100111101100010011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00110110110111011100110000100011

       - Right 32 Bits:            01111110000010100111101100010011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01110000101100110101001000110010110101100111010101010011   [Subkey: 15]
          - Input Half:       01111110000010100111101100010011
          - S-Box Result:     11011100111101001101100010100001   [per every group of 4-bits]
          - Split Into Two:   1101110011110100 [L] 1101100010100001 [R]
          - Swap Halves:      11011000101000011101110011110100
          - Bit Inversion:    00100111010111100010001100001011
          - Compressed Key:   01001100010100111001011001010011   [done by compression P-Box]
          - XOR with Key:     01101011000011011011010101011000

          - FUNCTION OUTPUT:  01101011000011011011010101011000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00110110110111011100110000100011

       - FUNCTION OUTPUT:          01101011000011011011010101011000

       - Left XOR FUNCTION OUTPUT: 01011101110100000111100101111011

       - Next Round Left 32 Bits:  01111110000010100111101100010011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01011101110100000111100101111011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01111110000010100111101100010011

       - Right 32 Bits:            01011101110100000111100101111011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01111010011001010110111001101001010011000101010101100100   [Subkey: 16]
          - Input Half:       01011101110100000111100101111011
          - S-Box Result:     10010110011011111101001111011000   [per every group of 4-bits]
          - Split Into Two:   1001011001101111 [L] 1101001111011000 [R]
          - Swap Halves:      11010011110110001001011001101111
          - Bit Inversion:    00101100001001110110100110010000
          - Compressed Key:   11100110111010010101001001011000   [done by compression P-Box]
          - XOR with Key:     11001010110011100011101111001000

          - FUNCTION OUTPUT:  11001010110011100011101111001000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01111110000010100111101100010011

       - FUNCTION OUTPUT:          11001010110011100011101111001000

       - Left XOR FUNCTION OUTPUT: 10110100110001000100000011011011

       - Next Round Left 32 Bits:  01011101110100000111100101111011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10110100110001000100000011011011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 1011010011000100010000001101101101011101110100000111100101111011

 > Processed Block:     1011010011000100010000001101101101011101110100000111100101111011


FINAL PROCESSED DATA BLOCKS: 1011010011011010001011111111011001011111100100111100110101101011,0000100100010001101100101100110111100000110011000111010111010101,1011010011000100010000001101101101011101110100000111100101111011,

BLOCKS IN ASCII:             ´Ú/ö_?Ík	²ÍàÌuÕ´Ä@Û]Ðy{

=========================================================================================================================
STAGE 3: DES [DECRYPT] ==================================================================================================
=========================================================================================================================

56-bit key: kyElQni
In Binary:  01101011011110010100010101101100010100010110111001101001

Subkeys:    Key i = Key (i - 1) [Shifted left by 3 and then inverted]

Subkey 1  : 10100100001101011101010010011101011101001000110010110100
Subkey 2  : 11011110010100010101101100010100010110111001101001011010
Subkey 3  : 00001101011101010010011101011101001000110010110100101001
Subkey 4  : 10010100010101101100010100010110111001101001011010110111
Subkey 5  : 01011101010010011101011101001000110010110100101001000011
Subkey 6  : 00010101101100010100010110111001101001011010110111100101
Subkey 7  : 01010010011101011101001000110010110100101001000011010111
Subkey 8  : 01101100010100010110111001101001011010110111100101000101
Subkey 9  : 10011101011101001000110010110100101001000011010111010100
Subkey 10 : 00010100010110111001101001011010110111100101000101011011
Subkey 11 : 01011101001000110010110100101001000011010111010100100111
Subkey 12 : 00010110111001101001011010110111100101000101011011000101
Subkey 13 : 01001000110010110100101001000011010111010100100111010111
Subkey 14 : 10111001101001011010110111100101000101011011000101000101
Subkey 15 : 00110010110100101001000011010111010100100111010111010010
Subkey 16 : 01101001011010110111100101000101011011000101000101101110

S-BOX (4x4):
INPUT | OUTPUT
------|-------
0000  | 1111
0001  | 1010
0010  | 1110
0011  | 0001
0100  | 0111
0101  | 1001
0110  | 0000
0111  | 1101
1000  | 0010
1001  | 0011
1010  | 0100
1011  | 1000
1100  | 0101
1101  | 0110
1110  | 1100
1111  | 1011

P-BOX (7 bits compressed to 4 bits)
Bit at Position X goes to Position Y
X: | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
Y: | 4 | 3 | 1 | 2 | 1 | 4 | 3 |


Data to decrypt         : ´Ú/ö_?Ík	²ÍàÌuÕ´Ä@Û]Ðy{

Data padded with spaces : ´Ú/ö_?Ík	²ÍàÌuÕ´Ä@Û]Ðy{[Padded with '0' spaces]

Data in ASCII           : 180,218,47,246,95,147,205,107,9,17,178,205,224,204,117,213,180,196,64,219,93,208,121,123,

Data in Binary          : 10110100,11011010,00101111,11110110,01011111,10010011,11001101,01101011,00001001,00010001,10110010,11001101,11100000,11001100,01110101,11010101,10110100,11000100,01000000,11011011,01011101,11010000,01111001,01111011,

Data in 64-bit Blocks   : 1011010011011010001011111111011001011111100100111100110101101011,0000100100010001101100101100110111100000110011000111010111010101,1011010011000100010000001101101101011101110100000111100101111011,

!!!!NOTE: Subkeys used in REVERSE order for DECRYPTION



<<<<<< PROCESSING IN 'CBC' MODE >>>>>>


!!!CBC: Initial Previous Ciphertext = IV:               (0101010001110100011001010100100001001010011001010101010001001001)

Ciphertext Block 1:                                      1011010011011010001011111111011001011111100100111100110101101011

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10110100110110100010111111110110

       - Right 32 Bits:            01011111100100111100110101101011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01101001011010110111100101000101011011000101000101101110   [Subkey: 16]
          - Input Half:       01011111100100111100110101101011
          - S-Box Result:     10011011001100010101011000001000   [per every group of 4-bits]
          - Split Into Two:   1001101100110001 [L] 0101011000001000 [R]
          - Swap Halves:      01010110000010001001101100110001
          - Bit Inversion:    10101001111101110110010011001110
          - Compressed Key:   10000101111110000111001000011101   [done by compression P-Box]
          - XOR with Key:     00101100000011110001011011010011

          - FUNCTION OUTPUT:  00101100000011110001011011010011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10110100110110100010111111110110

       - FUNCTION OUTPUT:          00101100000011110001011011010011

       - Left XOR FUNCTION OUTPUT: 10011000110101010011100100100101

       - Next Round Left 32 Bits:  01011111100100111100110101101011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011000110101010011100100100101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011111100100111100110101101011

       - Right 32 Bits:            10011000110101010011100100100101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110010110100101001000011010111010100100111010111010010   [Subkey: 15]
          - Input Half:       10011000110101010011100100100101
          - S-Box Result:     00110010011010010001001111101001   [per every group of 4-bits]
          - Split Into Two:   0011001001101001 [L] 0001001111101001 [R]
          - Swap Halves:      00010011111010010011001001101001
          - Bit Inversion:    11101100000101101100110110010110
          - Compressed Key:   01101000000111100101011001110001   [done by compression P-Box]
          - XOR with Key:     10000100000010001001101111100111

          - FUNCTION OUTPUT:  10000100000010001001101111100111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011111100100111100110101101011

       - FUNCTION OUTPUT:          10000100000010001001101111100111

       - Left XOR FUNCTION OUTPUT: 11011011100110110101011010001100

       - Next Round Left 32 Bits:  10011000110101010011100100100101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11011011100110110101011010001100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011000110101010011100100100101

       - Right 32 Bits:            11011011100110110101011010001100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10111001101001011010110111100101000101011011000101000101   [Subkey: 14]
          - Input Half:       11011011100110110101011010001100
          - S-Box Result:     01101000001110001001000000100101   [per every group of 4-bits]
          - Split Into Two:   0110100000111000 [L] 1001000000100101 [R]
          - Swap Halves:      10010000001001010110100000111000
          - Bit Inversion:    01101111110110101001011111000111
          - Compressed Key:   11000110101011010100100100011010   [done by compression P-Box]
          - XOR with Key:     10101001011101111101111011011101

          - FUNCTION OUTPUT:  10101001011101111101111011011101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011000110101010011100100100101

       - FUNCTION OUTPUT:          10101001011101111101111011011101

       - Left XOR FUNCTION OUTPUT: 00110001101000101110011111111000

       - Next Round Left 32 Bits:  11011011100110110101011010001100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00110001101000101110011111111000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11011011100110110101011010001100

       - Right 32 Bits:            00110001101000101110011111111000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001000110010110100101001000011010111010100100111010111   [Subkey: 13]
          - Input Half:       00110001101000101110011111111000
          - S-Box Result:     00011010010011101100110110110010   [per every group of 4-bits]
          - Split Into Two:   0001101001001110 [L] 1100110110110010 [R]
          - Swap Halves:      11001101101100100001101001001110
          - Bit Inversion:    00110010010011011110010110110001
          - Compressed Key:   10000001011010000101101000111011   [done by compression P-Box]
          - XOR with Key:     10110011001001011011111110001010

          - FUNCTION OUTPUT:  10110011001001011011111110001010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11011011100110110101011010001100

       - FUNCTION OUTPUT:          10110011001001011011111110001010

       - Left XOR FUNCTION OUTPUT: 01101000101111101110100100000110

       - Next Round Left 32 Bits:  00110001101000101110011111111000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101000101111101110100100000110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00110001101000101110011111111000

       - Right 32 Bits:            01101000101111101110100100000110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010110111001101001011010110111100101000101011011000101   [Subkey: 12]
          - Input Half:       01101000101111101110100100000110
          - S-Box Result:     00000010100011001100001111110000   [per every group of 4-bits]
          - Split Into Two:   0000001010001100 [L] 1100001111110000 [R]
          - Swap Halves:      11000011111100000000001010001100
          - Bit Inversion:    00111100000011111111110101110011
          - Compressed Key:   01110110000101111100001011101010   [done by compression P-Box]
          - XOR with Key:     01001010000110000011111110011001

          - FUNCTION OUTPUT:  01001010000110000011111110011001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00110001101000101110011111111000

       - FUNCTION OUTPUT:          01001010000110000011111110011001

       - Left XOR FUNCTION OUTPUT: 01111011101110101101100001100001

       - Next Round Left 32 Bits:  01101000101111101110100100000110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01111011101110101101100001100001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101000101111101110100100000110

       - Right 32 Bits:            01111011101110101101100001100001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011101001000110010110100101001000011010111010100100111   [Subkey: 11]
          - Input Half:       01111011101110101101100001100001
          - S-Box Result:     11011000100001000110001000001010   [per every group of 4-bits]
          - Split Into Two:   1101100010000100 [L] 0110001000001010 [R]
          - Swap Halves:      01100010000010101101100010000100
          - Bit Inversion:    10011101111101010010011101111011
          - Compressed Key:   11010100101000010100101001011011   [done by compression P-Box]
          - XOR with Key:     01001001010101000110110100100000

          - FUNCTION OUTPUT:  01001001010101000110110100100000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101000101111101110100100000110

       - FUNCTION OUTPUT:          01001001010101000110110100100000

       - Left XOR FUNCTION OUTPUT: 00100001111010101000010000100110

       - Next Round Left 32 Bits:  01111011101110101101100001100001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00100001111010101000010000100110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01111011101110101101100001100001

       - Right 32 Bits:            00100001111010101000010000100110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010100010110111001101001011010110111100101000101011011   [Subkey: 10]
          - Input Half:       00100001111010101000010000100110
          - S-Box Result:     11101010110001000010011111100000   [per every group of 4-bits]
          - Split Into Two:   1110101011000100 [L] 0010011111100000 [R]
          - Swap Halves:      00100111111000001110101011000100
          - Bit Inversion:    11011000000111110001010100111011
          - Compressed Key:   01011001001110101001011000010111   [done by compression P-Box]
          - XOR with Key:     10000001001001011000001100101100

          - FUNCTION OUTPUT:  10000001001001011000001100101100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01111011101110101101100001100001

       - FUNCTION OUTPUT:          10000001001001011000001100101100

       - Left XOR FUNCTION OUTPUT: 11111010100111110101101101001101

       - Next Round Left 32 Bits:  00100001111010101000010000100110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111010100111110101101101001101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00100001111010101000010000100110

       - Right 32 Bits:            11111010100111110101101101001101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10011101011101001000110010110100101001000011010111010100   [Subkey: 9]
          - Input Half:       11111010100111110101101101001101
          - S-Box Result:     10110100001110111001100001110110   [per every group of 4-bits]
          - Split Into Two:   1011010000111011 [L] 1001100001110110 [R]
          - Swap Halves:      10011000011101101011010000111011
          - Bit Inversion:    01100111100010010100101111000100
          - Compressed Key:   11011110001001111010000001111000   [done by compression P-Box]
          - XOR with Key:     10111001101011101110101110111100

          - FUNCTION OUTPUT:  10111001101011101110101110111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00100001111010101000010000100110

       - FUNCTION OUTPUT:          10111001101011101110101110111100

       - Left XOR FUNCTION OUTPUT: 10011000010001000110111110011010

       - Next Round Left 32 Bits:  11111010100111110101101101001101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10011000010001000110111110011010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111010100111110101101101001101

       - Right 32 Bits:            10011000010001000110111110011010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01101100010100010110111001101001011010110111100101000101   [Subkey: 8]
          - Input Half:       10011000010001000110111110011010
          - S-Box Result:     00110010011101110000101100110100   [per every group of 4-bits]
          - Split Into Two:   0011001001110111 [L] 0000101100110100 [R]
          - Swap Halves:      00001011001101000011001001110111
          - Bit Inversion:    11110100110010111100110110001000
          - Compressed Key:   10011000111010010111111000011010   [done by compression P-Box]
          - XOR with Key:     01101100001000101011001110010010

          - FUNCTION OUTPUT:  01101100001000101011001110010010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111010100111110101101101001101

       - FUNCTION OUTPUT:          01101100001000101011001110010010

       - Left XOR FUNCTION OUTPUT: 10010110101111011110100011011111

       - Next Round Left 32 Bits:  10011000010001000110111110011010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10010110101111011110100011011111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10011000010001000110111110011010

       - Right 32 Bits:            10010110101111011110100011011111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010010011101011101001000110010110100101001000011010111   [Subkey: 7]
          - Input Half:       10010110101111011110100011011111
          - S-Box Result:     00110000100001101100001001101011   [per every group of 4-bits]
          - Split Into Two:   0011000010000110 [L] 1100001001101011 [R]
          - Swap Halves:      11000010011010110011000010000110
          - Bit Inversion:    00111101100101001100111101111001
          - Compressed Key:   01101110010100111001010100101011   [done by compression P-Box]
          - XOR with Key:     01010011110001110101101001010010

          - FUNCTION OUTPUT:  01010011110001110101101001010010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10011000010001000110111110011010

       - FUNCTION OUTPUT:          01010011110001110101101001010010

       - Left XOR FUNCTION OUTPUT: 11001011100000110011010111001000

       - Next Round Left 32 Bits:  10010110101111011110100011011111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001011100000110011010111001000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10010110101111011110100011011111

       - Right 32 Bits:            11001011100000110011010111001000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010101101100010100010110111001101001011010110111100101   [Subkey: 6]
          - Input Half:       11001011100000110011010111001000
          - S-Box Result:     01011000001000010001100101010010   [per every group of 4-bits]
          - Split Into Two:   0101100000100001 [L] 0001100101010010 [R]
          - Swap Halves:      00011001010100100101100000100001
          - Bit Inversion:    11100110101011011010011111011110
          - Compressed Key:   01011100010001111110100101111010   [done by compression P-Box]
          - XOR with Key:     10111010111010100100111010100100

          - FUNCTION OUTPUT:  10111010111010100100111010100100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10010110101111011110100011011111

       - FUNCTION OUTPUT:          10111010111010100100111010100100

       - Left XOR FUNCTION OUTPUT: 00101100010101111010011001111011

       - Next Round Left 32 Bits:  11001011100000110011010111001000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00101100010101111010011001111011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11001011100000110011010111001000

       - Right 32 Bits:            00101100010101111010011001111011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011101010010011101011101001000110010110100101001000011   [Subkey: 5]
          - Input Half:       00101100010101111010011001111011
          - S-Box Result:     11100101100111010100000011011000   [per every group of 4-bits]
          - Split Into Two:   1110010110011101 [L] 0100000011011000 [R]
          - Swap Halves:      01000000110110001110010110011101
          - Bit Inversion:    10111111001001110001101001100010
          - Compressed Key:   11010001010110001001111010000011   [done by compression P-Box]
          - XOR with Key:     01101110011111111000010011100001

          - FUNCTION OUTPUT:  01101110011111111000010011100001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11001011100000110011010111001000

       - FUNCTION OUTPUT:          01101110011111111000010011100001

       - Left XOR FUNCTION OUTPUT: 10100101111111001011000100101001

       - Next Round Left 32 Bits:  00101100010101111010011001111011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10100101111111001011000100101001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00101100010101111010011001111011

       - Right 32 Bits:            10100101111111001011000100101001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100010101101100010100010110111001101001011010110111   [Subkey: 4]
          - Input Half:       10100101111111001011000100101001
          - S-Box Result:     01001001101101011000101011100011   [per every group of 4-bits]
          - Split Into Two:   0100100110110101 [L] 1000101011100011 [R]
          - Swap Halves:      10001010111000110100100110110101
          - Bit Inversion:    01110101000111001011011001001010
          - Compressed Key:   01011010010000101011010111101011   [done by compression P-Box]
          - XOR with Key:     00101111010111100000001110100001

          - FUNCTION OUTPUT:  00101111010111100000001110100001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00101100010101111010011001111011

       - FUNCTION OUTPUT:          00101111010111100000001110100001

       - Left XOR FUNCTION OUTPUT: 00000011000010011010010111011010

       - Next Round Left 32 Bits:  10100101111111001011000100101001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00000011000010011010010111011010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10100101111111001011000100101001

       - Right 32 Bits:            00000011000010011010010111011010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00001101011101010010011101011101001000110010110100101001   [Subkey: 3]
          - Input Half:       00000011000010011010010111011010
          - S-Box Result:     11110001111100110100100101100100   [per every group of 4-bits]
          - Split Into Two:   1111000111110011 [L] 0100100101100100 [R]
          - Swap Halves:      01001001011001001111000111110011
          - Bit Inversion:    10110110100110110000111000001100
          - Compressed Key:   10011110100010100110110001010110   [done by compression P-Box]
          - XOR with Key:     00101000000100010110001001011010

          - FUNCTION OUTPUT:  00101000000100010110001001011010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10100101111111001011000100101001

       - FUNCTION OUTPUT:          00101000000100010110001001011010

       - Left XOR FUNCTION OUTPUT: 10001101111011011101001101110011

       - Next Round Left 32 Bits:  00000011000010011010010111011010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001101111011011101001101110011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00000011000010011010010111011010

       - Right 32 Bits:            10001101111011011101001101110011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011110010100010101101100010100010110111001101001011010   [Subkey: 2]
          - Input Half:       10001101111011011101001101110011
          - S-Box Result:     00100110110001100110000111010001   [per every group of 4-bits]
          - Split Into Two:   0010011011000110 [L] 0110000111010001 [R]
          - Swap Halves:      01100001110100010010011011000110
          - Bit Inversion:    10011110001011101101100100111001
          - Compressed Key:   11111000011100100001110110000101   [done by compression P-Box]
          - XOR with Key:     01100110010111001100010010111100

          - FUNCTION OUTPUT:  01100110010111001100010010111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00000011000010011010010111011010

       - FUNCTION OUTPUT:          01100110010111001100010010111100

       - Left XOR FUNCTION OUTPUT: 01100101010101010110000101100110

       - Next Round Left 32 Bits:  10001101111011011101001101110011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01100101010101010110000101100110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001101111011011101001101110011

       - Right 32 Bits:            01100101010101010110000101100110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10100100001101011101010010011101011101001000110010110100   [Subkey: 1]
          - Input Half:       01100101010101010110000101100110
          - S-Box Result:     00001001100110010000101000000000   [per every group of 4-bits]
          - Split Into Two:   0000100110011001 [L] 0000101000000000 [R]
          - Swap Halves:      00001010000000000000100110011001
          - Bit Inversion:    11110101111111111111011001100110
          - Compressed Key:   00011110010101100111000101101000   [done by compression P-Box]
          - XOR with Key:     11101011101010011000011100001110

          - FUNCTION OUTPUT:  11101011101010011000011100001110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001101111011011101001101110011

       - FUNCTION OUTPUT:          11101011101010011000011100001110

       - Left XOR FUNCTION OUTPUT: 01100110010001000101010001111101

       - Next Round Left 32 Bits:  01100101010101010110000101100110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01100110010001000101010001111101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0110011001000100010101000111110101100101010101010110000101100110

 > Decrypted Block:     0110011001000100010101000111110101100101010101010110000101100110


!!!CBC: Previous Ciphertext:                             0101010001110100011001010100100001001010011001010101010001001001

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    0011001000110000001100010011010100101111001100000011010100101111

 > Final Processed Block:                                0011001000110000001100010011010100101111001100000011010100101111



Ciphertext Block 2:                                      0000100100010001101100101100110111100000110011000111010111010101

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00001001000100011011001011001101

       - Right 32 Bits:            11100000110011000111010111010101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01101001011010110111100101000101011011000101000101101110   [Subkey: 16]
          - Input Half:       11100000110011000111010111010101
          - S-Box Result:     11001111010101011101100101101001   [per every group of 4-bits]
          - Split Into Two:   1100111101010101 [L] 1101100101101001 [R]
          - Swap Halves:      11011001011010011100111101010101
          - Bit Inversion:    00100110100101100011000010101010
          - Compressed Key:   10000101111110000111001000011101   [done by compression P-Box]
          - XOR with Key:     10100011011011100100001010110111

          - FUNCTION OUTPUT:  10100011011011100100001010110111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00001001000100011011001011001101

       - FUNCTION OUTPUT:          10100011011011100100001010110111

       - Left XOR FUNCTION OUTPUT: 10101010011111111111000001111010

       - Next Round Left 32 Bits:  11100000110011000111010111010101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10101010011111111111000001111010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100000110011000111010111010101

       - Right 32 Bits:            10101010011111111111000001111010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110010110100101001000011010111010100100111010111010010   [Subkey: 15]
          - Input Half:       10101010011111111111000001111010
          - S-Box Result:     01000100110110111011111111010100   [per every group of 4-bits]
          - Split Into Two:   0100010011011011 [L] 1011111111010100 [R]
          - Swap Halves:      10111111110101000100010011011011
          - Bit Inversion:    01000000001010111011101100100100
          - Compressed Key:   01101000000111100101011001110001   [done by compression P-Box]
          - XOR with Key:     00101000001101011110110101010101

          - FUNCTION OUTPUT:  00101000001101011110110101010101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100000110011000111010111010101

       - FUNCTION OUTPUT:          00101000001101011110110101010101

       - Left XOR FUNCTION OUTPUT: 11001000111110011001100010000000

       - Next Round Left 32 Bits:  10101010011111111111000001111010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11001000111110011001100010000000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10101010011111111111000001111010

       - Right 32 Bits:            11001000111110011001100010000000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10111001101001011010110111100101000101011011000101000101   [Subkey: 14]
          - Input Half:       11001000111110011001100010000000
          - S-Box Result:     01010010101100110011001000101111   [per every group of 4-bits]
          - Split Into Two:   0101001010110011 [L] 0011001000101111 [R]
          - Swap Halves:      00110010001011110101001010110011
          - Bit Inversion:    11001101110100001010110101001100
          - Compressed Key:   11000110101011010100100100011010   [done by compression P-Box]
          - XOR with Key:     00001011011111011110010001010110

          - FUNCTION OUTPUT:  00001011011111011110010001010110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10101010011111111111000001111010

       - FUNCTION OUTPUT:          00001011011111011110010001010110

       - Left XOR FUNCTION OUTPUT: 10100001000000100001010000101100

       - Next Round Left 32 Bits:  11001000111110011001100010000000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10100001000000100001010000101100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11001000111110011001100010000000

       - Right 32 Bits:            10100001000000100001010000101100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001000110010110100101001000011010111010100100111010111   [Subkey: 13]
          - Input Half:       10100001000000100001010000101100
          - S-Box Result:     01001010111111101010011111100101   [per every group of 4-bits]
          - Split Into Two:   0100101011111110 [L] 1010011111100101 [R]
          - Swap Halves:      10100111111001010100101011111110
          - Bit Inversion:    01011000000110101011010100000001
          - Compressed Key:   10000001011010000101101000111011   [done by compression P-Box]
          - XOR with Key:     11011001011100101110111100111010

          - FUNCTION OUTPUT:  11011001011100101110111100111010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11001000111110011001100010000000

       - FUNCTION OUTPUT:          11011001011100101110111100111010

       - Left XOR FUNCTION OUTPUT: 00010001100010110111011110111010

       - Next Round Left 32 Bits:  10100001000000100001010000101100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00010001100010110111011110111010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10100001000000100001010000101100

       - Right 32 Bits:            00010001100010110111011110111010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010110111001101001011010110111100101000101011011000101   [Subkey: 12]
          - Input Half:       00010001100010110111011110111010
          - S-Box Result:     10101010001010001101110110000100   [per every group of 4-bits]
          - Split Into Two:   1010101000101000 [L] 1101110110000100 [R]
          - Swap Halves:      11011101100001001010101000101000
          - Bit Inversion:    00100010011110110101010111010111
          - Compressed Key:   01110110000101111100001011101010   [done by compression P-Box]
          - XOR with Key:     01010100011011001001011100111101

          - FUNCTION OUTPUT:  01010100011011001001011100111101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10100001000000100001010000101100

       - FUNCTION OUTPUT:          01010100011011001001011100111101

       - Left XOR FUNCTION OUTPUT: 11110101011011101000001100010001

       - Next Round Left 32 Bits:  00010001100010110111011110111010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110101011011101000001100010001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00010001100010110111011110111010

       - Right 32 Bits:            11110101011011101000001100010001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011101001000110010110100101001000011010111010100100111   [Subkey: 11]
          - Input Half:       11110101011011101000001100010001
          - S-Box Result:     10111001000011000010000110101010   [per every group of 4-bits]
          - Split Into Two:   1011100100001100 [L] 0010000110101010 [R]
          - Swap Halves:      00100001101010101011100100001100
          - Bit Inversion:    11011110010101010100011011110011
          - Compressed Key:   11010100101000010100101001011011   [done by compression P-Box]
          - XOR with Key:     00001010111101000000110010101000

          - FUNCTION OUTPUT:  00001010111101000000110010101000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00010001100010110111011110111010

       - FUNCTION OUTPUT:          00001010111101000000110010101000

       - Left XOR FUNCTION OUTPUT: 00011011011111110111101100010010

       - Next Round Left 32 Bits:  11110101011011101000001100010001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011011011111110111101100010010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110101011011101000001100010001

       - Right 32 Bits:            00011011011111110111101100010010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010100010110111001101001011010110111100101000101011011   [Subkey: 10]
          - Input Half:       00011011011111110111101100010010
          - S-Box Result:     10101000110110111101100010101110   [per every group of 4-bits]
          - Split Into Two:   1010100011011011 [L] 1101100010101110 [R]
          - Swap Halves:      11011000101011101010100011011011
          - Bit Inversion:    00100111010100010101011100100100
          - Compressed Key:   01011001001110101001011000010111   [done by compression P-Box]
          - XOR with Key:     01111110011010111100000100110011

          - FUNCTION OUTPUT:  01111110011010111100000100110011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110101011011101000001100010001

       - FUNCTION OUTPUT:          01111110011010111100000100110011

       - Left XOR FUNCTION OUTPUT: 10001011000001010100001000100010

       - Next Round Left 32 Bits:  00011011011111110111101100010010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10001011000001010100001000100010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00011011011111110111101100010010

       - Right 32 Bits:            10001011000001010100001000100010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10011101011101001000110010110100101001000011010111010100   [Subkey: 9]
          - Input Half:       10001011000001010100001000100010
          - S-Box Result:     00101000111110010111111011101110   [per every group of 4-bits]
          - Split Into Two:   0010100011111001 [L] 0111111011101110 [R]
          - Swap Halves:      01111110111011100010100011111001
          - Bit Inversion:    10000001000100011101011100000110
          - Compressed Key:   11011110001001111010000001111000   [done by compression P-Box]
          - XOR with Key:     01011111001101100111011101111110

          - FUNCTION OUTPUT:  01011111001101100111011101111110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00011011011111110111101100010010

       - FUNCTION OUTPUT:          01011111001101100111011101111110

       - Left XOR FUNCTION OUTPUT: 01000100010010010000110001101100

       - Next Round Left 32 Bits:  10001011000001010100001000100010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000100010010010000110001101100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10001011000001010100001000100010

       - Right 32 Bits:            01000100010010010000110001101100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01101100010100010110111001101001011010110111100101000101   [Subkey: 8]
          - Input Half:       01000100010010010000110001101100
          - S-Box Result:     01110111011100111111010100000101   [per every group of 4-bits]
          - Split Into Two:   0111011101110011 [L] 1111010100000101 [R]
          - Swap Halves:      11110101000001010111011101110011
          - Bit Inversion:    00001010111110101000100010001100
          - Compressed Key:   10011000111010010111111000011010   [done by compression P-Box]
          - XOR with Key:     10010010000100111111011010010110

          - FUNCTION OUTPUT:  10010010000100111111011010010110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10001011000001010100001000100010

       - FUNCTION OUTPUT:          10010010000100111111011010010110

       - Left XOR FUNCTION OUTPUT: 00011001000101101011010010110100

       - Next Round Left 32 Bits:  01000100010010010000110001101100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011001000101101011010010110100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01000100010010010000110001101100

       - Right 32 Bits:            00011001000101101011010010110100

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010010011101011101001000110010110100101001000011010111   [Subkey: 7]
          - Input Half:       00011001000101101011010010110100
          - S-Box Result:     10100011101000001000011110000111   [per every group of 4-bits]
          - Split Into Two:   1010001110100000 [L] 1000011110000111 [R]
          - Swap Halves:      10000111100001111010001110100000
          - Bit Inversion:    01111000011110000101110001011111
          - Compressed Key:   01101110010100111001010100101011   [done by compression P-Box]
          - XOR with Key:     00010110001010111100100101110100

          - FUNCTION OUTPUT:  00010110001010111100100101110100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01000100010010010000110001101100

       - FUNCTION OUTPUT:          00010110001010111100100101110100

       - Left XOR FUNCTION OUTPUT: 01010010011000101100010100011000

       - Next Round Left 32 Bits:  00011001000101101011010010110100 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01010010011000101100010100011000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00011001000101101011010010110100

       - Right 32 Bits:            01010010011000101100010100011000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010101101100010100010110111001101001011010110111100101   [Subkey: 6]
          - Input Half:       01010010011000101100010100011000
          - S-Box Result:     10011110000011100101100110100010   [per every group of 4-bits]
          - Split Into Two:   1001111000001110 [L] 0101100110100010 [R]
          - Swap Halves:      01011001101000101001111000001110
          - Bit Inversion:    10100110010111010110000111110001
          - Compressed Key:   01011100010001111110100101111010   [done by compression P-Box]
          - XOR with Key:     11111010000110101000100010001011

          - FUNCTION OUTPUT:  11111010000110101000100010001011

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00011001000101101011010010110100

       - FUNCTION OUTPUT:          11111010000110101000100010001011

       - Left XOR FUNCTION OUTPUT: 11100011000011000011110000111111

       - Next Round Left 32 Bits:  01010010011000101100010100011000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11100011000011000011110000111111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01010010011000101100010100011000

       - Right 32 Bits:            11100011000011000011110000111111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011101010010011101011101001000110010110100101001000011   [Subkey: 5]
          - Input Half:       11100011000011000011110000111111
          - S-Box Result:     11000001111101010001010100011011   [per every group of 4-bits]
          - Split Into Two:   1100000111110101 [L] 0001010100011011 [R]
          - Swap Halves:      00010101000110111100000111110101
          - Bit Inversion:    11101010111001000011111000001010
          - Compressed Key:   11010001010110001001111010000011   [done by compression P-Box]
          - XOR with Key:     00111011101111001010000010001001

          - FUNCTION OUTPUT:  00111011101111001010000010001001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01010010011000101100010100011000

       - FUNCTION OUTPUT:          00111011101111001010000010001001

       - Left XOR FUNCTION OUTPUT: 01101001110111100110010110010001

       - Next Round Left 32 Bits:  11100011000011000011110000111111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101001110111100110010110010001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11100011000011000011110000111111

       - Right 32 Bits:            01101001110111100110010110010001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100010101101100010100010110111001101001011010110111   [Subkey: 4]
          - Input Half:       01101001110111100110010110010001
          - S-Box Result:     00000011011011000000100100111010   [per every group of 4-bits]
          - Split Into Two:   0000001101101100 [L] 0000100100111010 [R]
          - Swap Halves:      00001001001110100000001101101100
          - Bit Inversion:    11110110110001011111110010010011
          - Compressed Key:   01011010010000101011010111101011   [done by compression P-Box]
          - XOR with Key:     10101100100001110100100101111000

          - FUNCTION OUTPUT:  10101100100001110100100101111000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11100011000011000011110000111111

       - FUNCTION OUTPUT:          10101100100001110100100101111000

       - Left XOR FUNCTION OUTPUT: 01001111100010110111010101000111

       - Next Round Left 32 Bits:  01101001110111100110010110010001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01001111100010110111010101000111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01101001110111100110010110010001

       - Right 32 Bits:            01001111100010110111010101000111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00001101011101010010011101011101001000110010110100101001   [Subkey: 3]
          - Input Half:       01001111100010110111010101000111
          - S-Box Result:     01111011001010001101100101111101   [per every group of 4-bits]
          - Split Into Two:   0111101100101000 [L] 1101100101111101 [R]
          - Swap Halves:      11011001011111010111101100101000
          - Bit Inversion:    00100110100000101000010011010111
          - Compressed Key:   10011110100010100110110001010110   [done by compression P-Box]
          - XOR with Key:     10111000000010001110100010000001

          - FUNCTION OUTPUT:  10111000000010001110100010000001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01101001110111100110010110010001

       - FUNCTION OUTPUT:          10111000000010001110100010000001

       - Left XOR FUNCTION OUTPUT: 11010001110101101000110100010000

       - Next Round Left 32 Bits:  01001111100010110111010101000111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010001110101101000110100010000 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01001111100010110111010101000111

       - Right 32 Bits:            11010001110101101000110100010000

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011110010100010101101100010100010110111001101001011010   [Subkey: 2]
          - Input Half:       11010001110101101000110100010000
          - S-Box Result:     01101010011000000010011010101111   [per every group of 4-bits]
          - Split Into Two:   0110101001100000 [L] 0010011010101111 [R]
          - Swap Halves:      00100110101011110110101001100000
          - Bit Inversion:    11011001010100001001010110011111
          - Compressed Key:   11111000011100100001110110000101   [done by compression P-Box]
          - XOR with Key:     00100001001000101000100000011010

          - FUNCTION OUTPUT:  00100001001000101000100000011010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01001111100010110111010101000111

       - FUNCTION OUTPUT:          00100001001000101000100000011010

       - Left XOR FUNCTION OUTPUT: 01101110101010011111110101011101

       - Next Round Left 32 Bits:  11010001110101101000110100010000 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01101110101010011111110101011101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11010001110101101000110100010000

       - Right 32 Bits:            01101110101010011111110101011101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10100100001101011101010010011101011101001000110010110100   [Subkey: 1]
          - Input Half:       01101110101010011111110101011101
          - S-Box Result:     00001100010000111011011010010110   [per every group of 4-bits]
          - Split Into Two:   0000110001000011 [L] 1011011010010110 [R]
          - Swap Halves:      10110110100101100000110001000011
          - Bit Inversion:    01001001011010011111001110111100
          - Compressed Key:   00011110010101100111000101101000   [done by compression P-Box]
          - XOR with Key:     01010111001111111000001011010100

          - FUNCTION OUTPUT:  01010111001111111000001011010100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11010001110101101000110100010000

       - FUNCTION OUTPUT:          01010111001111111000001011010100

       - Left XOR FUNCTION OUTPUT: 10000110111010010000111111000100

       - Next Round Left 32 Bits:  01101110101010011111110101011101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10000110111010010000111111000100 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 1000011011101001000011111100010001101110101010011111110101011101

 > Decrypted Block:     1000011011101001000011111100010001101110101010011111110101011101


!!!CBC: Previous Ciphertext:                             1011010011011010001011111111011001011111100100111100110101101011

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    0011001000110011001000000011001000110001001110100011000000110110

 > Final Processed Block:                                0011001000110011001000000011001000110001001110100011000000110110



Ciphertext Block 3:                                      1011010011000100010000001101101101011101110100000111100101111011

 <<< START FEISTEL STRUCTURE >>>

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 1 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10110100110001000100000011011011

       - Right 32 Bits:            01011101110100000111100101111011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01101001011010110111100101000101011011000101000101101110   [Subkey: 16]
          - Input Half:       01011101110100000111100101111011
          - S-Box Result:     10010110011011111101001111011000   [per every group of 4-bits]
          - Split Into Two:   1001011001101111 [L] 1101001111011000 [R]
          - Swap Halves:      11010011110110001001011001101111
          - Bit Inversion:    00101100001001110110100110010000
          - Compressed Key:   10000101111110000111001000011101   [done by compression P-Box]
          - XOR with Key:     10101001110111110001101110001101

          - FUNCTION OUTPUT:  10101001110111110001101110001101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10110100110001000100000011011011

       - FUNCTION OUTPUT:          10101001110111110001101110001101

       - Left XOR FUNCTION OUTPUT: 00011101000110110101101101010110

       - Next Round Left 32 Bits:  01011101110100000111100101111011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00011101000110110101101101010110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 2 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01011101110100000111100101111011

       - Right 32 Bits:            00011101000110110101101101010110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00110010110100101001000011010111010100100111010111010010   [Subkey: 15]
          - Input Half:       00011101000110110101101101010110
          - S-Box Result:     10100110101010001001100010010000   [per every group of 4-bits]
          - Split Into Two:   1010011010101000 [L] 1001100010010000 [R]
          - Swap Halves:      10011000100100001010011010101000
          - Bit Inversion:    01100111011011110101100101010111
          - Compressed Key:   01101000000111100101011001110001   [done by compression P-Box]
          - XOR with Key:     00001111011100010000111100100110

          - FUNCTION OUTPUT:  00001111011100010000111100100110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01011101110100000111100101111011

       - FUNCTION OUTPUT:          00001111011100010000111100100110

       - Left XOR FUNCTION OUTPUT: 01010010101000010111011001011101

       - Next Round Left 32 Bits:  00011101000110110101101101010110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01010010101000010111011001011101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 3 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00011101000110110101101101010110

       - Right 32 Bits:            01010010101000010111011001011101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10111001101001011010110111100101000101011011000101000101   [Subkey: 14]
          - Input Half:       01010010101000010111011001011101
          - S-Box Result:     10011110010010101101000010010110   [per every group of 4-bits]
          - Split Into Two:   1001111001001010 [L] 1101000010010110 [R]
          - Swap Halves:      11010000100101101001111001001010
          - Bit Inversion:    00101111011010010110000110110101
          - Compressed Key:   11000110101011010100100100011010   [done by compression P-Box]
          - XOR with Key:     11101001110001000010100010101111

          - FUNCTION OUTPUT:  11101001110001000010100010101111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00011101000110110101101101010110

       - FUNCTION OUTPUT:          11101001110001000010100010101111

       - Left XOR FUNCTION OUTPUT: 11110100110111110111001111111001

       - Next Round Left 32 Bits:  01010010101000010111011001011101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11110100110111110111001111111001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 4 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01010010101000010111011001011101

       - Right 32 Bits:            11110100110111110111001111111001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01001000110010110100101001000011010111010100100111010111   [Subkey: 13]
          - Input Half:       11110100110111110111001111111001
          - S-Box Result:     10110111011010111101000110110011   [per every group of 4-bits]
          - Split Into Two:   1011011101101011 [L] 1101000110110011 [R]
          - Swap Halves:      11010001101100111011011101101011
          - Bit Inversion:    00101110010011000100100010010100
          - Compressed Key:   10000001011010000101101000111011   [done by compression P-Box]
          - XOR with Key:     10101111001001000001001010101111

          - FUNCTION OUTPUT:  10101111001001000001001010101111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01010010101000010111011001011101

       - FUNCTION OUTPUT:          10101111001001000001001010101111

       - Left XOR FUNCTION OUTPUT: 11111101100001010110010011110010

       - Next Round Left 32 Bits:  11110100110111110111001111111001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11111101100001010110010011110010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 5 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11110100110111110111001111111001

       - Right 32 Bits:            11111101100001010110010011110010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010110111001101001011010110111100101000101011011000101   [Subkey: 12]
          - Input Half:       11111101100001010110010011110010
          - S-Box Result:     10110110001010010000011110111110   [per every group of 4-bits]
          - Split Into Two:   1011011000101001 [L] 0000011110111110 [R]
          - Swap Halves:      00000111101111101011011000101001
          - Bit Inversion:    11111000010000010100100111010110
          - Compressed Key:   01110110000101111100001011101010   [done by compression P-Box]
          - XOR with Key:     10001110010101101000101100111100

          - FUNCTION OUTPUT:  10001110010101101000101100111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11110100110111110111001111111001

       - FUNCTION OUTPUT:          10001110010101101000101100111100

       - Left XOR FUNCTION OUTPUT: 01111010100010011111100011000101

       - Next Round Left 32 Bits:  11111101100001010110010011110010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01111010100010011111100011000101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 6 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11111101100001010110010011110010

       - Right 32 Bits:            01111010100010011111100011000101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011101001000110010110100101001000011010111010100100111   [Subkey: 11]
          - Input Half:       01111010100010011111100011000101
          - S-Box Result:     11010100001000111011001001011001   [per every group of 4-bits]
          - Split Into Two:   1101010000100011 [L] 1011001001011001 [R]
          - Swap Halves:      10110010010110011101010000100011
          - Bit Inversion:    01001101101001100010101111011100
          - Compressed Key:   11010100101000010100101001011011   [done by compression P-Box]
          - XOR with Key:     10011001000001110110000110000111

          - FUNCTION OUTPUT:  10011001000001110110000110000111

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11111101100001010110010011110010

       - FUNCTION OUTPUT:          10011001000001110110000110000111

       - Left XOR FUNCTION OUTPUT: 01100100100000100000010101110101

       - Next Round Left 32 Bits:  01111010100010011111100011000101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01100100100000100000010101110101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 7 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01111010100010011111100011000101

       - Right 32 Bits:            01100100100000100000010101110101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010100010110111001101001011010110111100101000101011011   [Subkey: 10]
          - Input Half:       01100100100000100000010101110101
          - S-Box Result:     00000111001011101111100111011001   [per every group of 4-bits]
          - Split Into Two:   0000011100101110 [L] 1111100111011001 [R]
          - Swap Halves:      11111001110110010000011100101110
          - Bit Inversion:    00000110001001101111100011010001
          - Compressed Key:   01011001001110101001011000010111   [done by compression P-Box]
          - XOR with Key:     01011111000111000110111011000110

          - FUNCTION OUTPUT:  01011111000111000110111011000110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01111010100010011111100011000101

       - FUNCTION OUTPUT:          01011111000111000110111011000110

       - Left XOR FUNCTION OUTPUT: 00100101100101011001011000000011

       - Next Round Left 32 Bits:  01100100100000100000010101110101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00100101100101011001011000000011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 8 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01100100100000100000010101110101

       - Right 32 Bits:            00100101100101011001011000000011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10011101011101001000110010110100101001000011010111010100   [Subkey: 9]
          - Input Half:       00100101100101011001011000000011
          - S-Box Result:     11101001001110010011000011110001   [per every group of 4-bits]
          - Split Into Two:   1110100100111001 [L] 0011000011110001 [R]
          - Swap Halves:      00110000111100011110100100111001
          - Bit Inversion:    11001111000011100001011011000110
          - Compressed Key:   11011110001001111010000001111000   [done by compression P-Box]
          - XOR with Key:     00010001001010011011011010111110

          - FUNCTION OUTPUT:  00010001001010011011011010111110

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01100100100000100000010101110101

       - FUNCTION OUTPUT:          00010001001010011011011010111110

       - Left XOR FUNCTION OUTPUT: 01110101101010111011001111001011

       - Next Round Left 32 Bits:  00100101100101011001011000000011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01110101101010111011001111001011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 9 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00100101100101011001011000000011

       - Right 32 Bits:            01110101101010111011001111001011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01101100010100010110111001101001011010110111100101000101   [Subkey: 8]
          - Input Half:       01110101101010111011001111001011
          - S-Box Result:     11011001010010001000000101011000   [per every group of 4-bits]
          - Split Into Two:   1101100101001000 [L] 1000000101011000 [R]
          - Swap Halves:      10000001010110001101100101001000
          - Bit Inversion:    01111110101001110010011010110111
          - Compressed Key:   10011000111010010111111000011010   [done by compression P-Box]
          - XOR with Key:     11100110010011100101100010101101

          - FUNCTION OUTPUT:  11100110010011100101100010101101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00100101100101011001011000000011

       - FUNCTION OUTPUT:          11100110010011100101100010101101

       - Left XOR FUNCTION OUTPUT: 11000011110110111100111010101110

       - Next Round Left 32 Bits:  01110101101010111011001111001011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11000011110110111100111010101110 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 10 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01110101101010111011001111001011

       - Right 32 Bits:            11000011110110111100111010101110

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01010010011101011101001000110010110100101001000011010111   [Subkey: 7]
          - Input Half:       11000011110110111100111010101110
          - S-Box Result:     01010001011010000101110001001100   [per every group of 4-bits]
          - Split Into Two:   0101000101101000 [L] 0101110001001100 [R]
          - Swap Halves:      01011100010011000101000101101000
          - Bit Inversion:    10100011101100111010111010010111
          - Compressed Key:   01101110010100111001010100101011   [done by compression P-Box]
          - XOR with Key:     11001101111000000011101110111100

          - FUNCTION OUTPUT:  11001101111000000011101110111100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01110101101010111011001111001011

       - FUNCTION OUTPUT:          11001101111000000011101110111100

       - Left XOR FUNCTION OUTPUT: 10111000010010111000100001110111

       - Next Round Left 32 Bits:  11000011110110111100111010101110 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10111000010010111000100001110111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 11 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11000011110110111100111010101110

       - Right 32 Bits:            10111000010010111000100001110111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00010101101100010100010110111001101001011010110111100101   [Subkey: 6]
          - Input Half:       10111000010010111000100001110111
          - S-Box Result:     10000010011110000010001011011101   [per every group of 4-bits]
          - Split Into Two:   1000001001111000 [L] 0010001011011101 [R]
          - Swap Halves:      00100010110111011000001001111000
          - Bit Inversion:    11011101001000100111110110000111
          - Compressed Key:   01011100010001111110100101111010   [done by compression P-Box]
          - XOR with Key:     10000001011001011001010011111101

          - FUNCTION OUTPUT:  10000001011001011001010011111101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11000011110110111100111010101110

       - FUNCTION OUTPUT:          10000001011001011001010011111101

       - Left XOR FUNCTION OUTPUT: 01000010101111100101101001010011

       - Next Round Left 32 Bits:  10111000010010111000100001110111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 01000010101111100101101001010011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 12 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10111000010010111000100001110111

       - Right 32 Bits:            01000010101111100101101001010011

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        01011101010010011101011101001000110010110100101001000011   [Subkey: 5]
          - Input Half:       01000010101111100101101001010011
          - S-Box Result:     01111110100011001001010010010001   [per every group of 4-bits]
          - Split Into Two:   0111111010001100 [L] 1001010010010001 [R]
          - Swap Halves:      10010100100100010111111010001100
          - Bit Inversion:    01101011011011101000000101110011
          - Compressed Key:   11010001010110001001111010000011   [done by compression P-Box]
          - XOR with Key:     10111010001101100001111111110000

          - FUNCTION OUTPUT:  10111010001101100001111111110000

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10111000010010111000100001110111

       - FUNCTION OUTPUT:          10111010001101100001111111110000

       - Left XOR FUNCTION OUTPUT: 00000010011111011001011110000111

       - Next Round Left 32 Bits:  01000010101111100101101001010011 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00000010011111011001011110000111 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 13 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            01000010101111100101101001010011

       - Right 32 Bits:            00000010011111011001011110000111

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10010100010101101100010100010110111001101001011010110111   [Subkey: 4]
          - Input Half:       00000010011111011001011110000111
          - S-Box Result:     11111110110101100011110100101101   [per every group of 4-bits]
          - Split Into Two:   1111111011010110 [L] 0011110100101101 [R]
          - Swap Halves:      00111101001011011111111011010110
          - Bit Inversion:    11000010110100100000000100101001
          - Compressed Key:   01011010010000101011010111101011   [done by compression P-Box]
          - XOR with Key:     10011000100100001011010011000010

          - FUNCTION OUTPUT:  10011000100100001011010011000010

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            01000010101111100101101001010011

       - FUNCTION OUTPUT:          10011000100100001011010011000010

       - Left XOR FUNCTION OUTPUT: 11011010001011101110111010010001

       - Next Round Left 32 Bits:  00000010011111011001011110000111 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11011010001011101110111010010001 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 14 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            00000010011111011001011110000111

       - Right 32 Bits:            11011010001011101110111010010001

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        00001101011101010010011101011101001000110010110100101001   [Subkey: 3]
          - Input Half:       11011010001011101110111010010001
          - S-Box Result:     01100100111011001100110000111010   [per every group of 4-bits]
          - Split Into Two:   0110010011101100 [L] 1100110000111010 [R]
          - Swap Halves:      11001100001110100110010011101100
          - Bit Inversion:    00110011110001011001101100010011
          - Compressed Key:   10011110100010100110110001010110   [done by compression P-Box]
          - XOR with Key:     10101101010011111111011101000101

          - FUNCTION OUTPUT:  10101101010011111111011101000101

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            00000010011111011001011110000111

       - FUNCTION OUTPUT:          10101101010011111111011101000101

       - Left XOR FUNCTION OUTPUT: 10101111001100100110000011000010

       - Next Round Left 32 Bits:  11011010001011101110111010010001 [Round's Original Right Half]

       - Next Round Right 32 Bits: 10101111001100100110000011000010 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 15 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            11011010001011101110111010010001

       - Right 32 Bits:            10101111001100100110000011000010

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        11011110010100010101101100010100010110111001101001011010   [Subkey: 2]
          - Input Half:       10101111001100100110000011000010
          - S-Box Result:     01001011000111100000111101011110   [per every group of 4-bits]
          - Split Into Two:   0100101100011110 [L] 0000111101011110 [R]
          - Swap Halves:      00001111010111100100101100011110
          - Bit Inversion:    11110000101000011011010011100001
          - Compressed Key:   11111000011100100001110110000101   [done by compression P-Box]
          - XOR with Key:     00001000110100111010100101100100

          - FUNCTION OUTPUT:  00001000110100111010100101100100

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            11011010001011101110111010010001

       - FUNCTION OUTPUT:          00001000110100111010100101100100

       - Left XOR FUNCTION OUTPUT: 11010010111111010100011111110101

       - Next Round Left 32 Bits:  10101111001100100110000011000010 [Round's Original Right Half]

       - Next Round Right 32 Bits: 11010010111111010100011111110101 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
   <<< ROUND 16 >>> --------------------------------------------------------------------------------------------
   ------------------------------------------------------------------------------------------------------------
       - Left 32 Bits :            10101111001100100110000011000010

       - Right 32 Bits:            11010010111111010100011111110101

      <<< START FEISTEL FUNCTION >>> [Input = RIGHT 32-bit half]

          - Round Key:        10100100001101011101010010011101011101001000110010110100   [Subkey: 1]
          - Input Half:       11010010111111010100011111110101
          - S-Box Result:     01101110101101100111110110111001   [per every group of 4-bits]
          - Split Into Two:   0110111010110110 [L] 0111110110111001 [R]
          - Swap Halves:      01111101101110010110111010110110
          - Bit Inversion:    10000010010001101001000101001001
          - Compressed Key:   00011110010101100111000101101000   [done by compression P-Box]
          - XOR with Key:     10011100000100001110000000100001

          - FUNCTION OUTPUT:  10011100000100001110000000100001

      <<< END FEISTEL FUNCTION >>> [Output = NEW RIGHT 32-bit half]

       - Left 32 Bits :            10101111001100100110000011000010

       - FUNCTION OUTPUT:          10011100000100001110000000100001

       - Left XOR FUNCTION OUTPUT: 00110011001000101000000011100011

       - Next Round Left 32 Bits:  11010010111111010100011111110101 [Round's Original Right Half]

       - Next Round Right 32 Bits: 00110011001000101000000011100011 [Left XOR FUNCTION OUTPUT]

   ------------------------------------------------------------------------------------------------------------
 <<< END FEISTEL STRUCTURE >>>

 > Swap Left and Right: 0011001100100010100000001110001111010010111111010100011111110101

 > Decrypted Block:     0011001100100010100000001110001111010010111111010100011111110101


!!!CBC: Previous Ciphertext:                             0000100100010001101100101100110111100000110011000111010111010101

!!!CBC: Decrypted Block XOR with Previous Ciphertext:    0011101000110011001100100010111000110010001100010011001000100000

 > Final Processed Block:                                0011101000110011001100100010111000110010001100010011001000100000


FINAL PROCESSED DATA BLOCKS: 0011001000110000001100010011010100101111001100000011010100101111,0011001000110011001000000011001000110001001110100011000000110110,0011101000110011001100100010111000110010001100010011001000100000,

BLOCKS IN ASCII:             2015/05/23 21:06:32.212 

